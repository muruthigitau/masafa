import React, { useState } from "react";
import { useConfig } from "@/contexts/ConfigContext";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faLink,
  faCog,
  faInfoCircle,
  faEdit,
} from "@fortawesome/free-solid-svg-icons";
import Select from "./fields/Select";
import TextInput from "./fields/TextInput";
import Checkbox from "./fields/Checkbox";
import Textarea from "./fields/Textarea";
const NamingSettings = () => {
  const { localConfig, setLocalConfig } = useConfig();

  const [namingRule, setNamingRule] = useState(localConfig.naming_rule || "");

  const handleFieldChange = (name, value) => {
    setLocalConfig((prevConfig) => ({ ...prevConfig, [name]: value }));
  };

  const handleNamingRuleChange = (e) => {
    const selectedRule = e.target.value;
    setNamingRule(selectedRule);
    handleFieldChange("naming_rule", selectedRule);
  };

  const getDescription = () => {
    switch (namingRule) {
      case "Autoincrement":
        return "Auto Name Format: EXAMPLE-.##### Series by prefix (separated by a dot)";
      case "Set by user":
        return "User will manually set the naming rule.";
      case "By fieldname":
        return "Name will be generated using the selected field's value.";
      case "By Naming Series field":
        return 'Name will be generated by "Naming Series" field.';
      case "Expression":
        return "Expression format for generating the name.";
      case "Expression (old style)":
        return "Old style expression format for generating the name.";
      case "Random":
        return "Randomized name generation.";
      case "By script":
        return "Custom script for generating the name.";
      default:
        return "";
    }
  };

  return (
    <>
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 p-4">
        <Select
          label="Naming Rule"
          icon={<FontAwesomeIcon icon={faCog} className="text-purple-500" />}
          value={namingRule}
          onChange={handleNamingRuleChange}
          options={[
            { value: "", label: "Select Naming Rule" },
            { value: "Set by user", label: "Set by user" },
            { value: "Autoincrement", label: "Autoincrement" },
            { value: "By fieldname", label: "By fieldname" },
            {
              value: "By Naming Series field",
              label: 'By "Naming Series" field',
            },
            { value: "Expression", label: "Expression" },
            {
              value: "Expression (old style)",
              label: "Expression (old style)",
            },
            { value: "Random", label: "Random" },
            { value: "By script", label: "By script" },
          ]}
          // className="border-purple-300 bg-purple-100"
        />

        <TextInput
          label="Documentation Link"
          icon={<FontAwesomeIcon icon={faLink} className="text-green-500" />}
          value={localConfig.documentation || ""}
          onChange={(e) => handleFieldChange("documentation", e.target.value)}
          // className="border-green-300 bg-green-100"
        />

        <div>
          <TextInput
            label="Auto Name"
            icon={
              <FontAwesomeIcon icon={faInfoCircle} className="text-pink-500" />
            }
            value={localConfig.autoname || ""}
            onChange={(e) => handleFieldChange("autoname", e.target.value)}
            // className="border-pink-300 bg-pink-100"
          />
          <p className="text-xs text-pink-700 mt-1 italic">
            {getDescription()}
          </p>
        </div>

        <Checkbox
          label="Allow Rename"
          checked={localConfig.allow_rename || false}
          onChange={(e) => handleFieldChange("allow_rename", e.target.checked)}
          // className="border-green-300"
        />

        {/* Naming Options Description */}
        <div className="p-4 border">
          <h3 className="text-sm font-semibold text-gray-900 mb-2">
            <FontAwesomeIcon
              icon={faInfoCircle}
              className="mr-2 text-purple-500"
            />
            Naming Options
          </h3>
          <ul className="text-xs text-gray-800 space-y-1 list-decimal list-inside">
            <li>
              <span className="font-mono text-pink-600">field:[fieldname]</span>{" "}
              - By Field
            </li>
            <li>
              <span className="font-mono text-pink-600">autoincrement</span> -
              Uses Database's Auto Increment feature
            </li>
            <li>
              <span className="font-mono text-pink-600">naming_series:</span> -
              By Naming Series (field called naming_series must be present)
            </li>
            <li>
              <span className="font-mono text-pink-600">Prompt</span> - Prompt
              user for a name
            </li>
            <li>
              <span className="font-mono text-pink-600">[series]</span> - Series
              by prefix (separated by a dot); e.g.,{" "}
              <span className="font-mono">PRE.#####</span>
            </li>
            <li>
              <span className="font-mono text-pink-600">
                format:EXAMPLE-&#123;MM&#125;morewords&#123;fieldname1&#125;-&#123;fieldname2&#125;-&#123;#####&#125;
              </span>{" "}
              - Replace all braced words (fieldnames, date words (DD, MM, YY),
              series) with their value.
            </li>
          </ul>
        </div>

        <Textarea
          label="Description"
          icon={<FontAwesomeIcon icon={faEdit} className="text-pink-500" />}
          value={localConfig.description || ""}
          onChange={(e) => handleFieldChange("description", e.target.value)}
          className=" h-48"
        />
      </div>
    </>
  );
};

export default NamingSettings;
