[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "click",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "click",
        "description": "click",
        "detail": "click",
        "documentation": {}
    },
    {
        "label": "frappe",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "frappe",
        "description": "frappe",
        "detail": "frappe",
        "documentation": {}
    },
    {
        "label": "_",
        "importPath": "frappe",
        "description": "frappe",
        "isExtraImport": true,
        "detail": "frappe",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "frappe.model.document",
        "description": "frappe.model.document",
        "isExtraImport": true,
        "detail": "frappe.model.document",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "getpass",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "getpass",
        "description": "getpass",
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "getpass",
        "importPath": "getpass",
        "description": "getpass",
        "isExtraImport": true,
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "local",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "local",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "pymysql",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pymysql",
        "description": "pymysql",
        "detail": "pymysql",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "get_close_matches",
        "importPath": "difflib",
        "description": "difflib",
        "isExtraImport": true,
        "detail": "difflib",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "serve",
        "importPath": "django.views.static",
        "description": "django.views.static",
        "isExtraImport": true,
        "detail": "django.views.static",
        "documentation": {}
    },
    {
        "label": "serve",
        "importPath": "django.views.static",
        "description": "django.views.static",
        "isExtraImport": true,
        "detail": "django.views.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "ChangeLog",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "OTP",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "UserIPAddress",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "ChangeLog",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "OTP",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "UserIPAddress",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "App",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "ChangeLog",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "ChangeLog",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Reminder",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Permission",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django_filters",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_filters",
        "description": "django_filters",
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "rest_framework",
        "importPath": "django_filters",
        "description": "django_filters",
        "isExtraImport": true,
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connections",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "multiselectfield.db.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiselectfield.db.fields",
        "description": "multiselectfield.db.fields",
        "detail": "multiselectfield.db.fields",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "barcode",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "barcode",
        "description": "barcode",
        "detail": "barcode",
        "documentation": {}
    },
    {
        "label": "qrcode",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qrcode",
        "description": "qrcode",
        "detail": "qrcode",
        "documentation": {}
    },
    {
        "label": "ImageWriter",
        "importPath": "barcode.writer",
        "description": "barcode.writer",
        "isExtraImport": true,
        "detail": "barcode.writer",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "django.core.files",
        "description": "django.core.files",
        "isExtraImport": true,
        "detail": "django.core.files",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "MultiSelectField",
        "importPath": "multiselectfield",
        "description": "multiselectfield",
        "isExtraImport": true,
        "detail": "multiselectfield",
        "documentation": {}
    },
    {
        "label": "MultiSelectField",
        "importPath": "multiselectfield",
        "description": "multiselectfield",
        "isExtraImport": true,
        "detail": "multiselectfield",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "DEFAULT_LICENSE_CHOICES",
        "importPath": "core.models.core",
        "description": "core.models.core",
        "isExtraImport": true,
        "detail": "core.models.core",
        "documentation": {}
    },
    {
        "label": "SUPPORTED_PLATFORMS_CHOICES",
        "importPath": "core.models.core",
        "description": "core.models.core",
        "isExtraImport": true,
        "detail": "core.models.core",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "DateTimeField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "FloatField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "BooleanField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "CharField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "TextField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "EmailField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "URLField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "UUIDField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "DecimalField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "DateField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "TimeField",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "django.db.models.fields.related",
        "description": "django.db.models.fields.related",
        "isExtraImport": true,
        "detail": "django.db.models.fields.related",
        "documentation": {}
    },
    {
        "label": "ManyToManyField",
        "importPath": "django.db.models.fields.related",
        "description": "django.db.models.fields.related",
        "isExtraImport": true,
        "detail": "django.db.models.fields.related",
        "documentation": {}
    },
    {
        "label": "OneToOneField",
        "importPath": "django.db.models.fields.related",
        "description": "django.db.models.fields.related",
        "isExtraImport": true,
        "detail": "django.db.models.fields.related",
        "documentation": {}
    },
    {
        "label": "model_to_dict",
        "importPath": "django.forms.models",
        "description": "django.forms.models",
        "isExtraImport": true,
        "detail": "django.forms.models",
        "documentation": {}
    },
    {
        "label": "parse_date",
        "importPath": "django.utils.dateparse",
        "description": "django.utils.dateparse",
        "isExtraImport": true,
        "detail": "django.utils.dateparse",
        "documentation": {}
    },
    {
        "label": "parse_datetime",
        "importPath": "django.utils.dateparse",
        "description": "django.utils.dateparse",
        "isExtraImport": true,
        "detail": "django.utils.dateparse",
        "documentation": {}
    },
    {
        "label": "parse_time",
        "importPath": "django.utils.dateparse",
        "description": "django.utils.dateparse",
        "isExtraImport": true,
        "detail": "django.utils.dateparse",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "EmailMultiAlternatives",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "strip_tags",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "uuid_utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid_utils",
        "description": "uuid_utils",
        "detail": "uuid_utils",
        "documentation": {}
    },
    {
        "label": "log_types",
        "importPath": "frappe.model",
        "description": "frappe.model",
        "isExtraImport": true,
        "detail": "frappe.model",
        "documentation": {}
    },
    {
        "label": "DocType",
        "importPath": "frappe.query_builder",
        "description": "frappe.query_builder",
        "isExtraImport": true,
        "detail": "frappe.query_builder",
        "documentation": {}
    },
    {
        "label": "cint",
        "importPath": "frappe.utils",
        "description": "frappe.utils",
        "isExtraImport": true,
        "detail": "frappe.utils",
        "documentation": {}
    },
    {
        "label": "cstr",
        "importPath": "frappe.utils",
        "description": "frappe.utils",
        "isExtraImport": true,
        "detail": "frappe.utils",
        "documentation": {}
    },
    {
        "label": "now_datetime",
        "importPath": "frappe.utils",
        "description": "frappe.utils",
        "isExtraImport": true,
        "detail": "frappe.utils",
        "documentation": {}
    },
    {
        "label": "pre_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "pre_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "GroupFilter",
        "importPath": "core.filters",
        "description": "core.filters",
        "isExtraImport": true,
        "detail": "core.filters",
        "documentation": {}
    },
    {
        "label": "PermissionFilter",
        "importPath": "core.filters",
        "description": "core.filters",
        "isExtraImport": true,
        "detail": "core.filters",
        "documentation": {}
    },
    {
        "label": "UserFilter",
        "importPath": "core.filters",
        "description": "core.filters",
        "isExtraImport": true,
        "detail": "core.filters",
        "documentation": {}
    },
    {
        "label": "AppFilter",
        "importPath": "core.filters",
        "description": "core.filters",
        "isExtraImport": true,
        "detail": "core.filters",
        "documentation": {}
    },
    {
        "label": "ChangeLogFilter",
        "importPath": "core.filters",
        "description": "core.filters",
        "isExtraImport": true,
        "detail": "core.filters",
        "documentation": {}
    },
    {
        "label": "DocumentFilter",
        "importPath": "core.filters",
        "description": "core.filters",
        "isExtraImport": true,
        "detail": "core.filters",
        "documentation": {}
    },
    {
        "label": "ModuleFilter",
        "importPath": "core.filters",
        "description": "core.filters",
        "isExtraImport": true,
        "detail": "core.filters",
        "documentation": {}
    },
    {
        "label": "HasGroupPermission",
        "importPath": "core.permissions",
        "description": "core.permissions",
        "isExtraImport": true,
        "detail": "core.permissions",
        "documentation": {}
    },
    {
        "label": "IsSuperUser",
        "importPath": "core.permissions",
        "description": "core.permissions",
        "isExtraImport": true,
        "detail": "core.permissions",
        "documentation": {}
    },
    {
        "label": "GroupSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "PermissionSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "UserIPAddressSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "AppSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "ChangeLogSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "DocumentSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "ModuleSerializer",
        "importPath": "core.serializers",
        "description": "core.serializers",
        "isExtraImport": true,
        "detail": "core.serializers",
        "documentation": {}
    },
    {
        "label": "send_custom_email",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "send_custom_email",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "send_custom_email",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "get_random_string",
        "importPath": "django.utils.crypto",
        "description": "django.utils.crypto",
        "isExtraImport": true,
        "detail": "django.utils.crypto",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "BasePermission",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "apps",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "django.core.cache",
        "description": "django.core.cache",
        "isExtraImport": true,
        "detail": "django.core.cache",
        "documentation": {}
    },
    {
        "label": "BasicAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "SessionAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "TokenAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "rest_framework.request",
        "description": "rest_framework.request",
        "isExtraImport": true,
        "detail": "rest_framework.request",
        "documentation": {}
    },
    {
        "label": "MiddlewareMixin",
        "importPath": "django.utils.deprecation",
        "description": "django.utils.deprecation",
        "isExtraImport": true,
        "detail": "django.utils.deprecation",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "dropdoc",
        "kind": 2,
        "importPath": "blox.apps.doc.drop",
        "description": "blox.apps.doc.drop",
        "peekOfCode": "def dropdoc(doc_name: str, app: Optional[str], module: Optional[str]) -> None:\n    \"\"\"Delete the specified documentation folder from the module and remove it from the documentation list.\"\"\"\n    # Convert inputs to snake_case\n    doc_name = to_snake_case(doc_name)\n    app = to_snake_case(app) if app else None\n    module = to_snake_case(module) if module else None\n    # Load available apps\n    apps_txt_path = os.path.join(PROJECT_ROOT, \"config\", \"apps.txt\")\n    apps: List[str] = []\n    with open(apps_txt_path, \"r\") as f:",
        "detail": "blox.apps.doc.drop",
        "documentation": {}
    },
    {
        "label": "{to_titlecase_no_space",
        "kind": 6,
        "importPath": "blox.apps.doc.file_handler",
        "description": "blox.apps.doc.file_handler",
        "peekOfCode": "class {to_titlecase_no_space(doc_name)}(Document):\n    pass\n        \"\"\",\n        f\"{doc_id}.js\": f\"\"\"\n// {doc_name} JavaScript File\nfrappe.ui.form.on('{doc_name}', {{\n    refresh: function (frm) {{\n        // Custom script logic here\n    }},\n}});",
        "detail": "blox.apps.doc.file_handler",
        "documentation": {}
    },
    {
        "label": "Test{to_titlecase_no_space",
        "kind": 6,
        "importPath": "blox.apps.doc.file_handler",
        "description": "blox.apps.doc.file_handler",
        "peekOfCode": "class Test{to_titlecase_no_space(doc_name)}(unittest.TestCase):\n    def test_example(self):\n        # Example test case\n        self.assertTrue(True)\n        \"\"\",\n    }\n    # Create the doctype folder\n    doc_folder_path: str = os.path.join(base_path, \"doctype\", doc_id)\n    os.makedirs(doc_folder_path, exist_ok=True)\n    # Create the files in the doctype folder",
        "detail": "blox.apps.doc.file_handler",
        "documentation": {}
    },
    {
        "label": "create_files",
        "kind": 2,
        "importPath": "blox.apps.doc.file_handler",
        "description": "blox.apps.doc.file_handler",
        "peekOfCode": "def create_files(base_path: str, doc_name: str, doc_id: str, module: str) -> str:\n    \"\"\"\n    Create a doctype folder with Frappe-like files in the given base path.\n    Args:\n        base_path (str): Path where the doctype folder should be created.\n        doc_name (str): Name of the doctype folder.\n        doc_id (str): Identifier for the doctype.\n        module (str): Module name.\n    Returns:\n        str: Path to the created doctype folder.",
        "detail": "blox.apps.doc.file_handler",
        "documentation": {}
    },
    {
        "label": "newdoc",
        "kind": 2,
        "importPath": "blox.apps.doc.new",
        "description": "blox.apps.doc.new",
        "peekOfCode": "def newdoc(doc_name: str, app: Optional[str], module: Optional[str]) -> None:\n    \"\"\"Create a new doctype folder with default files in the specified module.\"\"\"\n    # Convert inputs to snake_case\n    doc_id: str = to_snake_case(doc_name)\n    app = to_snake_case(app) if app else None\n    module_id = to_snake_case(module) if module else None\n    # Load available apps\n    apps_txt_path: str = os.path.join(PROJECT_ROOT, \"config\", \"apps.txt\")\n    apps: list[str] = []\n    with open(apps_txt_path, \"r\") as f:",
        "detail": "blox.apps.doc.new",
        "documentation": {}
    },
    {
        "label": "dropmodule",
        "kind": 2,
        "importPath": "blox.apps.module.drop",
        "description": "blox.apps.module.drop",
        "peekOfCode": "def dropmodule(app_name: str, module_name: str) -> None:\n    \"\"\"Delete the specified module from the Django app and remove it from modules.txt.\"\"\"\n    # Path to the app's module directory\n    app_path = os.path.join(PROJECT_ROOT, \"apps\", app_name)\n    module_path = os.path.join(app_path, module_name)\n    # Check if the app folder exists\n    if not os.path.exists(app_path):\n        click.echo(f\"The app '{app_name}' does not exist.\")\n        return\n    # Check if the module folder exists",
        "detail": "blox.apps.module.drop",
        "documentation": {}
    },
    {
        "label": "newmodule",
        "kind": 2,
        "importPath": "blox.apps.module.new",
        "description": "blox.apps.module.new",
        "peekOfCode": "def newmodule(app_name: str, module_name: str) -> None:\n    \"\"\"Create a new module within the specified Django app.\"\"\"\n    # Path to the app's module directory\n    app_path: str = os.path.join(PROJECT_ROOT, \"apps\", app_name)\n    module_path: str = os.path.join(app_path, module_name)\n    # Check if the app folder exists\n    if not os.path.exists(app_path):\n        click.echo(f\"The app '{app_name}' does not exist.\")\n        return\n    # Check if the module already exists",
        "detail": "blox.apps.module.new",
        "documentation": {}
    },
    {
        "label": "normalize_license_name",
        "kind": 2,
        "importPath": "blox.apps.utils.file_creater",
        "description": "blox.apps.utils.file_creater",
        "peekOfCode": "def normalize_license_name(license_type: str) -> str:\n    \"\"\"Convert license names to SPDX-compliant format.\"\"\"\n    license_map = {\n        # MIT License\n        \"mit\": \"MIT\",\n        \"MIT\": \"MIT\",\n        # GNU General Public Licenses (GPL)\n        \"gpl\": \"GPL-3.0\",\n        \"gpl3\": \"GPL-3.0\",\n        \"gpl-3.0\": \"GPL-3.0\",",
        "detail": "blox.apps.utils.file_creater",
        "documentation": {}
    },
    {
        "label": "fetch_license_text",
        "kind": 2,
        "importPath": "blox.apps.utils.file_creater",
        "description": "blox.apps.utils.file_creater",
        "peekOfCode": "def fetch_license_text(license_type: str) -> str:\n    \"\"\"Fetch the full license text from the official URL for each license type.\"\"\"\n    license_urls = {\n        \"MIT\": \"https://opensource.org/licenses/MIT\",\n        \"GPL-3.0\": \"https://www.gnu.org/licenses/gpl-3.0.txt\",\n        \"GPL-2.0\": \"https://www.gnu.org/licenses/gpl-2.0.txt\",\n        \"LGPL-3.0\": \"https://www.gnu.org/licenses/lgpl-3.0.txt\",\n        \"LGPL-2.1\": \"https://www.gnu.org/licenses/lgpl-2.1.txt\",\n        \"AGPL-3.0\": \"https://www.gnu.org/licenses/agpl-3.0.txt\",\n        \"Apache-2.0\": \"https://www.apache.org/licenses/LICENSE-2.0\",",
        "detail": "blox.apps.utils.file_creater",
        "documentation": {}
    },
    {
        "label": "autofill_license",
        "kind": 2,
        "importPath": "blox.apps.utils.file_creater",
        "description": "blox.apps.utils.file_creater",
        "peekOfCode": "def autofill_license(license_text: str) -> str:\n    \"\"\"Replace placeholders in license text.\"\"\"\n    current_year = str(datetime.datetime.now().year)\n    copyright_holder = getpass.getuser()  # Use the current system user\n    license_text = license_text.replace(\"<year>\", current_year)\n    license_text = license_text.replace(\"<copyright holders>\", copyright_holder)\n    return license_text\ndef create_license(base_path: str, license_type: str) -> None:\n    \"\"\"Create a LICENSE.txt file with the specified license type.\"\"\"\n    license_path = os.path.join(base_path, \"LICENSE.txt\")",
        "detail": "blox.apps.utils.file_creater",
        "documentation": {}
    },
    {
        "label": "create_license",
        "kind": 2,
        "importPath": "blox.apps.utils.file_creater",
        "description": "blox.apps.utils.file_creater",
        "peekOfCode": "def create_license(base_path: str, license_type: str) -> None:\n    \"\"\"Create a LICENSE.txt file with the specified license type.\"\"\"\n    license_path = os.path.join(base_path, \"LICENSE.txt\")\n    # Fetch and autofill license text\n    license_content = fetch_license_text(license_type)\n    license_content = autofill_license(license_content)\n    # Ensure the directory exists\n    os.makedirs(os.path.dirname(license_path), exist_ok=True)\n    # Write to LICENSE.txt\n    try:",
        "detail": "blox.apps.utils.file_creater",
        "documentation": {}
    },
    {
        "label": "create_files_from_templates",
        "kind": 2,
        "importPath": "blox.apps.utils.file_creater",
        "description": "blox.apps.utils.file_creater",
        "peekOfCode": "def create_files_from_templates(base_path: str, app_name: str, templates_folder: str, license_type: str, dynamic_content: Optional[Dict[str, str]] = None) -> None:\n    \"\"\"Create necessary files for the app by loading content from templates.\"\"\"\n    file_mappings = {\n        \"MANIFEST.in\": os.path.join(base_path, \"MANIFEST.in\"),\n        \".gitignore\": os.path.join(base_path, \".gitignore\"),\n        \"setup.py\": os.path.join(base_path, app_name, \"setup.py\"),\n        \"hooks.py\": os.path.join(base_path, app_name, \"hooks.py\"),\n        \"modules.txt\": os.path.join(base_path, app_name, \"modules.txt\"),\n        \"patches.txt\": os.path.join(base_path, app_name, \"patches.txt\"),\n        \"__init__.py\": os.path.join(base_path, app_name, \"__init__.py\"),",
        "detail": "blox.apps.utils.file_creater",
        "documentation": {}
    },
    {
        "label": "SPDX_LICENSE_URL",
        "kind": 5,
        "importPath": "blox.apps.utils.file_creater",
        "description": "blox.apps.utils.file_creater",
        "peekOfCode": "SPDX_LICENSE_URL = \"https://raw.githubusercontent.com/spdx/license-list-data/main/text/\"\ndef normalize_license_name(license_type: str) -> str:\n    \"\"\"Convert license names to SPDX-compliant format.\"\"\"\n    license_map = {\n        # MIT License\n        \"mit\": \"MIT\",\n        \"MIT\": \"MIT\",\n        # GNU General Public Licenses (GPL)\n        \"gpl\": \"GPL-3.0\",\n        \"gpl3\": \"GPL-3.0\",",
        "detail": "blox.apps.utils.file_creater",
        "documentation": {}
    },
    {
        "label": "dropapp",
        "kind": 2,
        "importPath": "blox.apps.dropapp",
        "description": "blox.apps.dropapp",
        "peekOfCode": "def dropapp(app: str) -> None:\n    \"\"\"Delete the specified Django app, uninstall it from all sites using `blox uninstallapp`, and remove it from the configuration.\"\"\"\n    # Path to the custom app directory\n    apps_txt_path: str = os.path.join(PROJECT_ROOT, \"config\", \"apps.txt\")\n    if not os.path.exists(apps_txt_path):\n        click.echo(\"No apps found in apps.txt.\")\n        return\n    # Load apps from apps.txt\n    with open(apps_txt_path, \"r\") as settings_file:\n        apps: List[str] = [",
        "detail": "blox.apps.dropapp",
        "documentation": {}
    },
    {
        "label": "remove_hiredis_from_toml",
        "kind": 2,
        "importPath": "blox.apps.getapp",
        "description": "blox.apps.getapp",
        "peekOfCode": "def remove_hiredis_from_toml() -> None:\n    \"\"\"Remove any lines containing 'hiredis' from any .toml files in the project.\"\"\"\n    # Recursively find all .toml files in the PROJECT_ROOT\n    for root, _, files in os.walk(PROJECT_ROOT):\n        for file in files:\n            if file.endswith(\".toml\"):\n                toml_path = os.path.join(root, file)\n                with open(toml_path, \"r\") as toml_file:\n                    lines = toml_file.readlines()\n                # Filter out any lines containing 'hiredis'",
        "detail": "blox.apps.getapp",
        "documentation": {}
    },
    {
        "label": "getapp",
        "kind": 2,
        "importPath": "blox.apps.getapp",
        "description": "blox.apps.getapp",
        "peekOfCode": "def getapp(git_url: str, name: str) -> None:\n    \"\"\"Clone a Django app from a Git repository using the provided URL and optional app name.\"\"\"\n    # Parse the app name from the git URL if --name is not provided\n    if name:\n        app_name = name\n    else:\n        parsed_url = urlparse(git_url)\n        app_name = os.path.basename(parsed_url.path).replace(\".git\", \"\")\n    # Define the target directory for the new app\n    target_dir = os.path.join(PROJECT_ROOT, \"apps\", app_name)",
        "detail": "blox.apps.getapp",
        "documentation": {}
    },
    {
        "label": "newapp",
        "kind": 2,
        "importPath": "blox.apps.new",
        "description": "blox.apps.new",
        "peekOfCode": "def newapp(app_name: str, title: str, description: str, publisher: str, email: str, license: str) -> None:\n    \"\"\"Create a new Blox-style app with the specified name.\"\"\"\n    # Define paths\n    temp_app_path = os.path.join(PROJECT_ROOT, \"apps\", f\"temp_{app_name}\")\n    final_app_path = os.path.join(PROJECT_ROOT, \"apps\", app_name)\n    # Check if the app already exists\n    if os.path.exists(final_app_path):\n        click.echo(f\"The app '{app_name}' already exists.\")\n        return\n    # Create the temporary app directory",
        "detail": "blox.apps.new",
        "documentation": {}
    },
    {
        "label": "create_readme",
        "kind": 2,
        "importPath": "blox.apps.new",
        "description": "blox.apps.new",
        "peekOfCode": "def create_readme(base_path: str, app_name: str, templates_folder: str, license: str, description: str, title: str, publisher: str, email: str) -> None:\n    \"\"\"Create the README.md file with expanded content and advanced styling.\"\"\"\n    readme_path = os.path.join(base_path, \"README.md\")\n    template_path = os.path.join(templates_folder, \"README.md\")\n    # Default content with advanced styling\n    default_content = f\"\"\"# {app_name}\nWelcome to **{app_name}**!.\n## App Information\n- **App Name**: {app_name}\n- **App Title**: {title}",
        "detail": "blox.apps.new",
        "documentation": {}
    },
    {
        "label": "LICENSE_CHOICES",
        "kind": 5,
        "importPath": "blox.apps.new",
        "description": "blox.apps.new",
        "peekOfCode": "LICENSE_CHOICES = [\n    \"MIT\", \"GPL-3.0\", \"GPL-2.0\", \"LGPL-3.0\", \"LGPL-2.1\", \"AGPL-3.0\",\n    \"Apache-2.0\", \"BSD-3-Clause\", \"BSD-2-Clause\", \"MPL-2.0\", \"EPL-2.0\",\n    \"CC0-1.0\", \"CC-BY-4.0\", \"CC-BY-SA-4.0\", \"Unlicense\", \"Zlib\", \"BSL-1.0\", \"WTFPL\"\n]\n@click.command()\n@click.argument(\"app_name\")\n@click.option(\n    \"--title\",\n    prompt=\"App Title\",",
        "detail": "blox.apps.new",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "blox.apps.new",
        "description": "blox.apps.new",
        "peekOfCode": "app_name = \"{app_name}\"\napp_title = \"{title}\"\napp_description = \"{description}\"\napp_publisher = \"{publisher}\"\napp_email = \"{email}\"\napp_license = \"{license}\"\n\"\"\"\n    # Convert app_name to title case for modules.txt\n    dynamic_content[\"modules.txt\"] = f\"{app_name.replace('_', ' ').title()}\\n\"\n    # Use the file creator utility to generate boilerplate files from templates, passing dynamic content",
        "detail": "blox.apps.new",
        "documentation": {}
    },
    {
        "label": "app_title",
        "kind": 5,
        "importPath": "blox.apps.new",
        "description": "blox.apps.new",
        "peekOfCode": "app_title = \"{title}\"\napp_description = \"{description}\"\napp_publisher = \"{publisher}\"\napp_email = \"{email}\"\napp_license = \"{license}\"\n\"\"\"\n    # Convert app_name to title case for modules.txt\n    dynamic_content[\"modules.txt\"] = f\"{app_name.replace('_', ' ').title()}\\n\"\n    # Use the file creator utility to generate boilerplate files from templates, passing dynamic content\n    templates_folder = os.path.join(PROJECT_ROOT, \"blox\", \"templates\")",
        "detail": "blox.apps.new",
        "documentation": {}
    },
    {
        "label": "app_description",
        "kind": 5,
        "importPath": "blox.apps.new",
        "description": "blox.apps.new",
        "peekOfCode": "app_description = \"{description}\"\napp_publisher = \"{publisher}\"\napp_email = \"{email}\"\napp_license = \"{license}\"\n\"\"\"\n    # Convert app_name to title case for modules.txt\n    dynamic_content[\"modules.txt\"] = f\"{app_name.replace('_', ' ').title()}\\n\"\n    # Use the file creator utility to generate boilerplate files from templates, passing dynamic content\n    templates_folder = os.path.join(PROJECT_ROOT, \"blox\", \"templates\")\n    create_files_from_templates(",
        "detail": "blox.apps.new",
        "documentation": {}
    },
    {
        "label": "app_publisher",
        "kind": 5,
        "importPath": "blox.apps.new",
        "description": "blox.apps.new",
        "peekOfCode": "app_publisher = \"{publisher}\"\napp_email = \"{email}\"\napp_license = \"{license}\"\n\"\"\"\n    # Convert app_name to title case for modules.txt\n    dynamic_content[\"modules.txt\"] = f\"{app_name.replace('_', ' ').title()}\\n\"\n    # Use the file creator utility to generate boilerplate files from templates, passing dynamic content\n    templates_folder = os.path.join(PROJECT_ROOT, \"blox\", \"templates\")\n    create_files_from_templates(\n        temp_app_path, app_name, templates_folder, license, dynamic_content",
        "detail": "blox.apps.new",
        "documentation": {}
    },
    {
        "label": "app_email",
        "kind": 5,
        "importPath": "blox.apps.new",
        "description": "blox.apps.new",
        "peekOfCode": "app_email = \"{email}\"\napp_license = \"{license}\"\n\"\"\"\n    # Convert app_name to title case for modules.txt\n    dynamic_content[\"modules.txt\"] = f\"{app_name.replace('_', ' ').title()}\\n\"\n    # Use the file creator utility to generate boilerplate files from templates, passing dynamic content\n    templates_folder = os.path.join(PROJECT_ROOT, \"blox\", \"templates\")\n    create_files_from_templates(\n        temp_app_path, app_name, templates_folder, license, dynamic_content\n    )",
        "detail": "blox.apps.new",
        "documentation": {}
    },
    {
        "label": "app_license",
        "kind": 5,
        "importPath": "blox.apps.new",
        "description": "blox.apps.new",
        "peekOfCode": "app_license = \"{license}\"\n\"\"\"\n    # Convert app_name to title case for modules.txt\n    dynamic_content[\"modules.txt\"] = f\"{app_name.replace('_', ' ').title()}\\n\"\n    # Use the file creator utility to generate boilerplate files from templates, passing dynamic content\n    templates_folder = os.path.join(PROJECT_ROOT, \"blox\", \"templates\")\n    create_files_from_templates(\n        temp_app_path, app_name, templates_folder, license, dynamic_content\n    )\n    # Create special files first",
        "detail": "blox.apps.new",
        "documentation": {}
    },
    {
        "label": "update_package_json",
        "kind": 2,
        "importPath": "blox.main.npm.main",
        "description": "blox.main.npm.main",
        "peekOfCode": "def update_package_json(app_name: str, libraries: List[str]) -> None:\n    package_json_path = os.path.join(APPS_PATH, app_name, \"package.json\")\n    if not os.path.exists(package_json_path):\n        click.echo(f\"No package.json found for app '{app_name}'.\")\n        return\n    with open(package_json_path, \"r\") as f:\n        package_json = json.load(f)\n    if \"dependencies\" not in package_json:\n        package_json[\"dependencies\"] = {}\n    for library in libraries:",
        "detail": "blox.main.npm.main",
        "documentation": {}
    },
    {
        "label": "install_npm_packages",
        "kind": 2,
        "importPath": "blox.main.npm.main",
        "description": "blox.main.npm.main",
        "peekOfCode": "def install_npm_packages(libraries: List[str], app_name: Optional[str], site: str) -> None:\n    nextjs_path = os.path.join(PROJECT_ROOT, \"sites\", \"nextjs\")\n    if not os.path.exists(nextjs_path):\n        click.echo(f\"Next.js path for site '{site}' not found.\")\n        return\n    # Determine the command for the current operating system\n    npm_command = [\"npm\", \"install\"] + list(libraries)\n    # Execute the npm command in the Next.js directory\n    try:\n        if os.name == \"nt\":  # Windows",
        "detail": "blox.main.npm.main",
        "documentation": {}
    },
    {
        "label": "npm",
        "kind": 2,
        "importPath": "blox.main.npm.main",
        "description": "blox.main.npm.main",
        "peekOfCode": "def npm() -> None:\n    \"\"\"\n    Manage NPM packages for the project.\n    \"\"\"\n@click.command()\n@click.argument(\"libraries\", nargs=-1)\n@click.option(\"--app\", type=str, help=\"Specify a custom app to update its package.json\")\n@click.option(\n    \"--site\",\n    type=str,",
        "detail": "blox.main.npm.main",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "blox.main.npm.main",
        "description": "blox.main.npm.main",
        "peekOfCode": "def install(libraries: List[str], app: Optional[str], site: Optional[str]) -> None:\n    \"\"\"\n    Install the specified NPM packages in the project.\n    Usage: blox npm install <library_name> [<library_name>...] [--app <app_name>] [--site <site_name>]\n    \"\"\"\n    run_npm_install(libraries, app, site)\ndef run_npm_install(libraries: List[str], app: Optional[str], site: Optional[str]) -> None:\n    # Load sites from sites.json\n    sites_json_path = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\n    ensure_file_exists(sites_json_path, initial_data=[])",
        "detail": "blox.main.npm.main",
        "documentation": {}
    },
    {
        "label": "run_npm_install",
        "kind": 2,
        "importPath": "blox.main.npm.main",
        "description": "blox.main.npm.main",
        "peekOfCode": "def run_npm_install(libraries: List[str], app: Optional[str], site: Optional[str]) -> None:\n    # Load sites from sites.json\n    sites_json_path = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\n    ensure_file_exists(sites_json_path, initial_data=[])\n    if os.path.exists(sites_json_path):\n        with open(sites_json_path, \"r\") as json_file:\n            sites = json.load(json_file)\n    else:\n        click.echo(\"No sites found in sites.json.\")\n        return",
        "detail": "blox.main.npm.main",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 2,
        "importPath": "blox.main.npm.main",
        "description": "blox.main.npm.main",
        "peekOfCode": "def i(libraries: List[str], app: Optional[str], site: Optional[str]) -> None:\n    \"\"\"\n    Install the specified NPM packages in the project using the alias 'i'.\n    Usage: blox npm i <library_name> [<library_name>...] [--app <app_name>] [--site <site_name>]\n    \"\"\"\n    run_npm_install(libraries, app, site)\nnpm.add_command(install)\nnpm.add_command(i)",
        "detail": "blox.main.npm.main",
        "documentation": {}
    },
    {
        "label": "install_libraries",
        "kind": 2,
        "importPath": "blox.main.pip.main",
        "description": "blox.main.pip.main",
        "peekOfCode": "def install_libraries(libraries: List[str], app_name: Optional[str] = None, sites: Optional[List[str]] = None) -> None:\n    venv_path = os.path.join(PROJECT_ROOT, \"env\")\n    if not os.path.exists(venv_path):\n        click.echo(\"Virtual environment not found. Please run 'blox setup' first.\")\n        return\n    python_executable = os.path.join(venv_path, \"bin\", \"python\")\n    if sys.platform.startswith(\"win\"):\n        python_executable = os.path.join(venv_path, \"Scripts\", \"python.exe\")\n    if app_name:\n        requirements_file = os.path.join(APPS_PATH, f\"{app_name}/requirements.txt\")",
        "detail": "blox.main.pip.main",
        "documentation": {}
    },
    {
        "label": "pip",
        "kind": 2,
        "importPath": "blox.main.pip.main",
        "description": "blox.main.pip.main",
        "peekOfCode": "def pip() -> None:\n    \"\"\"\n    Manage Python packages for the project.\n    \"\"\"\n@click.command()\n@click.argument(\"libraries\", nargs=-1)\n@click.option(\n    \"--app\", type=str, help=\"Specify a custom app to update its requirements.txt\"\n)\n@click.option(",
        "detail": "blox.main.pip.main",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "blox.main.pip.main",
        "description": "blox.main.pip.main",
        "peekOfCode": "def install(libraries: List[str], app: Optional[str], site: Optional[str]) -> None:\n    \"\"\"\n    Install the specified Python libraries in the project.\n    Usage: blox pip install <library_name> [<library_name>...] [--app <app_name>] [--site <site_name>]\n    \"\"\"\n    run_pip_install(libraries, app, site)\n@click.command()\n@click.argument(\"libraries\", nargs=-1)\n@click.option(\n    \"--app\", type=str, help=\"Specify a custom app to update its requirements.txt\"",
        "detail": "blox.main.pip.main",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 2,
        "importPath": "blox.main.pip.main",
        "description": "blox.main.pip.main",
        "peekOfCode": "def i(libraries: List[str], app: Optional[str], site: Optional[str]) -> None:\n    \"\"\"\n    Install the specified Python libraries in the project using the alias 'i'.\n    Usage: blox pip i <library_name> [<library_name>...] [--app <app_name>] [--site <site_name>]\n    \"\"\"\n    run_pip_install(libraries, app, site)\ndef run_pip_install(libraries: List[str], app: Optional[str], site: Optional[str]) -> None:\n    # Load sites from sites.json\n    sites_json_path = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\n    ensure_file_exists(sites_json_path, initial_data=[])",
        "detail": "blox.main.pip.main",
        "documentation": {}
    },
    {
        "label": "run_pip_install",
        "kind": 2,
        "importPath": "blox.main.pip.main",
        "description": "blox.main.pip.main",
        "peekOfCode": "def run_pip_install(libraries: List[str], app: Optional[str], site: Optional[str]) -> None:\n    # Load sites from sites.json\n    sites_json_path = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\n    ensure_file_exists(sites_json_path, initial_data=[])\n    if os.path.exists(sites_json_path):\n        with open(sites_json_path, \"r\") as json_file:\n            sites = json.load(json_file)\n    else:\n        click.echo(\"No sites found in sites.json.\")\n        return",
        "detail": "blox.main.pip.main",
        "documentation": {}
    },
    {
        "label": "build",
        "kind": 2,
        "importPath": "blox.main.build",
        "description": "blox.main.build",
        "peekOfCode": "def build() -> None:\n    venv_path = os.path.join(PROJECT_ROOT, \"env\")\n    if not os.path.exists(venv_path):\n        click.echo(\"Virtual environment not found. Please run 'blox setup' first.\")\n        return\n    python_executable = os.path.join(venv_path, \"bin\", \"python3\")\n    if sys.platform.startswith(\"win\"):\n        python_executable = os.path.join(venv_path, \"Scripts\", \"python.exe\")\n    try:\n        # Build Django static files",
        "detail": "blox.main.build",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "blox.main.init",
        "description": "blox.main.init",
        "peekOfCode": "def init(name: str) -> None:\n    \"\"\"Initialize a new project similar to bench init.\"\"\"\n    perform_init(name)\ndef perform_init(name: str) -> None:\n    \"\"\"Initialize a new project similar to bench init.\"\"\"\n    # Determine project root\n    project_root = os.path.abspath(name)\n    if name != \".\":\n        os.makedirs(project_root, exist_ok=True)\n    # Define necessary directories",
        "detail": "blox.main.init",
        "documentation": {}
    },
    {
        "label": "perform_init",
        "kind": 2,
        "importPath": "blox.main.init",
        "description": "blox.main.init",
        "peekOfCode": "def perform_init(name: str) -> None:\n    \"\"\"Initialize a new project similar to bench init.\"\"\"\n    # Determine project root\n    project_root = os.path.abspath(name)\n    if name != \".\":\n        os.makedirs(project_root, exist_ok=True)\n    # Define necessary directories\n    directories: List[str] = [\"apps\", \"config\", \"logs\", \"sites\"]\n    for directory in directories:\n        os.makedirs(os.path.join(project_root, directory), exist_ok=True)",
        "detail": "blox.main.init",
        "documentation": {}
    },
    {
        "label": "activate_virtualenv",
        "kind": 2,
        "importPath": "blox.main.install",
        "description": "blox.main.install",
        "peekOfCode": "def activate_virtualenv() -> Optional[str]:\n    venv_path = os.path.join(PROJECT_ROOT, \"env\")\n    if not os.path.exists(venv_path):\n        click.echo(\"Virtual environment not found. Please run 'blox setup' first.\")\n        return None\n    if os.name == \"nt\":  # Windows\n        activate_script = os.path.join(venv_path, \"Scripts\", \"activate.bat\")\n    else:  # Unix-based\n        activate_script = os.path.join(venv_path, \"bin\", \"activate\")\n    return activate_script",
        "detail": "blox.main.install",
        "documentation": {}
    },
    {
        "label": "app_install_python_packages",
        "kind": 2,
        "importPath": "blox.main.install",
        "description": "blox.main.install",
        "peekOfCode": "def app_install_python_packages(app: str) -> None:\n    requirements_file = os.path.join(APPS_PATH, app, \"requirements.txt\")\n    if os.path.exists(requirements_file):\n        click.echo(f\"Installing packages from {requirements_file}...\")\n        subprocess.check_call([\"pip\", \"install\", \"-r\", requirements_file])\ndef install_python_packages() -> None:\n    site_requirements = os.path.join(\n        PROJECT_ROOT, \"sites\", \"django\", \"requirements.txt\"\n    )\n    if os.path.exists(site_requirements):",
        "detail": "blox.main.install",
        "documentation": {}
    },
    {
        "label": "install_python_packages",
        "kind": 2,
        "importPath": "blox.main.install",
        "description": "blox.main.install",
        "peekOfCode": "def install_python_packages() -> None:\n    site_requirements = os.path.join(\n        PROJECT_ROOT, \"sites\", \"django\", \"requirements.txt\"\n    )\n    if os.path.exists(site_requirements):\n        click.echo(f\"Installing packages from {site_requirements}...\")\n        subprocess.check_call([\"pip\", \"install\", \"-r\", site_requirements])\ndef app_install_npm_packages(app: str) -> None:\n    package_json_path = os.path.join(APPS_PATH, app, \"package.json\")\n    if os.path.exists(package_json_path):",
        "detail": "blox.main.install",
        "documentation": {}
    },
    {
        "label": "app_install_npm_packages",
        "kind": 2,
        "importPath": "blox.main.install",
        "description": "blox.main.install",
        "peekOfCode": "def app_install_npm_packages(app: str) -> None:\n    package_json_path = os.path.join(APPS_PATH, app, \"package.json\")\n    if os.path.exists(package_json_path):\n        click.echo(f\"Installing packages from {package_json_path}...\")\n        nextjs_path = os.path.join(PROJECT_ROOT, \"sites\", \"nextjs\")\n        # Read package.json to get dependencies and devDependencies\n        with open(package_json_path, \"r\") as f:\n            package_data = json.load(f)\n        dependencies = package_data.get(\"dependencies\", {})\n        dev_dependencies = package_data.get(\"devDependencies\", {})",
        "detail": "blox.main.install",
        "documentation": {}
    },
    {
        "label": "install_npm_packages",
        "kind": 2,
        "importPath": "blox.main.install",
        "description": "blox.main.install",
        "peekOfCode": "def install_npm_packages() -> None:\n    nextjs_path = os.path.join(PROJECT_ROOT, \"sites\", \"nextjs\")\n    # Determine the command for the current operating system\n    npm_command = [\"npm\", \"install\"]\n    # Execute the npm command in the Next.js directory\n    try:\n        if os.name == \"nt\":  # Windows\n            subprocess.check_call(npm_command, cwd=nextjs_path, shell=True)\n        else:\n            subprocess.check_call(npm_command, cwd=nextjs_path)",
        "detail": "blox.main.install",
        "documentation": {}
    },
    {
        "label": "install_dependencies",
        "kind": 2,
        "importPath": "blox.main.install",
        "description": "blox.main.install",
        "peekOfCode": "def install_dependencies() -> None:\n    install_python_packages()\n    install_npm_packages()\n@click.command()\ndef install() -> None:\n    \"\"\"\n    Install all dependencies for the specified site.\n    Usage: blox install --site <site_name>\n    \"\"\"\n    run_install()",
        "detail": "blox.main.install",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "blox.main.install",
        "description": "blox.main.install",
        "peekOfCode": "def install() -> None:\n    \"\"\"\n    Install all dependencies for the specified site.\n    Usage: blox install --site <site_name>\n    \"\"\"\n    run_install()\n@click.command()\ndef i() -> None:\n    \"\"\"\n    Install all dependencies for the specified site.",
        "detail": "blox.main.install",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 2,
        "importPath": "blox.main.install",
        "description": "blox.main.install",
        "peekOfCode": "def i() -> None:\n    \"\"\"\n    Install all dependencies for the specified site.\n    Usage: blox i --site <site_name>\n    \"\"\"   \n    run_install()\ndef run_install() -> None:\n    # Activate the virtual environment\n    activate_script = activate_virtualenv()\n    site_files = os.path.join(",
        "detail": "blox.main.install",
        "documentation": {}
    },
    {
        "label": "run_install",
        "kind": 2,
        "importPath": "blox.main.install",
        "description": "blox.main.install",
        "peekOfCode": "def run_install() -> None:\n    # Activate the virtual environment\n    activate_script = activate_virtualenv()\n    site_files = os.path.join(\n        PROJECT_ROOT, \"sites\", \"django\"\n    )\n    if not os.path.exists(site_files):\n        perform_init(\".\")\n    if activate_script:\n        if os.name == \"nt\":",
        "detail": "blox.main.install",
        "documentation": {}
    },
    {
        "label": "find_free_port",
        "kind": 2,
        "importPath": "blox.main.start",
        "description": "blox.main.start",
        "peekOfCode": "def find_free_port(start_port: int) -> int:\n    port = start_port\n    while True:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n            if sock.connect_ex((\"localhost\", port)) != 0:\n                return port\n            port += 1\ndef stream_reader(stream, prefix: str = \"\", color: str =\"black\", first_line_only: bool = False) -> None:\n    \"\"\"Reads from a stream and prints lines with a given color and optional prefix.\"\"\"\n    first_line = True",
        "detail": "blox.main.start",
        "documentation": {}
    },
    {
        "label": "stream_reader",
        "kind": 2,
        "importPath": "blox.main.start",
        "description": "blox.main.start",
        "peekOfCode": "def stream_reader(stream, prefix: str = \"\", color: str =\"black\", first_line_only: bool = False) -> None:\n    \"\"\"Reads from a stream and prints lines with a given color and optional prefix.\"\"\"\n    first_line = True\n    for line in iter(stream.readline, \"\"):\n        if line:\n            line = line.strip()\n            if first_line_only:\n                if first_line:\n                    click.echo(click.style(prefix, fg=\"red\"), nl=False)\n                    first_line = False",
        "detail": "blox.main.start",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 2,
        "importPath": "blox.main.start",
        "description": "blox.main.start",
        "peekOfCode": "def start(mode: str) -> None:\n    \"\"\"Start Django and Next.js servers for the specified site.\"\"\"\n    click.echo(\"Starting server\")\n    # Create Django and Next.js paths\n    django_path = os.path.join(\n        PROJECT_ROOT, \"sites\", \"django\"\n    )\n    nextjs_path = os.path.join(\n        PROJECT_ROOT, \"sites\", \"nextjs\"\n    )",
        "detail": "blox.main.start",
        "documentation": {}
    },
    {
        "label": "build",
        "kind": 2,
        "importPath": "blox.sites.build.build",
        "description": "blox.sites.build.build",
        "peekOfCode": "def build():\n    venv_path = os.path.join(PROJECT_ROOT, \"env\")\n    if not os.path.exists(venv_path):\n        click.echo(\"Virtual environment not found. Please run 'blox setup' first.\")\n        return\n    python_executable = os.path.join(venv_path, \"bin\", \"python3\")\n    if sys.platform.startswith(\"win\"):\n        python_executable = os.path.join(venv_path, \"Scripts\", \"python.exe\")\n    try:\n        # Build Django static files",
        "detail": "blox.sites.build.build",
        "documentation": {}
    },
    {
        "label": "find_free_port",
        "kind": 2,
        "importPath": "blox.sites.build.deploy",
        "description": "blox.sites.build.deploy",
        "peekOfCode": "def find_free_port(start_port=3000):\n    port = start_port\n    while True:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n            if sock.connect_ex((\"localhost\", port)) != 0:\n                return port\n            port += 1\ndef run_with_sudo(command):\n    \"\"\"Run a command with sudo privileges.\"\"\"\n    subprocess.run([\"sudo\"] + command, check=True)",
        "detail": "blox.sites.build.deploy",
        "documentation": {}
    },
    {
        "label": "run_with_sudo",
        "kind": 2,
        "importPath": "blox.sites.build.deploy",
        "description": "blox.sites.build.deploy",
        "peekOfCode": "def run_with_sudo(command):\n    \"\"\"Run a command with sudo privileges.\"\"\"\n    subprocess.run([\"sudo\"] + command, check=True)\ndef setup_nginx(domain, appname, nextjs_port, django_port):\n    nginx_conf = f\"\"\"\n    server {{\n        listen 80;\n        server_name {domain} www.{domain};\n        location / {{\n            proxy_pass http://127.0.0.1:{nextjs_port};",
        "detail": "blox.sites.build.deploy",
        "documentation": {}
    },
    {
        "label": "setup_nginx",
        "kind": 2,
        "importPath": "blox.sites.build.deploy",
        "description": "blox.sites.build.deploy",
        "peekOfCode": "def setup_nginx(domain, appname, nextjs_port, django_port):\n    nginx_conf = f\"\"\"\n    server {{\n        listen 80;\n        server_name {domain} www.{domain};\n        location / {{\n            proxy_pass http://127.0.0.1:{nextjs_port};\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;",
        "detail": "blox.sites.build.deploy",
        "documentation": {}
    },
    {
        "label": "setup_supervisor",
        "kind": 2,
        "importPath": "blox.sites.build.deploy",
        "description": "blox.sites.build.deploy",
        "peekOfCode": "def setup_supervisor(appname, django_port, nextjs_port):\n    # Create logs directory if it doesn't exist\n    logs_dir = os.path.join(PROJECT_ROOT, \"logs\")\n    os.makedirs(logs_dir, exist_ok=True)\n    # Log files\n    django_log = os.path.join(logs_dir, f\"{appname}_django.log\")\n    nextjs_log = os.path.join(logs_dir, f\"{appname}_nextjs.log\")\n    # Prompt for the username\n    username = click.prompt(\n        \"Enter the username to run the Supervisor process\", type=str",
        "detail": "blox.sites.build.deploy",
        "documentation": {}
    },
    {
        "label": "setup_ssl",
        "kind": 2,
        "importPath": "blox.sites.build.deploy",
        "description": "blox.sites.build.deploy",
        "peekOfCode": "def setup_ssl(domain):\n    click.echo(\"Setting up SSL with Let's Encrypt...\")\n    # Using sudo to install SSL certificates\n    run_with_sudo([\"certbot\", \"--nginx\", \"-d\", domain, \"-d\", f\"www.{domain}\"])\n    click.echo(f\"SSL certificate for {domain} has been set up.\")\n@click.command()\n@click.argument(\"mode\", default=\"prod\")\ndef deploy(mode):\n    venv_path = os.path.join(PROJECT_ROOT, \"env\")\n    if not os.path.exists(venv_path):",
        "detail": "blox.sites.build.deploy",
        "documentation": {}
    },
    {
        "label": "deploy",
        "kind": 2,
        "importPath": "blox.sites.build.deploy",
        "description": "blox.sites.build.deploy",
        "peekOfCode": "def deploy(mode):\n    venv_path = os.path.join(PROJECT_ROOT, \"env\")\n    if not os.path.exists(venv_path):\n        click.echo(\"Virtual environment not found. Please run 'blox setup' first.\")\n        return\n    os.path.join(venv_path, \"bin\", \"python3\")\n    if sys.platform.startswith(\"win\"):\n        os.path.join(venv_path, \"Scripts\", \"python.exe\")\n    django_port = find_free_port(8000)\n    nextjs_port = find_free_port(3000)",
        "detail": "blox.sites.build.deploy",
        "documentation": {}
    },
    {
        "label": "get_python_executable",
        "kind": 2,
        "importPath": "blox.sites.django.manage",
        "description": "blox.sites.django.manage",
        "peekOfCode": "def get_python_executable():\n    \"\"\"Get the path to the Python executable in the virtual environment.\"\"\"\n    venv_path = os.path.join(PROJECT_ROOT, \"env\")\n    if not os.path.exists(venv_path):\n        click.echo(\"Virtual environment not found. Please run 'blox setup' first.\")\n        raise FileNotFoundError(\"Virtual environment not found.\")\n    python_executable = os.path.join(venv_path, \"bin\", \"python\")\n    if sys.platform.startswith(\"win\"):\n        python_executable = os.path.join(venv_path, \"Scripts\", \"python.exe\")\n    return python_executable",
        "detail": "blox.sites.django.manage",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 2,
        "importPath": "blox.sites.django.manage",
        "description": "blox.sites.django.manage",
        "peekOfCode": "def django(command, args, site=None):\n    \"\"\"Run Django management commands.\"\"\"\n    django_path = os.path.join(\n        PROJECT_ROOT, \"sites\", \"django\"\n    )\n    venv_path = os.path.join(PROJECT_ROOT, \"env\")\n    if not os.path.exists(venv_path):\n        click.echo(\"Virtual environment not found. Please run 'blox setup' first.\")\n        return\n    python_executable = os.path.join(venv_path, \"bin\", \"python\")",
        "detail": "blox.sites.django.manage",
        "documentation": {}
    },
    {
        "label": "get_field_type",
        "kind": 2,
        "importPath": "blox.sites.migrate.models.field_mappings",
        "description": "blox.sites.migrate.models.field_mappings",
        "peekOfCode": "def get_field_type(field_type):\n    \"\"\"Returns the corresponding Django model field type for a given Frappe field type.\"\"\"\n    field_type_mapping = {\n        \"Select\": \"CharField\",\n        \"Link\": \"ForeignKey\",\n        \"Table\": \"ManyToManyField\",\n        \"MultiSelect\": \"ManyToManyField\",\n        \"Table MultiSelect\": \"ManyToManyField\",\n        \"Check\": \"BooleanField\",\n        \"Boolean\": \"BooleanField\",",
        "detail": "blox.sites.migrate.models.field_mappings",
        "documentation": {}
    },
    {
        "label": "process_fields",
        "kind": 2,
        "importPath": "blox.sites.migrate.models.field_mappings",
        "description": "blox.sites.migrate.models.field_mappings",
        "peekOfCode": "def process_fields(fields):\n    \"\"\"Process fields, skipping any with the type 'Column Break' or 'Section Break'.\"\"\"\n    processed_fields = []\n    for field in fields:\n        raw_field_type = field.get(\"fieldtype\")\n        # Skip fields with the type 'Column Break' or 'Section Break'\n        if raw_field_type in [\"Column Break\", \"Section Break\", \"Tab Break\"]:\n            continue  # Skip this field and move to the next one\n        # Get the corresponding Django field type\n        field_type = get_field_type(raw_field_type)",
        "detail": "blox.sites.migrate.models.field_mappings",
        "documentation": {}
    },
    {
        "label": "write_id_field",
        "kind": 2,
        "importPath": "blox.sites.migrate.models.id_naming",
        "description": "blox.sites.migrate.models.id_naming",
        "peekOfCode": "def write_id_field(module_file, file_path, settings, model_name):\n    \"\"\"Write the id field based on settings.\"\"\"\n    if isinstance(settings, list):\n        # If settings is a list, convert it to a dictionary or handle it as needed\n        # For now, I'll assume you want to use the first element as a dictionary\n        settings = settings[0] if settings else {}\n    id_naming_method = settings.get(\"idNamingMethod\", \"incrementalNaming\")\n    id_naming_rule = settings.get(\"idNamingRule\", \"\")\n    field_for_id_naming = settings.get(\"fieldForIdNaming\", \"\")\n    function_for_id_naming = settings.get(\"functionForIdNaming\", \"\")",
        "detail": "blox.sites.migrate.models.id_naming",
        "documentation": {}
    },
    {
        "label": "merge_with_existing_save",
        "kind": 2,
        "importPath": "blox.sites.migrate.models.id_naming",
        "description": "blox.sites.migrate.models.id_naming",
        "peekOfCode": "def merge_with_existing_save(module_file, new_save, model_name):\n    \"\"\"Merge the new save logic with the existing save method in the model.\"\"\"\n    try:\n        module_file.seek(0)\n        existing_lines = module_file.readlines()\n        class_started = False\n        existing_save = \"\"\n        merged_save = new_save\n        indent = \"\"\n        for i, line in enumerate(existing_lines):",
        "detail": "blox.sites.migrate.models.id_naming",
        "documentation": {}
    },
    {
        "label": "merge_save_methods",
        "kind": 2,
        "importPath": "blox.sites.migrate.models.id_naming",
        "description": "blox.sites.migrate.models.id_naming",
        "peekOfCode": "def merge_save_methods(existing_save, new_save):\n    \"\"\"Merge existing save method with the new save logic.\"\"\"\n    existing_save_lines = existing_save.strip().split(\"\\n\")[1:]\n    new_save_lines = new_save.strip().split(\"\\n\")[:-1]\n    combined_save = \"\\n\".join(new_save_lines + existing_save_lines)\n    return combined_save.strip()",
        "detail": "blox.sites.migrate.models.id_naming",
        "documentation": {}
    },
    {
        "label": "load_json_file",
        "kind": 2,
        "importPath": "blox.sites.migrate.models.json_loader",
        "description": "blox.sites.migrate.models.json_loader",
        "peekOfCode": "def load_json_file(file_path):\n    \"\"\"Load JSON data from a file.\"\"\"\n    try:\n        with open(file_path, \"r\") as file:\n            return json.load(file)\n    except (json.JSONDecodeError, AttributeError, FileNotFoundError) as e:\n        click.echo(f\"Error reading {file_path}: {e}\")\n        return None",
        "detail": "blox.sites.migrate.models.json_loader",
        "documentation": {}
    },
    {
        "label": "write_model",
        "kind": 2,
        "importPath": "blox.sites.migrate.models.model_fields_writer",
        "description": "blox.sites.migrate.models.model_fields_writer",
        "peekOfCode": "def write_model(module_file, fields, model_name, django_path):\n    \"\"\"Main function to generate Django model fields from Frappe fields.\"\"\"\n    field_names = set()  # Set to keep track of field names for duplicate checking\n    for field in fields:\n        field_id = rename_reserved_keywords(field.get(\"fieldname\", \"\"))\n        # Skip any field that ends with '_id'\n        if field_id.endswith(\"_id\") or field_id == \"id\":\n            field_id = f\"{field_id}_custom\"\n        field_type = field.get(\"fieldtype\")\n        # Add the field_id to the set of field names",
        "detail": "blox.sites.migrate.models.model_fields_writer",
        "documentation": {}
    },
    {
        "label": "rename_reserved_keywords",
        "kind": 2,
        "importPath": "blox.sites.migrate.models.model_fields_writer",
        "description": "blox.sites.migrate.models.model_fields_writer",
        "peekOfCode": "def rename_reserved_keywords(field_id):\n    \"\"\"Rename field ID if it is a reserved keyword.\"\"\"\n    return reserved_keywords.get(field_id, field_id)\ndef write_field_declaration(\n    module_file, field_id, field_type, extra_params=\"\", field_name=\"\"\n):\n    \"\"\"Writes a field declaration line in the Django model file with verbose name, null, and blank at the end.\"\"\"\n    module_file.write(f\"    {field_id} = {field_type}(\")\n    if extra_params:\n        module_file.write(f\"{extra_params}, \")",
        "detail": "blox.sites.migrate.models.model_fields_writer",
        "documentation": {}
    },
    {
        "label": "write_field_declaration",
        "kind": 2,
        "importPath": "blox.sites.migrate.models.model_fields_writer",
        "description": "blox.sites.migrate.models.model_fields_writer",
        "peekOfCode": "def write_field_declaration(\n    module_file, field_id, field_type, extra_params=\"\", field_name=\"\"\n):\n    \"\"\"Writes a field declaration line in the Django model file with verbose name, null, and blank at the end.\"\"\"\n    module_file.write(f\"    {field_id} = {field_type}(\")\n    if extra_params:\n        module_file.write(f\"{extra_params}, \")\n    if field_type != \"models.ManyToManyField\":\n        module_file.write(\"null=True, blank=True\")\n    module_file.write(\")\\n\")",
        "detail": "blox.sites.migrate.models.model_fields_writer",
        "documentation": {}
    },
    {
        "label": "write_choices_field",
        "kind": 2,
        "importPath": "blox.sites.migrate.models.model_fields_writer",
        "description": "blox.sites.migrate.models.model_fields_writer",
        "peekOfCode": "def write_choices_field(module_file, field, field_type, max_length=None):\n    \"\"\"Handles Select and MultiSelect fields with choices.\"\"\"\n    field_id = rename_reserved_keywords(field.get(\"fieldname\", \"\"))\n    choices = field.get(\"options\", \"\").strip().split(\"\\n\")\n    if choices:\n        options_var = f\"CHOICES_{field_id.upper()}\"\n        module_file.write(f\"    {options_var} = [\\n\")\n        for choice in choices:\n            sanitized_choice = choice.replace(\n                '\"', \"'\"",
        "detail": "blox.sites.migrate.models.model_fields_writer",
        "documentation": {}
    },
    {
        "label": "write_link_field",
        "kind": 2,
        "importPath": "blox.sites.migrate.models.model_fields_writer",
        "description": "blox.sites.migrate.models.model_fields_writer",
        "peekOfCode": "def write_link_field(module_file, field, model_name, django_path):\n    \"\"\"Handles Link fields (ForeignKey relations).\"\"\"\n    field_id = rename_reserved_keywords(field.get(\"fieldname\", \"\"))\n    related_model = field.get(\"options\", \"'self'\")\n    app_name, _ = get_app_module_for_model(to_snake_case(related_model), django_path)\n    # Ensure related_model is formatted correctly\n    related_model = \"\".join(\n        part.capitalize() for part in related_model.replace(\"_\", \" \").split()\n    )\n    modela_name = \"\".join(",
        "detail": "blox.sites.migrate.models.model_fields_writer",
        "documentation": {}
    },
    {
        "label": "write_table_field",
        "kind": 2,
        "importPath": "blox.sites.migrate.models.model_fields_writer",
        "description": "blox.sites.migrate.models.model_fields_writer",
        "peekOfCode": "def write_table_field(module_file, field, model_name, django_path): \n    \"\"\"Handles Link fields (ForeignKey relations).\"\"\"\n    field_id = rename_reserved_keywords(field.get(\"fieldname\", \"\"))\n    related_model = field.get(\"options\", \"'self'\")\n    app_name, _ = get_app_module_for_model(to_snake_case(related_model), django_path)\n    # Ensure related_model is formatted correctly\n    related_model = \"\".join(\n        part.capitalize() for part in related_model.replace(\"_\", \" \").split()\n    )\n    modela_name = \"\".join(",
        "detail": "blox.sites.migrate.models.model_fields_writer",
        "documentation": {}
    },
    {
        "label": "write_save_method",
        "kind": 2,
        "importPath": "blox.sites.migrate.models.model_fields_writer",
        "description": "blox.sites.migrate.models.model_fields_writer",
        "peekOfCode": "def write_save_method(module_file, fields):\n    \"\"\"Writes the save method to handle barcode generation and other custom logic.\"\"\"\n    module_file.write(\"\\n    def save(self, *args, **kwargs):\\n\")\n    for field in fields:\n        if field.get(\"fieldtype\") == \"BarcodeField\":\n            field_id = rename_reserved_keywords(field.get(\"fieldname\", \"\"))\n            module_file.write(\n                f\"        if not self.{field_id} or not os.path.exists(os.path.join(settings.MEDIA_ROOT, self.{field_id}.name)):\\n\"\n            )\n            module_file.write(",
        "detail": "blox.sites.migrate.models.model_fields_writer",
        "documentation": {}
    },
    {
        "label": "reserved_keywords",
        "kind": 5,
        "importPath": "blox.sites.migrate.models.reserved_keywords",
        "description": "blox.sites.migrate.models.reserved_keywords",
        "peekOfCode": "reserved_keywords = {\n    \"class\": \"custom_class\",\n    \"def\": \"custom_def\",\n    \"id\": \"custom_id\",\n    \"if\": \"custom_if\",\n    \"else\": \"custom_else\",\n    \"while\": \"while_loop\",\n    \"for\": \"for_loop\",\n    \"in\": \"custom_in\",\n    \"try\": \"custom_try\",",
        "detail": "blox.sites.migrate.models.reserved_keywords",
        "documentation": {}
    },
    {
        "label": "clear_migration_file",
        "kind": 2,
        "importPath": "blox.sites.migrate.manual_migrations",
        "description": "blox.sites.migrate.manual_migrations",
        "peekOfCode": "def clear_migration_file(migration_file_path):\n    \"\"\"Clear any existing content in the migration file before writing.\"\"\"\n    with open(migration_file_path, \"w\") as migration_file:\n        migration_file.truncate(0)\ndef clean_field_params(field_params):\n    \"\"\"Remove 'choices' from field parameters along with everything after it up to the next comma.\"\"\"\n    cleaned_params = re.sub(r\"choices\\s*=\\s*[^,]*,?\\s*\", \"\", field_params)\n    return cleaned_params.strip().rstrip(\",\")\ndef handle_charfield(field_name, field_params):\n    cleaned_params = clean_field_params(field_params)",
        "detail": "blox.sites.migrate.manual_migrations",
        "documentation": {}
    },
    {
        "label": "clean_field_params",
        "kind": 2,
        "importPath": "blox.sites.migrate.manual_migrations",
        "description": "blox.sites.migrate.manual_migrations",
        "peekOfCode": "def clean_field_params(field_params):\n    \"\"\"Remove 'choices' from field parameters along with everything after it up to the next comma.\"\"\"\n    cleaned_params = re.sub(r\"choices\\s*=\\s*[^,]*,?\\s*\", \"\", field_params)\n    return cleaned_params.strip().rstrip(\",\")\ndef handle_charfield(field_name, field_params):\n    cleaned_params = clean_field_params(field_params)\n    return f\"('{field_name}', models.CharField({cleaned_params}))\"\ndef handle_foreignkey(field_name, field_params, app_name):\n    # Clean the field parameters\n    cleaned_params = clean_field_params(field_params)",
        "detail": "blox.sites.migrate.manual_migrations",
        "documentation": {}
    },
    {
        "label": "handle_charfield",
        "kind": 2,
        "importPath": "blox.sites.migrate.manual_migrations",
        "description": "blox.sites.migrate.manual_migrations",
        "peekOfCode": "def handle_charfield(field_name, field_params):\n    cleaned_params = clean_field_params(field_params)\n    return f\"('{field_name}', models.CharField({cleaned_params}))\"\ndef handle_foreignkey(field_name, field_params, app_name):\n    # Clean the field parameters\n    cleaned_params = clean_field_params(field_params)\n    # Extract the part before the first comma, convert it to lowercase, and reassemble with the rest\n    first_comma_index = cleaned_params.find(\",\")\n    if first_comma_index != -1:\n        before_comma = cleaned_params[:first_comma_index].lower()",
        "detail": "blox.sites.migrate.manual_migrations",
        "documentation": {}
    },
    {
        "label": "handle_foreignkey",
        "kind": 2,
        "importPath": "blox.sites.migrate.manual_migrations",
        "description": "blox.sites.migrate.manual_migrations",
        "peekOfCode": "def handle_foreignkey(field_name, field_params, app_name):\n    # Clean the field parameters\n    cleaned_params = clean_field_params(field_params)\n    # Extract the part before the first comma, convert it to lowercase, and reassemble with the rest\n    first_comma_index = cleaned_params.find(\",\")\n    if first_comma_index != -1:\n        before_comma = cleaned_params[:first_comma_index].lower()\n        after_comma = cleaned_params[first_comma_index:]\n        cleaned_params = f\"{before_comma}{after_comma}\"\n    else:",
        "detail": "blox.sites.migrate.manual_migrations",
        "documentation": {}
    },
    {
        "label": "handle_manytomanyfield",
        "kind": 2,
        "importPath": "blox.sites.migrate.manual_migrations",
        "description": "blox.sites.migrate.manual_migrations",
        "peekOfCode": "def handle_manytomanyfield(field_name, field_params, app_name):\n    related_model = re.search(r\"'(\\w+)'\", field_params)\n    if related_model:\n        related_model_name = related_model.group(1)\n        cleaned_params = f\"to='{app_name}.{related_model_name}'\"\n    else:\n        cleaned_params = \"\"\n    return f\"('{field_name}', models.ManyToManyField({cleaned_params}))\"\ndef create_manual_migrations(app_name, django_path):\n    \"\"\"Create an initial migration file by scanning models in the app's models folder.\"\"\"",
        "detail": "blox.sites.migrate.manual_migrations",
        "documentation": {}
    },
    {
        "label": "create_manual_migrations",
        "kind": 2,
        "importPath": "blox.sites.migrate.manual_migrations",
        "description": "blox.sites.migrate.manual_migrations",
        "peekOfCode": "def create_manual_migrations(app_name, django_path):\n    \"\"\"Create an initial migration file by scanning models in the app's models folder.\"\"\"\n    migrations_folder = os.path.join(django_path, app_name, \"migrations\")\n    models_folder = os.path.join(django_path, app_name, \"models\")\n    migration_file_path = os.path.join(migrations_folder, \"0001_initial.py\")\n    # Ensure the migrations folder exists\n    os.makedirs(migrations_folder, exist_ok=True)\n    # Clear the migration file before writing\n    clear_migration_file(migration_file_path)\n    # Dictionary to track dependencies: key is model, value is a set of dependencies",
        "detail": "blox.sites.migrate.manual_migrations",
        "documentation": {}
    },
    {
        "label": "topological_sort",
        "kind": 2,
        "importPath": "blox.sites.migrate.manual_migrations",
        "description": "blox.sites.migrate.manual_migrations",
        "peekOfCode": "def topological_sort(models, dependencies):\n    \"\"\"Order models based on dependencies to avoid foreign key conflicts.\"\"\"\n    sorted_models = []\n    visited = set()\n    temp_stack = set()\n    def visit(model):\n        if model in visited:\n            return\n        if model in temp_stack:\n            raise ValueError(\"Circular dependency detected!\")",
        "detail": "blox.sites.migrate.manual_migrations",
        "documentation": {}
    },
    {
        "label": "remove_class_block",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate",
        "description": "blox.sites.migrate.migrate",
        "peekOfCode": "def remove_class_block(file_path, class_name):\n    \"\"\"Remove the class definition block for a specified class from a file.\n    Args:\n        file_path (str): Path to the file from which the class block is removed.\n        class_name (str): Name of the class to remove.\n    \"\"\"\n    with open(file_path, \"r\") as file:\n        content = file.read()\n    pattern = re.compile(rf\"class {class_name}\\s*\\(.*?\\):.*?(?=\\nclass |$)\", re.DOTALL)\n    content = pattern.sub(\"\", content)",
        "detail": "blox.sites.migrate.migrate",
        "documentation": {}
    },
    {
        "label": "updatefiles",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate",
        "description": "blox.sites.migrate.migrate",
        "peekOfCode": "def updatefiles(app=None, module=None, doc=None, site=None, all=True):\n    # Load sites from sites.json\n    sites = get_all_sites()    \n    # If --all is passed, iterate over all sites\n    if all:\n        for site_entry in sites:\n            # Migrate all apps for the site\n            installed_apps = site_entry.get(\"installed_apps\", [])\n            for app in installed_apps:\n                configure_app(app)",
        "detail": "blox.sites.migrate.migrate",
        "documentation": {}
    },
    {
        "label": "get_python_executable",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate",
        "description": "blox.sites.migrate.migrate",
        "peekOfCode": "def get_python_executable():\n    \"\"\"Get the path to the Python executable in the virtual environment.\"\"\"\n    venv_path = os.path.join(PROJECT_ROOT, \"env\")\n    if not os.path.exists(venv_path):\n        click.echo(\"Virtual environment not found. Please run 'blox setup' first.\")\n        raise FileNotFoundError(\"Virtual environment not found.\")\n    python_executable = os.path.join(venv_path, \"bin\", \"python\")\n    if sys.platform.startswith(\"win\"):\n        python_executable = os.path.join(venv_path, \"Scripts\", \"python.exe\")\n    return python_executable",
        "detail": "blox.sites.migrate.migrate",
        "documentation": {}
    },
    {
        "label": "migrate_django",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate",
        "description": "blox.sites.migrate.migrate",
        "peekOfCode": "def migrate_django(site=None):\n    \"\"\"Execute Django migration commands (makemigrations and migrate) for a specified project.\n    Args:\n        skip_updatefiles (bool): If True, skips calling updatefiles before migrations.\n    \"\"\"\n    run_migrate_django(site)\ndef run_migrate_django(site=None):\n    \"\"\"Run Django makemigrations and migrate commands.\"\"\"\n    python_executable = get_python_executable()\n    # Prepare database argument if site is provided",
        "detail": "blox.sites.migrate.migrate",
        "documentation": {}
    },
    {
        "label": "run_migrate_django",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate",
        "description": "blox.sites.migrate.migrate",
        "peekOfCode": "def run_migrate_django(site=None):\n    \"\"\"Run Django makemigrations and migrate commands.\"\"\"\n    python_executable = get_python_executable()\n    # Prepare database argument if site is provided\n    db_arg = [f\"--database={site}\"] if site else []\n    # Run makemigrations\n    subprocess.run(\n        [python_executable, \"manage.py\", \"makemigrations\"],\n        cwd=DJANGO_PATH,\n    )",
        "detail": "blox.sites.migrate.migrate",
        "documentation": {}
    },
    {
        "label": "run_migration",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate",
        "description": "blox.sites.migrate.migrate",
        "peekOfCode": "def run_migration(app=None, module=None, doc=None, site=None, all_sites=True, skip=False):\n    \"\"\"Core migration process.\"\"\"\n    import traceback\n    try:\n        if not skip:\n            updatefiles(app, module, doc, site, all_sites)\n        if all_sites:\n            if all:\n                sites = get_all_sites()   \n                for site_entry in sites:",
        "detail": "blox.sites.migrate.migrate",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate",
        "description": "blox.sites.migrate.migrate",
        "peekOfCode": "def migrate(app=None, module=None, doc=None, site=None, all=True, skip=False):\n    \"\"\"Run Django makemigrations and migrate commands.\"\"\"\n    run_migration(app, module, doc, site, all, skip)\n@click.command()\n@click.option(\n    \"--site\",\n    default=None,\n    help=\"Specify a site to migrate. If not provided, prompts for a site.\",\n)\ndef registermodels(site):",
        "detail": "blox.sites.migrate.migrate",
        "documentation": {}
    },
    {
        "label": "registermodels",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate",
        "description": "blox.sites.migrate.migrate",
        "peekOfCode": "def registermodels(site):\n    \"\"\"Run Django makemigrations and migrate commands.\"\"\"\n    create_entries_from_config(find_django_path(site), site)",
        "detail": "blox.sites.migrate.migrate",
        "documentation": {}
    },
    {
        "label": "MODULES_FOLDER",
        "kind": 5,
        "importPath": "blox.sites.migrate.migrate",
        "description": "blox.sites.migrate.migrate",
        "peekOfCode": "MODULES_FOLDER = {\n    \"views\": \"views\",\n    \"models\": \"models\",\n    \"filters\": \"filters\",\n    \"serializers\": \"serializers\",\n    \"tests\": \"tests\",\n}\ndef remove_class_block(file_path, class_name):\n    \"\"\"Remove the class definition block for a specified class from a file.\n    Args:",
        "detail": "blox.sites.migrate.migrate",
        "documentation": {}
    },
    {
        "label": "add_init_files",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_app",
        "description": "blox.sites.migrate.migrate_app",
        "peekOfCode": "def add_init_files(folder_path, modules):\n    \"\"\"Create an __init__.py file in the specified folder, importing all modules listed.\n    Args:\n        folder_path (str): Path to the folder where __init__.py will be created.\n        modules (list): List of module names to be imported in the __init__.py file.\n    \"\"\"\n    init_file_path = os.path.join(folder_path, \"__init__.py\")\n    os.makedirs(folder_path, exist_ok=True)\n    with open(init_file_path, \"w\") as init_file:\n        init_file.truncate(0)  # Clear the contents of the file",
        "detail": "blox.sites.migrate.migrate_app",
        "documentation": {}
    },
    {
        "label": "migrate_app",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_app",
        "description": "blox.sites.migrate.migrate_app",
        "peekOfCode": "def migrate_app(app_name, django_path):\n    \"\"\"Migrate a specific app by updating modules and folders as per configuration.\n    Args:\n        app_name (str): Name of the app to migrate.\n        django_path (str): Path to the Django project where the app should be migrated.\n    This function performs the following actions:\n        - Locates the modules.txt file and determines the module base path.\n        - Reads the module names and updates the folder structure.\n        - Cleans existing module files, recreates folders, and calls migrate_module for each module.\n    \"\"\"",
        "detail": "blox.sites.migrate.migrate_app",
        "documentation": {}
    },
    {
        "label": "run_django_migrations",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_db",
        "description": "blox.sites.migrate.migrate_db",
        "peekOfCode": "def run_django_migrations():\n    \"\"\"Run Django makemigrations and migrate commands.\"\"\"\n    python_command = \"python\" if platform.system() == \"Windows\" else \"python3\"\n    subprocess.run(\n        f'echo \"y\" | {python_command} manage.py makemigrations',\n        shell=True,\n        cwd=os.path.join(PROJECT_ROOT, \"apps/core/django\"),\n    )\n    subprocess.run(\n        [python_command, \"manage.py\", \"migrate\", \"--noinput\"],",
        "detail": "blox.sites.migrate.migrate_db",
        "documentation": {}
    },
    {
        "label": "createsuperuser",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_db",
        "description": "blox.sites.migrate.migrate_db",
        "peekOfCode": "def createsuperuser():\n    run_django_migrations()\n    \"\"\"Run Django createsuperuser command non-interactively by prompting user for details.\"\"\"\n    python_command = \"python\" if platform.system() == \"Windows\" else \"python3\"\n    create_superuser_args = [python_command, \"manage.py\", \"createsuperuser\"]\n    subprocess.run(\n        create_superuser_args,\n        shell=False,\n        cwd=os.path.join(PROJECT_ROOT, \"apps/core/django\"),\n        env={",
        "detail": "blox.sites.migrate.migrate_db",
        "documentation": {}
    },
    {
        "label": "install_database",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_db",
        "description": "blox.sites.migrate.migrate_db",
        "peekOfCode": "def install_database():\n    \"\"\"Install MariaDB or MySQL depending on the OS.\"\"\"\n    os_name = platform.system().lower()\n    print(\"Checking if MariaDB/MySQL is installed...\")\n    try:\n        subprocess.run([\"mysql\", \"--version\"], check=True)\n        print(\"MariaDB/MySQL is already installed.\")\n    except subprocess.CalledProcessError:\n        print(\"MariaDB/MySQL is not installed. Installing now...\")\n        if \"ubuntu\" in os_name or \"debian\" in os_name:",
        "detail": "blox.sites.migrate.migrate_db",
        "documentation": {}
    },
    {
        "label": "create_database_user",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_db",
        "description": "blox.sites.migrate.migrate_db",
        "peekOfCode": "def create_database_user():\n    \"\"\"Create a new database user or ensure the user exists with all privileges.\"\"\"\n    root_password = getpass(\"Enter MySQL/MariaDB root password: \")\n    new_user = input(\"Enter the new username: \")\n    new_password = getpass(f\"Enter password for {new_user}: \")\n    new_db = input(\"Enter the new database name: \")\n    conn = pymysql.connect(user=\"root\", password=root_password, host=\"localhost\")\n    cursor = conn.cursor()\n    try:\n        cursor.execute(",
        "detail": "blox.sites.migrate.migrate_db",
        "documentation": {}
    },
    {
        "label": "drop_existing_tables",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_db",
        "description": "blox.sites.migrate.migrate_db",
        "peekOfCode": "def drop_existing_tables(db_name, user, password, host=\"localhost\"):\n    \"\"\"Drop all tables in the given database.\"\"\"\n    conn = pymysql.connect(user=user, password=password, host=host, database=db_name)\n    cursor = conn.cursor()\n    try:\n        cursor.execute(\"SET FOREIGN_KEY_CHECKS = 0;\")\n        cursor.execute(\"SHOW TABLES;\")\n        tables = cursor.fetchall()\n        for table in tables:\n            cursor.execute(f\"DROP TABLE IF EXISTS `{table[0]}`;\")",
        "detail": "blox.sites.migrate.migrate_db",
        "documentation": {}
    },
    {
        "label": "update_app_settings",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_db",
        "description": "blox.sites.migrate.migrate_db",
        "peekOfCode": "def update_app_settings(user, password, db_name, host=\"localhost\"):\n    \"\"\"Update settings.py to use MariaDB/MySQL.\"\"\"\n    settings_file = \"apps/core/django/backend/settings.py\"\n    with open(settings_file, \"r\") as file:\n        settings_content = file.read()\n    pattern = r\"\\bDATABASES\\s*=\\s*\\{(?:[^{}]|\\{[^{}]*\\})*\\}\\s*\"\n    updated_settings_content = re.sub(\n        pattern, \"\", settings_content, flags=re.DOTALL\n    ).strip()\n    new_db_settings = f\"\"\"",
        "detail": "blox.sites.migrate.migrate_db",
        "documentation": {}
    },
    {
        "label": "migratedb",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_db",
        "description": "blox.sites.migrate.migrate_db",
        "peekOfCode": "def migratedb(sqlite_db_path=None):\n    \"\"\"Main function to handle the entire migration process.\"\"\"\n    install_database()\n    user, password, db_name = create_database_user()\n    drop_existing_tables(db_name, user, password)\n    update_app_settings(user, password, db_name)\n    createsuperuser()\nif __name__ == \"__main__\":\n    migratedb()",
        "detail": "blox.sites.migrate.migrate_db",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "blox.sites.migrate.migrate_db",
        "description": "blox.sites.migrate.migrate_db",
        "peekOfCode": "DATABASES = {{\n    'default': {{\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': '{db_name}',\n        'USER': '{user}',\n        'PASSWORD': '{password}',\n        'HOST': '{host}',\n        'PORT': '3306',\n    }}\n}}",
        "detail": "blox.sites.migrate.migrate_db",
        "documentation": {}
    },
    {
        "label": "migrate_doc",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_doc",
        "description": "blox.sites.migrate.migrate_doc",
        "peekOfCode": "def migrate_doc(app_name, module, doc=None, django_path=\"\"):\n    \"\"\"Migrate a specific document within a module and app.\"\"\"\n    module_name = to_snake_case(module).lower()\n    doc_name = to_snake_case(doc).lower()\n    doctype_folder_name =  \"doctype\"\n    modules_file_path, module_base_path = find_module_base_path(\n        app_name=app_name, module_name=module_name\n    )\n    if not module_base_path:\n        return  # Exit if no valid path is found",
        "detail": "blox.sites.migrate.migrate_doc",
        "documentation": {}
    },
    {
        "label": "ensure_directory",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_doc",
        "description": "blox.sites.migrate.migrate_doc",
        "peekOfCode": "def ensure_directory(path):\n    \"\"\"Ensure the directory exists.\"\"\"\n    if not os.path.exists(path):\n        os.makedirs(path, exist_ok=True)\ndef ensure_init_file(module_file_path, doc_name):\n    \"\"\"Ensure an __init__.py file exists in the module directory and imports the document.\"\"\"\n    init_file_path = os.path.join(module_file_path, \"__init__.py\")\n    if not os.path.exists(init_file_path):\n        with open(init_file_path, \"w\") as init_file:\n            init_file.write(\"\")",
        "detail": "blox.sites.migrate.migrate_doc",
        "documentation": {}
    },
    {
        "label": "ensure_init_file",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_doc",
        "description": "blox.sites.migrate.migrate_doc",
        "peekOfCode": "def ensure_init_file(module_file_path, doc_name):\n    \"\"\"Ensure an __init__.py file exists in the module directory and imports the document.\"\"\"\n    init_file_path = os.path.join(module_file_path, \"__init__.py\")\n    if not os.path.exists(init_file_path):\n        with open(init_file_path, \"w\") as init_file:\n            init_file.write(\"\")\n    import_statement = f\"from .{doc_name} import *\\n\"\n    with open(init_file_path, \"r+\") as init_file:\n        lines = init_file.readlines()\n        if import_statement not in lines:",
        "detail": "blox.sites.migrate.migrate_doc",
        "documentation": {}
    },
    {
        "label": "write_module_content",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_doc",
        "description": "blox.sites.migrate.migrate_doc",
        "peekOfCode": "def write_module_content(\n    folder,\n    module_file_path,\n    app_name,\n    module_name,\n    doc_name,\n    doc_folder_path,\n    django_path,\n):\n    \"\"\"Write appropriate content to the module file based on the folder type.\"\"\"",
        "detail": "blox.sites.migrate.migrate_doc",
        "documentation": {}
    },
    {
        "label": "write_model_header",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_doc",
        "description": "blox.sites.migrate.migrate_doc",
        "peekOfCode": "def write_model_header(module_file, model_name):\n    \"\"\"Write the imports and class definition header for models.\"\"\"\n    module_file.write(\n        \"from django.db import models\\n\"\n        \"from multiselectfield import MultiSelectField\\n\"\n        \"from core.models.template import BaseModel\\n\"\n        \"import uuid\\nimport os\\nfrom django.conf import settings\\n\\n\"\n    )\n    module_file.write(f\"class {model_name}(BaseModel):\\n\")\ndef write_views_header(module_file, app_name, module_name, model_name, doc_name):",
        "detail": "blox.sites.migrate.migrate_doc",
        "documentation": {}
    },
    {
        "label": "write_views_header",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_doc",
        "description": "blox.sites.migrate.migrate_doc",
        "peekOfCode": "def write_views_header(module_file, app_name, module_name, model_name, doc_name):\n    \"\"\"Write the imports and class definition header for views.\"\"\"\n    module_file.write(\n        f\"from rest_framework import viewsets\\n\"\n        f\"from core.views.template import GenericViewSet\\n\"\n        f\"from {app_name}.models.{module_name}.{doc_name} import {model_name}\\n\"\n        f\"from {app_name}.filters.{module_name}.{doc_name} import {model_name}Filter\\n\"\n        f\"from {app_name}.serializers.{module_name}.{doc_name} import {model_name}Serializer\\n\"\n        f\"from core.permissions import HasGroupPermission\\n\\n\"\n    )",
        "detail": "blox.sites.migrate.migrate_doc",
        "documentation": {}
    },
    {
        "label": "STRUCTURE",
        "kind": 5,
        "importPath": "blox.sites.migrate.migrate_doc",
        "description": "blox.sites.migrate.migrate_doc",
        "peekOfCode": "STRUCTURE = {\n    \"views\": \"views\",\n    \"models\": \"models\",\n    \"filters\": \"filters\",\n    \"serializers\": \"serializers\",\n    \"tests\": \"tests\",\n}\ndef migrate_doc(app_name, module, doc=None, django_path=\"\"):\n    \"\"\"Migrate a specific document within a module and app.\"\"\"\n    module_name = to_snake_case(module).lower()",
        "detail": "blox.sites.migrate.migrate_doc",
        "documentation": {}
    },
    {
        "label": "add_init_files",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_module",
        "description": "blox.sites.migrate.migrate_module",
        "peekOfCode": "def add_init_files(folder_path):\n    \"\"\"Create __init__.py file importing all modules in the folder.\"\"\"\n    os.makedirs(folder_path, exist_ok=True)\n    init_file_path = os.path.join(folder_path, \"__init__.py\")\n    with open(init_file_path, \"w+\") as init_file:\n        init_file.truncate(0)  # Clear the contents of the \n        # init_file.write(f\"from . import *\\n\")\n        # List all .py files except __init__.py\n        files = [\n            f[:-3]",
        "detail": "blox.sites.migrate.migrate_module",
        "documentation": {}
    },
    {
        "label": "underscore_to_titlecase",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_module",
        "description": "blox.sites.migrate.migrate_module",
        "peekOfCode": "def underscore_to_titlecase(s):\n    \"\"\"Convert an underscore-separated string to title case.\"\"\"\n    return \"\".join(word.title() for word in s.split(\"_\"))\ndef write_empty_view(folder_name, view_path):\n    \"\"\"Write a default class to the views.py file if it is empty.\"\"\"\n    class_name = underscore_to_titlecase(folder_name)\n    with open(view_path, \"w\") as f:\n        f.write(f\"from rest_framework.response import Response\\n\\n\")\n        f.write(f\"class Custom{class_name}:\\n\")\n        f.write(f\"    pass\\n\")",
        "detail": "blox.sites.migrate.migrate_module",
        "documentation": {}
    },
    {
        "label": "write_empty_view",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_module",
        "description": "blox.sites.migrate.migrate_module",
        "peekOfCode": "def write_empty_view(folder_name, view_path):\n    \"\"\"Write a default class to the views.py file if it is empty.\"\"\"\n    class_name = underscore_to_titlecase(folder_name)\n    with open(view_path, \"w\") as f:\n        f.write(f\"from rest_framework.response import Response\\n\\n\")\n        f.write(f\"class Custom{class_name}:\\n\")\n        f.write(f\"    pass\\n\")\ndef migrate_module(app_name, module, django_path):\n    \"\"\"Migrate a specific module within an app by processing either the 'doc' or 'doctype' folder, whichever exists first.\"\"\"\n    # Convert module name to snake_case",
        "detail": "blox.sites.migrate.migrate_module",
        "documentation": {}
    },
    {
        "label": "migrate_module",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_module",
        "description": "blox.sites.migrate.migrate_module",
        "peekOfCode": "def migrate_module(app_name, module, django_path):\n    \"\"\"Migrate a specific module within an app by processing either the 'doc' or 'doctype' folder, whichever exists first.\"\"\"\n    # Convert module name to snake_case\n    module_name = to_snake_case(module)\n    _, module_path = find_module_base_path(app_name=app_name, module_name=module_name)\n    # Check if the module path exists\n    if not module_path or not os.path.exists(module_path):\n        click.echo(f\"Module '{module}' does not exist in app '{module_path}'. Skipping...\")\n        return\n    # Define the paths for 'doc' and 'doctype' folders",
        "detail": "blox.sites.migrate.migrate_module",
        "documentation": {}
    },
    {
        "label": "process_folder_docs",
        "kind": 2,
        "importPath": "blox.sites.migrate.migrate_module",
        "description": "blox.sites.migrate.migrate_module",
        "peekOfCode": "def process_folder_docs(app_name, module, folder_path, folder_type, django_path):\n    \"\"\"Processes each document or doctype in the specified folder.\"\"\"\n    # List all documents in the folder\n    folder_docs = [\n        item_name\n        for item_name in os.listdir(folder_path)\n        if os.path.isdir(os.path.join(folder_path, item_name)) and not item_name.startswith((\"_\", \"pycache\"))\n    ]\n    # Iterate over the STRUCTURE and compare files in django_path\n    for key, structure_item in STRUCTURE.items():",
        "detail": "blox.sites.migrate.migrate_module",
        "documentation": {}
    },
    {
        "label": "STRUCTURE",
        "kind": 5,
        "importPath": "blox.sites.migrate.migrate_module",
        "description": "blox.sites.migrate.migrate_module",
        "peekOfCode": "STRUCTURE = {\n    \"views\": \"views\",\n    \"models\": \"models\",\n    \"filters\": \"filters\",\n    \"serializers\": \"serializers\",\n    \"tests\": \"tests\",\n}\ndef process_folder_docs(app_name, module, folder_path, folder_type, django_path):\n    \"\"\"Processes each document or doctype in the specified folder.\"\"\"\n    # List all documents in the folder",
        "detail": "blox.sites.migrate.migrate_module",
        "documentation": {}
    },
    {
        "label": "underscore_to_titlecase",
        "kind": 2,
        "importPath": "blox.sites.migrate.update_urls",
        "description": "blox.sites.migrate.update_urls",
        "peekOfCode": "def underscore_to_titlecase(underscore_str):\n    \"\"\"Convert underscore string to title case.\"\"\"\n    return re.sub(r\"_(.)\", lambda m: m.group(1).upper(), underscore_str.title())\ndef write_urls(url_file, model_name, module_name):\n    \"\"\"Generate a URL route for a given model.\"\"\"\n    return f\"router.register(r'{module_name}', {model_name}ViewSet)\\n\"\ndef update_urls(app_name, module, django_path):\n    \"\"\"Update the main urls.py file with new routes.\"\"\"\n    url_file_path = os.path.join(django_path, f\"{app_name}_app\", \"urls.py\")\n    # Prepare header lines",
        "detail": "blox.sites.migrate.update_urls",
        "documentation": {}
    },
    {
        "label": "write_urls",
        "kind": 2,
        "importPath": "blox.sites.migrate.update_urls",
        "description": "blox.sites.migrate.update_urls",
        "peekOfCode": "def write_urls(url_file, model_name, module_name):\n    \"\"\"Generate a URL route for a given model.\"\"\"\n    return f\"router.register(r'{module_name}', {model_name}ViewSet)\\n\"\ndef update_urls(app_name, module, django_path):\n    \"\"\"Update the main urls.py file with new routes.\"\"\"\n    url_file_path = os.path.join(django_path, f\"{app_name}_app\", \"urls.py\")\n    # Prepare header lines\n    header_lines = (\n        f\"from django.urls import path, include\\n\"\n        f\"from rest_framework.routers import DefaultRouter\\n\"",
        "detail": "blox.sites.migrate.update_urls",
        "documentation": {}
    },
    {
        "label": "update_urls",
        "kind": 2,
        "importPath": "blox.sites.migrate.update_urls",
        "description": "blox.sites.migrate.update_urls",
        "peekOfCode": "def update_urls(app_name, module, django_path):\n    \"\"\"Update the main urls.py file with new routes.\"\"\"\n    url_file_path = os.path.join(django_path, f\"{app_name}_app\", \"urls.py\")\n    # Prepare header lines\n    header_lines = (\n        f\"from django.urls import path, include\\n\"\n        f\"from rest_framework.routers import DefaultRouter\\n\"\n        f\"from {app_name}_app.views import *\\n\\n\"\n        f\"router = DefaultRouter()\\n\\n\"\n    )",
        "detail": "blox.sites.migrate.update_urls",
        "documentation": {}
    },
    {
        "label": "is_invalid_model_name",
        "kind": 2,
        "importPath": "blox.sites.migrate.update_urls",
        "description": "blox.sites.migrate.update_urls",
        "peekOfCode": "def is_invalid_model_name(name):\n    \"\"\"Check if a model name is invalid.\"\"\"\n    # Skip directories starting with '_' or 'pycache' and names starting or ending with underscores\n    return name.startswith(\"_\") or name.endswith(\"_\") or name.lower() == \"pycache\"",
        "detail": "blox.sites.migrate.update_urls",
        "documentation": {}
    },
    {
        "label": "update_urls_py",
        "kind": 2,
        "importPath": "blox.sites.migrate.update_urls_app",
        "description": "blox.sites.migrate.update_urls_app",
        "peekOfCode": "def update_urls_py(app_name, modules, django_path):\n    \"\"\"Update urls.py to register ViewSets for models within an app.\"\"\"\n    # Path to urls.py\n    urls_path = os.path.join(django_path, f\"{app_name}_app\", \"urls.py\")\n    # Initialize content for urls.py\n    urls_content = \"from django.urls import path, include\\n\"\n    urls_content += \"from rest_framework.routers import DefaultRouter\\nrouter = DefaultRouter()\\n\"\n    # Process each module\n    for module in modules:\n        module_snake_case = to_snake_case(module)",
        "detail": "blox.sites.migrate.update_urls_app",
        "documentation": {}
    },
    {
        "label": "extract_model_names",
        "kind": 2,
        "importPath": "blox.sites.migrate.update_urls_app",
        "description": "blox.sites.migrate.update_urls_app",
        "peekOfCode": "def extract_model_names(folder_path):\n    \"\"\"Extract model names based on folder contents, skipping directories\n    starting with '_' or 'pycache'.\"\"\"\n    models = []\n    for item_name in os.listdir(folder_path):\n        item_path = os.path.join(folder_path, item_name)\n        if os.path.isdir(item_path) and not item_name.startswith((\"_\", \"pycache\")):\n            models.append(item_name)\n    return models",
        "detail": "blox.sites.migrate.update_urls_app",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "blox.sites.migrate.update_urls_app",
        "description": "blox.sites.migrate.update_urls_app",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]\n\"\"\"\n    # Write the final urls.py\n    with open(urls_path, \"w\") as file:\n        file.write(urls_content)\ndef extract_model_names(folder_path):\n    \"\"\"Extract model names based on folder contents, skipping directories\n    starting with '_' or 'pycache'.\"\"\"",
        "detail": "blox.sites.migrate.update_urls_app",
        "documentation": {}
    },
    {
        "label": "convert_frappe_fields_to_django",
        "kind": 2,
        "importPath": "blox.sites.migrate.write_django",
        "description": "blox.sites.migrate.write_django",
        "peekOfCode": "def convert_frappe_fields_to_django(file_content):\n    \"\"\"\n    Convert Frappe field types in a class to Django-compatible field definitions.\n    \"\"\"\n    field_mappings = {\n        \"DF.Link\": 'models.ForeignKey(\"{related_model}\", on_delete=models.CASCADE, null=True, blank=True)',\n        \"DF.Currency\": \"models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)\",\n        \"DF.Date\": \"models.DateField(null=True, blank=True)\",\n        \"DF.Check\": \"models.BooleanField(default=False, null=True, blank=True)\",\n    }",
        "detail": "blox.sites.migrate.write_django",
        "documentation": {}
    },
    {
        "label": "convert_frappe_to_django",
        "kind": 2,
        "importPath": "blox.sites.migrate.write_django",
        "description": "blox.sites.migrate.write_django",
        "peekOfCode": "def convert_frappe_to_django(folder_path, doc_name):\n    \"\"\"\n    Convert a Frappe-style Python file to a Django-compatible model file.\n    \"\"\"\n    # Define paths for the source and target files\n    model_file_path = os.path.join(folder_path, f\"{doc_name}.py\")\n    output_file_path = os.path.join(folder_path, f\"{doc_name}_django.py\")\n    # Check if the source file exists and is non-empty\n    if not os.path.exists(model_file_path) or os.path.getsize(model_file_path) == 0:\n        click.echo(f\"Skipping conversion: File {model_file_path} is missing or empty.\")",
        "detail": "blox.sites.migrate.write_django",
        "documentation": {}
    },
    {
        "label": "write_filter_fields",
        "kind": 2,
        "importPath": "blox.sites.migrate.write_filters",
        "description": "blox.sites.migrate.write_filters",
        "peekOfCode": "def write_filter_fields(module_file, folder_path, model_name, doc_name, django_path):\n    \"\"\"Write filter fields for a given model, including only filterable fields.\"\"\"\n    fields_file_path = os.path.join(folder_path, \"fields.json\")\n    model_file_path = os.path.join(folder_path, f\"{doc_name}.json\")\n    settings_file_path = os.path.join(folder_path, \"settings.json\")\n    field_list = []\n    settings = {}\n    # Load fields from fields.json or doc_name.json\n    if os.path.exists(fields_file_path):\n        field_list = load_json_file(fields_file_path)",
        "detail": "blox.sites.migrate.write_filters",
        "documentation": {}
    },
    {
        "label": "write_filters",
        "kind": 2,
        "importPath": "blox.sites.migrate.write_filters",
        "description": "blox.sites.migrate.write_filters",
        "peekOfCode": "def write_filters(\n    module_file, app_name, module_name, model_name, doc_name, folder_path\n):\n    \"\"\"Write the imports and class definition header for filters.\"\"\"\n    # Write imports for django_filters and the model\n    module_file.write(\n        f\"import django_filters as filters\\n\"\n        f\"from {app_name}.models.{module_name}.{doc_name} import {model_name}\\n\\n\"\n    )\n    # Write the filter class header",
        "detail": "blox.sites.migrate.write_filters",
        "documentation": {}
    },
    {
        "label": "write_model_fields",
        "kind": 2,
        "importPath": "blox.sites.migrate.write_models",
        "description": "blox.sites.migrate.write_models",
        "peekOfCode": "def write_model_fields(\n    module_file, file_path, folder_path, model_name, doc_name, django_path\n):\n    \"\"\"Write model fields based on fields.json or doc_name.json in the given folder path.\"\"\"\n    fields_file_path = os.path.join(folder_path, \"fields.json\")\n    model_file_path = os.path.join(folder_path, f\"{doc_name}.json\")\n    settings_file_path = os.path.join(folder_path, \"settings.json\")\n    field_list = []\n    settings = {}\n    # Load fields from fields.json or doc_name.json",
        "detail": "blox.sites.migrate.write_models",
        "documentation": {}
    },
    {
        "label": "rename_reserved_keywords",
        "kind": 2,
        "importPath": "blox.sites.migrate.write_serializers",
        "description": "blox.sites.migrate.write_serializers",
        "peekOfCode": "def rename_reserved_keywords(field_id):\n    \"\"\"\n    Rename field ID if it is a reserved keyword.\n    \"\"\"\n    return reserved_keywords.get(field_id, field_id)\ndef sanitize_field_name(field_id):\n    \"\"\"\n    Sanitize the field name to ensure it is a valid Python variable name.\n    - Replace invalid characters with underscores.\n    - Prefix with an underscore if the name starts with a digit.",
        "detail": "blox.sites.migrate.write_serializers",
        "documentation": {}
    },
    {
        "label": "sanitize_field_name",
        "kind": 2,
        "importPath": "blox.sites.migrate.write_serializers",
        "description": "blox.sites.migrate.write_serializers",
        "peekOfCode": "def sanitize_field_name(field_id):\n    \"\"\"\n    Sanitize the field name to ensure it is a valid Python variable name.\n    - Replace invalid characters with underscores.\n    - Prefix with an underscore if the name starts with a digit.\n    \"\"\"\n    sanitized = re.sub(r\"\\W|^(?=\\d)\", \"_\", field_id)\n    return sanitized\ndef load_fields(folder_path, doc_name):\n    \"\"\"",
        "detail": "blox.sites.migrate.write_serializers",
        "documentation": {}
    },
    {
        "label": "load_fields",
        "kind": 2,
        "importPath": "blox.sites.migrate.write_serializers",
        "description": "blox.sites.migrate.write_serializers",
        "peekOfCode": "def load_fields(folder_path, doc_name):\n    \"\"\"\n    Load fields from doc_name.json.\n    \"\"\"\n    model_file_path = os.path.join(folder_path, f\"{doc_name}.json\")\n    field_list = []\n    if os.path.exists(model_file_path):\n        model_data = load_json_file(model_file_path)\n        field_list = model_data.get(\"fields\", [])\n    else:",
        "detail": "blox.sites.migrate.write_serializers",
        "documentation": {}
    },
    {
        "label": "write_serializers_header",
        "kind": 2,
        "importPath": "blox.sites.migrate.write_serializers",
        "description": "blox.sites.migrate.write_serializers",
        "peekOfCode": "def write_serializers_header(\n    module_file, app_name, module_name, model_name, doc_name, related_fields\n):\n    \"\"\"\n    Write the imports for the serializers at the top of the file.\n    Only import serializers for related models that are not the same as the current model.\n    \"\"\"\n    # Start with basic imports\n    module_file.write(\n        f\"from rest_framework import serializers\\n\"",
        "detail": "blox.sites.migrate.write_serializers",
        "documentation": {}
    },
    {
        "label": "write_meta_class",
        "kind": 2,
        "importPath": "blox.sites.migrate.write_serializers",
        "description": "blox.sites.migrate.write_serializers",
        "peekOfCode": "def write_meta_class(module_file, model_name, related_fields):\n    \"\"\"\n    Write the Meta class, including related fields, for the serializer.\n    \"\"\"\n    module_file.write(\"    class Meta:\\n\")\n    module_file.write(f\"        model = {model_name}\\n\")\n    module_file.write(\"        fields = '__all__'\\n\")\n    # if related_fields:\n    #     module_file.write(\"        related_fields: Dict[str, Dict[str, str]] = {\\n\")\n    #     for field_name, related_info in related_fields.items():",
        "detail": "blox.sites.migrate.write_serializers",
        "documentation": {}
    },
    {
        "label": "process_field",
        "kind": 2,
        "importPath": "blox.sites.migrate.write_serializers",
        "description": "blox.sites.migrate.write_serializers",
        "peekOfCode": "def process_field(field, model_name, current_doc_name):\n    \"\"\"\n    Process a single field and return its related field definition if applicable.\n    Handles nested representation for self-referencing fields, ManyToManyField, and OneToOneField relationships.\n    \"\"\"\n    if not isinstance(field, dict):\n        raise ValueError(f\"Invalid field format: {field}. Expected a dictionary.\")\n    # Rename and sanitize the field name\n    raw_field_id = field.get(\"fieldname\", \"\")\n    field_id = sanitize_field_name(",
        "detail": "blox.sites.migrate.write_serializers",
        "documentation": {}
    },
    {
        "label": "write_serializer",
        "kind": 2,
        "importPath": "blox.sites.migrate.write_serializers",
        "description": "blox.sites.migrate.write_serializers",
        "peekOfCode": "def write_serializer(\n    module_file, app_name, module_name, model_name, doc_name, doc_folder_path\n):\n    \"\"\"\n    Generate and write a single serializer class for the given model, focusing on related fields.\n    Use SerializerMethodField for self-referencing fields and declare related fields before Meta.\n    \"\"\"\n    load_fields(doc_folder_path, doc_name)\n    related_fields = {}\n    # for field in fields:",
        "detail": "blox.sites.migrate.write_serializers",
        "documentation": {}
    },
    {
        "label": "find_matching_class",
        "kind": 2,
        "importPath": "blox.sites.migrate.write_viewsets",
        "description": "blox.sites.migrate.write_viewsets",
        "peekOfCode": "def find_matching_class(file_content, model_name):\n    \"\"\"Check if the model_name matches a class in the Python file.\"\"\"\n    parsed_content = ast.parse(file_content)\n    class_names = [\n        node.name for node in parsed_content.body if isinstance(node, ast.ClassDef)\n    ]\n    if model_name in class_names:\n        return model_name  # Exact match\n    return class_names  # Return all available class names for further matching\ndef find_nearest_class(model_name, class_names):",
        "detail": "blox.sites.migrate.write_viewsets",
        "documentation": {}
    },
    {
        "label": "find_nearest_class",
        "kind": 2,
        "importPath": "blox.sites.migrate.write_viewsets",
        "description": "blox.sites.migrate.write_viewsets",
        "peekOfCode": "def find_nearest_class(model_name, class_names):\n    \"\"\"Find the nearest match to model_name from a list of class names.\"\"\"\n    matches = get_close_matches(model_name, class_names, n=1, cutoff=0.6)\n    return matches[0] if matches else None\ndef write_viewset(view_file, model_name, module_name, folder_path, doc_name):\n    \"\"\"Write a viewset for a given model, skipping the import if the file is missing or empty.\"\"\"\n    model_file_path = os.path.join(folder_path, f\"{doc_name}.py\")\n    # Check if the file exists and is not empty\n    modelimport_name = None\n    if not os.path.exists(model_file_path) or os.path.getsize(model_file_path) == 0:",
        "detail": "blox.sites.migrate.write_viewsets",
        "documentation": {}
    },
    {
        "label": "write_viewset",
        "kind": 2,
        "importPath": "blox.sites.migrate.write_viewsets",
        "description": "blox.sites.migrate.write_viewsets",
        "peekOfCode": "def write_viewset(view_file, model_name, module_name, folder_path, doc_name):\n    \"\"\"Write a viewset for a given model, skipping the import if the file is missing or empty.\"\"\"\n    model_file_path = os.path.join(folder_path, f\"{doc_name}.py\")\n    # Check if the file exists and is not empty\n    modelimport_name = None\n    if not os.path.exists(model_file_path) or os.path.getsize(model_file_path) == 0:\n        pass\n    else:\n        # Load model file content\n        with open(model_file_path, \"r\", encoding=\"utf-8\") as f:",
        "detail": "blox.sites.migrate.write_viewsets",
        "documentation": {}
    },
    {
        "label": "update_apps_txt",
        "kind": 2,
        "importPath": "blox.sites.utils.app_actions",
        "description": "blox.sites.utils.app_actions",
        "peekOfCode": "def update_apps_txt(app_name, remove=False):\n    \"\"\"Update the apps.txt file by adding or removing an application name.\n    Args:\n        app_name (str): Name of the app to add or remove from apps.txt.\n        remove (bool): Set to True to remove the app from apps.txt. Defaults to False.\n    \"\"\"\n    with open(APPS_TXT_PATH, \"r\") as apps_file:\n        apps = [\n            app.strip()\n            for app in apps_file.readlines()",
        "detail": "blox.sites.utils.app_actions",
        "documentation": {}
    },
    {
        "label": "find_modules",
        "kind": 2,
        "importPath": "blox.sites.utils.app_actions",
        "description": "blox.sites.utils.app_actions",
        "peekOfCode": "def find_modules(app_name):\n    modules_file_path, _ = find_module_base_path(app_name)\n    if not modules_file_path:\n        update_apps_txt(app_name, remove=True)\n        return\n    # Read modules from modules.txt\n    with open(modules_file_path, \"r\") as modules_file:\n        modules = [\n            module.strip()\n            for module in modules_file.readlines()",
        "detail": "blox.sites.utils.app_actions",
        "documentation": {}
    },
    {
        "label": "get_name_by_id",
        "kind": 2,
        "importPath": "blox.sites.utils.app_actions",
        "description": "blox.sites.utils.app_actions",
        "peekOfCode": "def get_name_by_id(entity_id, entity_type):\n    \"\"\"\n    Retrieves the name of an app, module, or document by its ID.\n    Parameters:\n        entity_id (str): The ID of the app, module, or document.\n        entity_type (str): The type of entity ('app', 'module', or 'doc').\n        config_path (str): Path to the doctypes.json configuration file.\n    Returns:\n        str: The name of the entity if found, else None.\n    \"\"\"",
        "detail": "blox.sites.utils.app_actions",
        "documentation": {}
    },
    {
        "label": "get_doc_details",
        "kind": 2,
        "importPath": "blox.sites.utils.app_actions",
        "description": "blox.sites.utils.app_actions",
        "peekOfCode": "def get_doc_details(doc_identifier):\n    \"\"\"\n    Retrieves the app ID, module ID, and doc ID associated with a given document name or ID.\n    Parameters:\n        doc_identifier (str): The document name or ID to search for.\n    Returns:\n        dict: A dictionary containing 'app_id', 'module_id', and 'doc_id' if found.\n              Example: {'app_id': 'app123', 'module_id': 'module456', 'doc_id': 'doc789'}\n        None: If no matching document is found.\n    \"\"\"",
        "detail": "blox.sites.utils.app_actions",
        "documentation": {}
    },
    {
        "label": "initialize_django_env",
        "kind": 2,
        "importPath": "blox.sites.utils.app_database_utils",
        "description": "blox.sites.utils.app_database_utils",
        "peekOfCode": "def initialize_django_env(django_path):\n    \"\"\"Initialize the Django environment based on django_path.\"\"\"\n    os.environ.setdefault(\n        \"DJANGO_SETTINGS_MODULE\", \"backend.settings\"\n    )  # Update to your settings module\n    sys.path.insert(0, django_path)  # Add Django project path to Python path\n    django.setup()\ndef update_or_create_entry(model, id_value, name_value, site, **kwargs):\n    \"\"\"\n    Update an existing entry's name if the ID exists, or create a new entry.",
        "detail": "blox.sites.utils.app_database_utils",
        "documentation": {}
    },
    {
        "label": "update_or_create_entry",
        "kind": 2,
        "importPath": "blox.sites.utils.app_database_utils",
        "description": "blox.sites.utils.app_database_utils",
        "peekOfCode": "def update_or_create_entry(model, id_value, name_value, site, **kwargs):\n    \"\"\"\n    Update an existing entry's name if the ID exists, or create a new entry.\n    Args:\n        model: The model class to query.\n        id_value: The ID to look for.\n        name_value: The name to set or update.\n        kwargs: Additional fields for creating a new entry.\n    Returns:\n        A tuple of (instance, created).",
        "detail": "blox.sites.utils.app_database_utils",
        "documentation": {}
    },
    {
        "label": "create_entries_from_config",
        "kind": 2,
        "importPath": "blox.sites.utils.app_database_utils",
        "description": "blox.sites.utils.app_database_utils",
        "peekOfCode": "def create_entries_from_config(django_path, site):\n    \"\"\"Process the JSON configuration file and create/update database entries.\"\"\"\n    # Initialize Django environment\n    initialize_django_env(django_path)\n    # Import models after Django setup\n    from core.models import (App,  # Update with actual path to models\n                                Document, Module)\n    # Load JSON configuration file\n    ensure_file_exists(DOCS_JSON_PATH, initial_data=[])\n    sites = get_all_sites()",
        "detail": "blox.sites.utils.app_database_utils",
        "documentation": {}
    },
    {
        "label": "configure_app",
        "kind": 2,
        "importPath": "blox.sites.utils.configure_app",
        "description": "blox.sites.utils.configure_app",
        "peekOfCode": "def configure_app(app_name):\n    \"\"\"Register models from multiple modules within an app.\"\"\"\n    # Generate the doctypes.json file\n    create_doctypes_json(app_name) \ndef configure_module(app_name, module_name):\n    \"\"\"Register models from multiple modules within an app.\"\"\"\n    create_doctypes_json(app_name, module_name)\ndef configure_doc(app_name, module_name, doc_name):\n    \"\"\"Register models from multiple modules within an app.\"\"\"\n    # Generate the doctypes.json file",
        "detail": "blox.sites.utils.configure_app",
        "documentation": {}
    },
    {
        "label": "configure_module",
        "kind": 2,
        "importPath": "blox.sites.utils.configure_app",
        "description": "blox.sites.utils.configure_app",
        "peekOfCode": "def configure_module(app_name, module_name):\n    \"\"\"Register models from multiple modules within an app.\"\"\"\n    create_doctypes_json(app_name, module_name)\ndef configure_doc(app_name, module_name, doc_name):\n    \"\"\"Register models from multiple modules within an app.\"\"\"\n    # Generate the doctypes.json file\n    add_single_entry(app_name, module_name, doc_name)\ndef process_folder_docs(app_name, module, folder_path, django_path):\n    \"\"\"Processes each document or doctype in the specified folder and returns model names and import statements.\"\"\"\n    import_statements = []",
        "detail": "blox.sites.utils.configure_app",
        "documentation": {}
    },
    {
        "label": "configure_doc",
        "kind": 2,
        "importPath": "blox.sites.utils.configure_app",
        "description": "blox.sites.utils.configure_app",
        "peekOfCode": "def configure_doc(app_name, module_name, doc_name):\n    \"\"\"Register models from multiple modules within an app.\"\"\"\n    # Generate the doctypes.json file\n    add_single_entry(app_name, module_name, doc_name)\ndef process_folder_docs(app_name, module, folder_path, django_path):\n    \"\"\"Processes each document or doctype in the specified folder and returns model names and import statements.\"\"\"\n    import_statements = []\n    models_to_register = []\n    # Use list comprehension for faster directory listing and processing\n    items = [",
        "detail": "blox.sites.utils.configure_app",
        "documentation": {}
    },
    {
        "label": "process_folder_docs",
        "kind": 2,
        "importPath": "blox.sites.utils.configure_app",
        "description": "blox.sites.utils.configure_app",
        "peekOfCode": "def process_folder_docs(app_name, module, folder_path, django_path):\n    \"\"\"Processes each document or doctype in the specified folder and returns model names and import statements.\"\"\"\n    import_statements = []\n    models_to_register = []\n    # Use list comprehension for faster directory listing and processing\n    items = [\n        item\n        for item in os.listdir(folder_path)\n        if os.path.isdir(os.path.join(folder_path, item))\n    ]",
        "detail": "blox.sites.utils.configure_app",
        "documentation": {}
    },
    {
        "label": "process_docs",
        "kind": 2,
        "importPath": "blox.sites.utils.generate_json",
        "description": "blox.sites.utils.generate_json",
        "peekOfCode": "def process_docs(folder_path):\n    \"\"\"Processes all documents in the specified folder and returns a list of document names.\"\"\"\n    docs = []\n    for item_name in os.listdir(folder_path):\n        if item_name.startswith(\"_\"):\n            continue  # Skip folders starting with '_'\n        item_path = os.path.join(folder_path, item_name)\n        if os.path.isdir(item_path):  # Only process directories (docs)\n            json_file_path = os.path.join(item_path, f\"{item_name}.json\")\n            doc_name = item_name  # Default to the folder name",
        "detail": "blox.sites.utils.generate_json",
        "documentation": {}
    },
    {
        "label": "save_data_to_file",
        "kind": 2,
        "importPath": "blox.sites.utils.generate_json",
        "description": "blox.sites.utils.generate_json",
        "peekOfCode": "def save_data_to_file(data):\n    \"\"\"Saves the updated data back to the JSON file.\"\"\"\n    with open(DOCS_JSON_PATH, \"w\") as json_file:\n        json.dump(data, json_file, indent=4)\ndef find_or_create_app_entry(existing_data, app_id, app_name):\n    \"\"\"Finds an app entry by ID or creates a new one, always replacing the name if found.\"\"\"\n    app_entry = next((app for app in existing_data if app[\"id\"] == app_id), None)\n    if not app_entry:\n        app_entry = {\"id\": app_id, \"name\": app_name, \"modules\": []}\n        existing_data.append(app_entry)",
        "detail": "blox.sites.utils.generate_json",
        "documentation": {}
    },
    {
        "label": "find_or_create_app_entry",
        "kind": 2,
        "importPath": "blox.sites.utils.generate_json",
        "description": "blox.sites.utils.generate_json",
        "peekOfCode": "def find_or_create_app_entry(existing_data, app_id, app_name):\n    \"\"\"Finds an app entry by ID or creates a new one, always replacing the name if found.\"\"\"\n    app_entry = next((app for app in existing_data if app[\"id\"] == app_id), None)\n    if not app_entry:\n        app_entry = {\"id\": app_id, \"name\": app_name, \"modules\": []}\n        existing_data.append(app_entry)\n    else:\n        app_entry[\"name\"] = app_name  # Always replace the name\n    return app_entry\ndef find_or_create_module_entry(app_entry, module_id, module_name):",
        "detail": "blox.sites.utils.generate_json",
        "documentation": {}
    },
    {
        "label": "find_or_create_module_entry",
        "kind": 2,
        "importPath": "blox.sites.utils.generate_json",
        "description": "blox.sites.utils.generate_json",
        "peekOfCode": "def find_or_create_module_entry(app_entry, module_id, module_name):\n    \"\"\"Finds a module entry by ID within an app or creates a new one, always replacing the name if found.\"\"\"\n    module_entry = next(\n        (mod for mod in app_entry[\"modules\"] if mod[\"id\"] == module_id), None\n    )\n    if not module_entry:\n        module_entry = {\"id\": module_id, \"name\": module_name, \"docs\": []}\n        app_entry[\"modules\"].append(module_entry)\n    else:\n        module_entry[\"name\"] = module_name  # Always replace the name",
        "detail": "blox.sites.utils.generate_json",
        "documentation": {}
    },
    {
        "label": "update_module_docs",
        "kind": 2,
        "importPath": "blox.sites.utils.generate_json",
        "description": "blox.sites.utils.generate_json",
        "peekOfCode": "def update_module_docs(module_entry, docs):\n    \"\"\"Updates the documents in a module, replacing names if IDs match.\"\"\"\n    existing_docs = {doc[\"id\"]: doc for doc in module_entry[\"docs\"]}\n    for doc in docs:\n        if doc[\"id\"] in existing_docs:\n            existing_docs[doc[\"id\"]][\"name\"] = doc[\"name\"]\n        else:\n            module_entry[\"docs\"].append(doc)\ndef add_single_doc(app_id, app_name, module_id, module_name, doc_id, doc_name):\n    \"\"\"Adds or updates a single document in the specified app and module.\"\"\"",
        "detail": "blox.sites.utils.generate_json",
        "documentation": {}
    },
    {
        "label": "add_single_doc",
        "kind": 2,
        "importPath": "blox.sites.utils.generate_json",
        "description": "blox.sites.utils.generate_json",
        "peekOfCode": "def add_single_doc(app_id, app_name, module_id, module_name, doc_id, doc_name):\n    \"\"\"Adds or updates a single document in the specified app and module.\"\"\"\n    existing_data = load_existing_data()\n    app_entry = find_or_create_app_entry(existing_data, app_id, app_name)\n    module_entry = find_or_create_module_entry(app_entry, module_id, module_name)\n    doc_entry = next((doc for doc in module_entry[\"docs\"] if doc[\"id\"] == doc_id), None)\n    if doc_entry:\n        doc_entry[\"name\"] = doc_name\n    else:\n        doc_entry = {\"id\": doc_id,  \"model\": to_titlecase_no_space(doc_name), \"name\": doc_name}",
        "detail": "blox.sites.utils.generate_json",
        "documentation": {}
    },
    {
        "label": "process_module",
        "kind": 2,
        "importPath": "blox.sites.utils.generate_json",
        "description": "blox.sites.utils.generate_json",
        "peekOfCode": "def process_module(app_name, module, app_entry):\n    \"\"\"Processes a module, updates its docs, and appends it to the app entry.\"\"\"\n    module_id = to_snake_case(module)\n    module_name = module\n    _, module_path = find_module_base_path(app_name=app_name, module_name=module_id)\n    if not module_path or not os.path.exists(module_path):\n        click.echo(f\"Module '{module}' does not exist in app '{module_path}'. Skipping...\")\n        return\n    doc_path = os.path.join(module_path, \"doc\")\n    doctype_path = os.path.join(module_path, \"doctype\")",
        "detail": "blox.sites.utils.generate_json",
        "documentation": {}
    },
    {
        "label": "create_doctypes_json",
        "kind": 2,
        "importPath": "blox.sites.utils.generate_json",
        "description": "blox.sites.utils.generate_json",
        "peekOfCode": "def create_doctypes_json(app_name, module_name=None):\n    \"\"\"Generates or updates the doctypes.json file for the app with its modules and docs.\"\"\"\n    existing_data = load_existing_data()\n    app_id = to_snake_case(app_name)\n    app_entry = find_or_create_app_entry(existing_data, app_id, app_name)\n    if module_name:\n        process_module(app_name, module_name, app_entry)\n    else:\n        modules = find_modules(app_name)\n        for module in modules:",
        "detail": "blox.sites.utils.generate_json",
        "documentation": {}
    },
    {
        "label": "add_single_entry",
        "kind": 2,
        "importPath": "blox.sites.utils.generate_json",
        "description": "blox.sites.utils.generate_json",
        "peekOfCode": "def add_single_entry(app_name=None, module_name=None, doc_name=None):\n    \"\"\"Allows adding a single doc, module, or app.\"\"\"\n    app_id = to_snake_case(app_name) if app_name else None\n    module_id = to_snake_case(module_name) if module_name else None\n    doc_id = to_snake_case(doc_name) if doc_name else None\n    existing_data = load_existing_data()\n    if app_name and module_name and doc_name:\n        add_single_doc(app_id, app_name, module_id, module_name, doc_id, doc_name)\n    elif app_name and module_name:\n        app_entry = find_or_create_app_entry(existing_data, app_id, app_name)",
        "detail": "blox.sites.utils.generate_json",
        "documentation": {}
    },
    {
        "label": "activate_virtualenv",
        "kind": 2,
        "importPath": "blox.sites.utils.installdjangoapp",
        "description": "blox.sites.utils.installdjangoapp",
        "peekOfCode": "def activate_virtualenv(project_root):\n    \"\"\"Return the path to the activate script of the virtual environment.\"\"\"\n    if sys.platform.startswith(\"win\"):\n        return os.path.join(project_root, \"env\", \"Scripts\", \"activate\")\n    return os.path.join(project_root, \"env\", \"bin\", \"activate\")\ndef get_python_executable(project_root):\n    \"\"\"Return the path to the Python executable in the virtual environment.\"\"\"\n    venv_path = os.path.join(project_root, \"env\")\n    if sys.platform.startswith(\"win\"):\n        return os.path.join(venv_path, \"Scripts\", \"python.exe\")",
        "detail": "blox.sites.utils.installdjangoapp",
        "documentation": {}
    },
    {
        "label": "get_python_executable",
        "kind": 2,
        "importPath": "blox.sites.utils.installdjangoapp",
        "description": "blox.sites.utils.installdjangoapp",
        "peekOfCode": "def get_python_executable(project_root):\n    \"\"\"Return the path to the Python executable in the virtual environment.\"\"\"\n    venv_path = os.path.join(project_root, \"env\")\n    if sys.platform.startswith(\"win\"):\n        return os.path.join(venv_path, \"Scripts\", \"python.exe\")\n    return os.path.join(venv_path, \"bin\", \"python\")\ndef install_django_app(app, project_root):\n    \"\"\"Create a Django app in a selected site using the Django startapp command.\"\"\"\n    app_name = f\"{app}_app\"\n    # Define paths",
        "detail": "blox.sites.utils.installdjangoapp",
        "documentation": {}
    },
    {
        "label": "install_django_app",
        "kind": 2,
        "importPath": "blox.sites.utils.installdjangoapp",
        "description": "blox.sites.utils.installdjangoapp",
        "peekOfCode": "def install_django_app(app, project_root):\n    \"\"\"Create a Django app in a selected site using the Django startapp command.\"\"\"\n    app_name = f\"{app}_app\"\n    # Define paths\n    sites_json_path = os.path.join(project_root, \"sites\", \"sites.json\")\n    site_path = os.path.join(project_root, \"sites\")\n    django_path = os.path.join(site_path, \"django\")\n    # Load app options from apps.txt\n    apps_txt_path = os.path.join(project_root, \"config\", \"apps.txt\")\n    with open(apps_txt_path, \"r\") as apps_file:",
        "detail": "blox.sites.utils.installdjangoapp",
        "documentation": {}
    },
    {
        "label": "load_existing_data",
        "kind": 2,
        "importPath": "blox.sites.utils.load_doc_config",
        "description": "blox.sites.utils.load_doc_config",
        "peekOfCode": "def load_existing_data():\n    \"\"\"Loads existing data from the JSON file or returns an empty list.\"\"\"\n    ensure_file_exists(DOCS_JSON_PATH, initial_data=[])\n    if os.path.exists(DOCS_JSON_PATH):\n        try:\n            with open(DOCS_JSON_PATH, \"r\") as json_file:\n                content = json_file.read().strip()\n                if not content:  # Handle empty file\n                    return []\n                return json.loads(content)",
        "detail": "blox.sites.utils.load_doc_config",
        "documentation": {}
    },
    {
        "label": "get_all_sites",
        "kind": 2,
        "importPath": "blox.sites.utils.load_doc_config",
        "description": "blox.sites.utils.load_doc_config",
        "peekOfCode": "def get_all_sites():\n    sites_json_path = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\n    ensure_file_exists(sites_json_path, initial_data=[])\n    with open(sites_json_path, \"r\") as json_file:\n        sites = json.load(json_file)\n    return sites",
        "detail": "blox.sites.utils.load_doc_config",
        "documentation": {}
    },
    {
        "label": "get_modules_from_file",
        "kind": 2,
        "importPath": "blox.sites.utils.module_structure",
        "description": "blox.sites.utils.module_structure",
        "peekOfCode": "def get_modules_from_file(custom_app_path, app_name):\n    \"\"\"Retrieve modules from modules.txt, skipping lines that start with '#'.\n    Args:\n        custom_app_path (str): The path to the app directory.\n    Returns:\n        list: List of module names found in modules.txt.\n    Raises:\n        FileNotFoundError: If modules.txt is not found in the specified path.\n    \"\"\"\n    # Locate modules.txt and the base path for modules",
        "detail": "blox.sites.utils.module_structure",
        "documentation": {}
    },
    {
        "label": "delete_associated_py_files",
        "kind": 2,
        "importPath": "blox.sites.utils.module_structure",
        "description": "blox.sites.utils.module_structure",
        "peekOfCode": "def delete_associated_py_files(folder_path, structure):\n    \"\"\"Delete specific .py files (e.g., views.py, models.py) in the specified folder and its subfolders.\"\"\"\n    for root, dirs, files in os.walk(folder_path):\n        for file in files:\n            if file.endswith(\".py\") and file.replace(\".py\", \"\") in structure:\n                os.remove(os.path.join(root, file))\ndef create_module_structure(app_path, custom_app_path, app_name):\n    structure = [\"views\", \"models\", \"tests\", \"serializers\", \"filters\"]\n    modules = get_modules_from_file(custom_app_path, app_name)\n    # Create all necessary folders and delete existing .py files",
        "detail": "blox.sites.utils.module_structure",
        "documentation": {}
    },
    {
        "label": "create_module_structure",
        "kind": 2,
        "importPath": "blox.sites.utils.module_structure",
        "description": "blox.sites.utils.module_structure",
        "peekOfCode": "def create_module_structure(app_path, custom_app_path, app_name):\n    structure = [\"views\", \"models\", \"tests\", \"serializers\", \"filters\"]\n    modules = get_modules_from_file(custom_app_path, app_name)\n    # Create all necessary folders and delete existing .py files\n    for folder in structure:\n        folder_path = os.path.join(app_path, folder)\n        os.makedirs(folder_path, exist_ok=True)\n        delete_associated_py_files(app_path, structure)\n    for module in modules:\n        module_snake_case = to_snake_case(module)",
        "detail": "blox.sites.utils.module_structure",
        "documentation": {}
    },
    {
        "label": "get_python_executable",
        "kind": 2,
        "importPath": "blox.sites.utils.uninstalldjangoapp",
        "description": "blox.sites.utils.uninstalldjangoapp",
        "peekOfCode": "def get_python_executable(project_root):\n    \"\"\"Return the path to the Python executable in the virtual environment.\"\"\"\n    venv_path = os.path.join(project_root, \"env\")\n    if sys.platform.startswith(\"win\"):\n        return os.path.join(venv_path, \"Scripts\", \"python.exe\")\n    return os.path.join(venv_path, \"bin\", \"python\")\ndef remove_app_from_installed_apps(app, app_name, settings_path):\n    \"\"\"Remove the app from INSTALLED_APPS and sys.path in the settings.py.\"\"\"\n    with open(settings_path, \"r\") as file:\n        settings_content = file.readlines()",
        "detail": "blox.sites.utils.uninstalldjangoapp",
        "documentation": {}
    },
    {
        "label": "remove_app_from_installed_apps",
        "kind": 2,
        "importPath": "blox.sites.utils.uninstalldjangoapp",
        "description": "blox.sites.utils.uninstalldjangoapp",
        "peekOfCode": "def remove_app_from_installed_apps(app, app_name, settings_path):\n    \"\"\"Remove the app from INSTALLED_APPS and sys.path in the settings.py.\"\"\"\n    with open(settings_path, \"r\") as file:\n        settings_content = file.readlines()\n    # Find the installed apps section\n    installed_apps_index = None\n    for i, line in enumerate(settings_content):\n        if \"INSTALLED_APPS = [\" in line:\n            installed_apps_index = i\n            break",
        "detail": "blox.sites.utils.uninstalldjangoapp",
        "documentation": {}
    },
    {
        "label": "remove_app_urls",
        "kind": 2,
        "importPath": "blox.sites.utils.uninstalldjangoapp",
        "description": "blox.sites.utils.uninstalldjangoapp",
        "peekOfCode": "def remove_app_urls(app, app_name, urls_path):\n    \"\"\"Remove the app's URL pattern from the project's main urls.py.\"\"\"\n    with open(urls_path, \"r\") as file:\n        urls_content = file.readlines()\n    # Remove the app's URL entry\n    updated_urls = []\n    app_found = False\n    for line in urls_content:\n        if f\"path('{app}/', include('{app_name}.urls')),\" in line:\n            app_found = True",
        "detail": "blox.sites.utils.uninstalldjangoapp",
        "documentation": {}
    },
    {
        "label": "uninstall_django_app",
        "kind": 2,
        "importPath": "blox.sites.utils.uninstalldjangoapp",
        "description": "blox.sites.utils.uninstalldjangoapp",
        "peekOfCode": "def uninstall_django_app(app, project_root):\n    \"\"\"Uninstall a Django app from a selected site by reversing actions taken during installation.\"\"\"\n    app_name = f\"{app}_app\"\n    site_path = os.path.join(project_root, \"sites\")\n    django_path = os.path.join(site_path, \"django\")\n    # Determine Python executable\n    get_python_executable(project_root)\n    # Check if app exists in the site\n    app_path = os.path.join(django_path, app_name)\n    if not os.path.exists(app_path):",
        "detail": "blox.sites.utils.uninstalldjangoapp",
        "documentation": {}
    },
    {
        "label": "dropsite",
        "kind": 2,
        "importPath": "blox.sites.drop",
        "description": "blox.sites.drop",
        "peekOfCode": "def dropsite(site):\n    \"\"\"Delete a site and remove its entry from sites.json.\"\"\"\n    # Load sites from sites.json\n    sites_json_path = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\n    ensure_file_exists(sites_json_path, initial_data=[])\n    if os.path.exists(sites_json_path):\n        with open(sites_json_path, \"r\") as json_file:\n            sites = json.load(json_file)\n    else:\n        click.echo(\"No sites found in sites.json.\")",
        "detail": "blox.sites.drop",
        "documentation": {}
    },
    {
        "label": "installapp",
        "kind": 2,
        "importPath": "blox.sites.installapp",
        "description": "blox.sites.installapp",
        "peekOfCode": "def installapp(site, app):\n    \"\"\"Install an app into a selected site and update sites.json.\"\"\"\n    # Load sites from sites.json\n    sites_json_path = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\n    ensure_file_exists(sites_json_path, initial_data=[])\n    if os.path.exists(sites_json_path):\n        with open(sites_json_path, \"r\") as json_file:\n            sites = json.load(json_file)\n    else:\n        click.echo(\"No sites found in sites.json.\")",
        "detail": "blox.sites.installapp",
        "documentation": {}
    },
    {
        "label": "installdoc",
        "kind": 2,
        "importPath": "blox.sites.installdoc",
        "description": "blox.sites.installdoc",
        "peekOfCode": "def installdoc(site, app, module, doc):\n    \"\"\"Install a doc into a selected app without modifying sites.json.\"\"\"\n    # Load sites from sites.json\n    sites_json_path = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\n    ensure_file_exists(sites_json_path, initial_data=[])\n    if os.path.exists(sites_json_path):\n        with open(sites_json_path, \"r\") as json_file:\n            json.load(json_file)\n    else:\n        click.echo(\"No sites found in sites.json.\")",
        "detail": "blox.sites.installdoc",
        "documentation": {}
    },
    {
        "label": "installmodule",
        "kind": 2,
        "importPath": "blox.sites.installmodule",
        "description": "blox.sites.installmodule",
        "peekOfCode": "def installmodule(site, app, module):\n    \"\"\"Install a module into a selected app and update sites.json.\"\"\"\n    # Load sites from sites.json\n    sites_json_path = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\n    ensure_file_exists(sites_json_path, initial_data=[])\n    if os.path.exists(sites_json_path):\n        with open(sites_json_path, \"r\") as json_file:\n            json.load(json_file)\n    else:\n        click.echo(\"No sites found in sites.json.\")",
        "detail": "blox.sites.installmodule",
        "documentation": {}
    },
    {
        "label": "movedoc",
        "kind": 2,
        "importPath": "blox.sites.movedoc",
        "description": "blox.sites.movedoc",
        "peekOfCode": "def movedoc(source_app, source_module, dest_app, dest_module, doc):\n    \"\"\"Move a doc from one app/module to another.\"\"\"\n    # Define source and destination paths\n    source_app_path = os.path.join(\n        PROJECT_ROOT, \"apps\", source_app, source_app, source_module, \"doctype\", doc\n    )\n    dest_app_path = os.path.join(PROJECT_ROOT, \"apps\", dest_app, dest_app, dest_module, \"doctype\")\n    # Validate the source document exists\n    if not os.path.exists(source_app_path):\n        click.echo(",
        "detail": "blox.sites.movedoc",
        "documentation": {}
    },
    {
        "label": "generate_random_password",
        "kind": 2,
        "importPath": "blox.sites.new",
        "description": "blox.sites.new",
        "peekOfCode": "def generate_random_password(length=12):\n    \"\"\"Generate a random password with letters and digits only (avoids special character issues).\"\"\"\n    characters = string.ascii_letters + string.digits  # No special characters\n    return ''.join(random.choice(characters) for _ in range(length))\n@click.command()\n@click.argument(\"site_name\")\ndef newsite(site_name):\n    \"\"\"Clone the mainsite repository, create a database, and add it to sites.json.\"\"\"\n    # Load existing sites.json or initialize an empty list\n    sites_json_path = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")",
        "detail": "blox.sites.new",
        "documentation": {}
    },
    {
        "label": "newsite",
        "kind": 2,
        "importPath": "blox.sites.new",
        "description": "blox.sites.new",
        "peekOfCode": "def newsite(site_name):\n    \"\"\"Clone the mainsite repository, create a database, and add it to sites.json.\"\"\"\n    # Load existing sites.json or initialize an empty list\n    sites_json_path = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\n    sites = []\n    ensure_file_exists(sites_json_path, initial_data=[])\n    try:\n        with open(sites_json_path, \"r\") as json_file:\n            content = json_file.read().strip()\n            if content:",
        "detail": "blox.sites.new",
        "documentation": {}
    },
    {
        "label": "uninstallapp",
        "kind": 2,
        "importPath": "blox.sites.uninstallapp",
        "description": "blox.sites.uninstallapp",
        "peekOfCode": "def uninstallapp(site, app):\n    \"\"\"Uninstall an app from a selected site and update sites.json.\"\"\"\n    # Load sites from sites.json\n    sites_json_path = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\n    ensure_file_exists(sites_json_path, initial_data=[])\n    if os.path.exists(sites_json_path):\n        with open(sites_json_path, \"r\") as json_file:\n            sites = json.load(json_file)\n    else:\n        click.echo(\"No sites found in sites.json.\")",
        "detail": "blox.sites.uninstallapp",
        "documentation": {}
    },
    {
        "label": "load_sites",
        "kind": 2,
        "importPath": "blox.sites.use",
        "description": "blox.sites.use",
        "peekOfCode": "def load_sites():\n    ensure_file_exists(SITES_JSON_PATH, initial_data=[])\n    if os.path.exists(SITES_JSON_PATH):\n        with open(SITES_JSON_PATH, \"r\") as json_file:\n            sites = json.load(json_file)\n            return sites\n    else:\n        click.echo(\"No sites found in sites.json.\")\n        return None\n# Function to set the default site within sites.json",
        "detail": "blox.sites.use",
        "documentation": {}
    },
    {
        "label": "set_default_site",
        "kind": 2,
        "importPath": "blox.sites.use",
        "description": "blox.sites.use",
        "peekOfCode": "def set_default_site(site_name):\n    sites = load_sites()\n    if not sites:\n        return  # Exit early if no sites were loaded\n    # Find the site by site_name\n    site = next((s for s in sites if s[\"site_name\"] == site_name), None)\n    if not site:\n        click.echo(f\"Error: Site '{site_name}' not found.\")\n        return  # Exit early if the site is not found\n    # Set the default status: true for the specified site, false for others",
        "detail": "blox.sites.use",
        "documentation": {}
    },
    {
        "label": "usesite",
        "kind": 2,
        "importPath": "blox.sites.use",
        "description": "blox.sites.use",
        "peekOfCode": "def usesite(sitename):\n    \"\"\"Sets the provided site as the default site.\"\"\"\n    set_default_site(sitename)",
        "detail": "blox.sites.use",
        "documentation": {}
    },
    {
        "label": "SITES_JSON_PATH",
        "kind": 5,
        "importPath": "blox.sites.use",
        "description": "blox.sites.use",
        "peekOfCode": "SITES_JSON_PATH = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\n# Function to read sites.json file\ndef load_sites():\n    ensure_file_exists(SITES_JSON_PATH, initial_data=[])\n    if os.path.exists(SITES_JSON_PATH):\n        with open(SITES_JSON_PATH, \"r\") as json_file:\n            sites = json.load(json_file)\n            return sites\n    else:\n        click.echo(\"No sites found in sites.json.\")",
        "detail": "blox.sites.use",
        "documentation": {}
    },
    {
        "label": "find_project_root",
        "kind": 2,
        "importPath": "blox.utils.config",
        "description": "blox.utils.config",
        "peekOfCode": "def find_project_root(current_path):\n    while current_path != \"/\":\n        if \"blox.config\" in os.listdir(current_path):\n            return current_path\n        current_path = os.path.dirname(current_path)\n    raise FileNotFoundError(\"Project root with 'blox.config' not found.\")\ndef find_django_path(site):\n    return os.path.join(PROJECT_ROOT, f\"sites/{site}/django\")\ndef write_running_ports(django_port, nextjs_port):\n    next_path = os.path.join(PROJECT_ROOT, \"sites\", \"nextjs\")",
        "detail": "blox.utils.config",
        "documentation": {}
    },
    {
        "label": "find_django_path",
        "kind": 2,
        "importPath": "blox.utils.config",
        "description": "blox.utils.config",
        "peekOfCode": "def find_django_path(site):\n    return os.path.join(PROJECT_ROOT, f\"sites/{site}/django\")\ndef write_running_ports(django_port, nextjs_port):\n    next_path = os.path.join(PROJECT_ROOT, \"sites\", \"nextjs\")\n    env_file_path = os.path.join(next_path, \".env.local\")\n    # Update the .env.local file\n    if not os.path.exists(env_file_path):\n        with open(env_file_path, \"w\") as f:\n            f.write(f\"NEXT_PUBLIC_DJANGO_PORT={django_port}\\n\")\n            f.write(f\"NEXT_PUBLIC_NEXTJS_PORT={nextjs_port}\\n\")",
        "detail": "blox.utils.config",
        "documentation": {}
    },
    {
        "label": "write_running_ports",
        "kind": 2,
        "importPath": "blox.utils.config",
        "description": "blox.utils.config",
        "peekOfCode": "def write_running_ports(django_port, nextjs_port):\n    next_path = os.path.join(PROJECT_ROOT, \"sites\", \"nextjs\")\n    env_file_path = os.path.join(next_path, \".env.local\")\n    # Update the .env.local file\n    if not os.path.exists(env_file_path):\n        with open(env_file_path, \"w\") as f:\n            f.write(f\"NEXT_PUBLIC_DJANGO_PORT={django_port}\\n\")\n            f.write(f\"NEXT_PUBLIC_NEXTJS_PORT={nextjs_port}\\n\")\n    else:\n        with open(env_file_path, \"r\") as f:",
        "detail": "blox.utils.config",
        "documentation": {}
    },
    {
        "label": "find_module_base_path",
        "kind": 2,
        "importPath": "blox.utils.config",
        "description": "blox.utils.config",
        "peekOfCode": "def find_module_base_path(app_name=None, module_name=None, app_path=None):\n    \"\"\"Locate the modules.txt file and determine the base path for modules, searching specified directories.\n    Args:\n        app_name (str): Name of the app to search within.\n        module_name (str, optional): Specific module name to look for within the app. Defaults to None.\n        app_path (str, optional): Path to the app directory. If not provided, defaults to APPS_PATH/app_name.\n    Returns:\n        tuple: Path to modules.txt and the base directory for modules, or (None, None) if not found.\n    \"\"\"\n    # Determine the base path for the app, defaults to APPS_PATH/app_name",
        "detail": "blox.utils.config",
        "documentation": {}
    },
    {
        "label": "PROJECT_ROOT",
        "kind": 5,
        "importPath": "blox.utils.config",
        "description": "blox.utils.config",
        "peekOfCode": "PROJECT_ROOT = find_project_root(os.getcwd())\nSETTINGS_PATH = os.path.join(PROJECT_ROOT, \"apps/core/django/backend/settings.py\")\nDB_PATH = os.path.join(PROJECT_ROOT, \"apps/core/django/db.sqlite3\")\nBASE_PATH = os.path.join(PROJECT_ROOT, \"apps/core/django\")\nJSON_FILE_PATH = os.path.join(PROJECT_ROOT, \"apps/core/django/data.json\")\nNEXTJS_PATH = os.path.join(PROJECT_ROOT, \"apps/core/nextjs\")\nAPPS_TXT_PATH = os.path.join(PROJECT_ROOT, \"config\", \"apps.txt\")\nSITES_JSON_PATH = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\nDOCS_JSON_PATH = os.path.join(PROJECT_ROOT, \"sites\", \"doctypes.json\")\nAPPS_PATH = os.path.join(PROJECT_ROOT, \"apps\")",
        "detail": "blox.utils.config",
        "documentation": {}
    },
    {
        "label": "SETTINGS_PATH",
        "kind": 5,
        "importPath": "blox.utils.config",
        "description": "blox.utils.config",
        "peekOfCode": "SETTINGS_PATH = os.path.join(PROJECT_ROOT, \"apps/core/django/backend/settings.py\")\nDB_PATH = os.path.join(PROJECT_ROOT, \"apps/core/django/db.sqlite3\")\nBASE_PATH = os.path.join(PROJECT_ROOT, \"apps/core/django\")\nJSON_FILE_PATH = os.path.join(PROJECT_ROOT, \"apps/core/django/data.json\")\nNEXTJS_PATH = os.path.join(PROJECT_ROOT, \"apps/core/nextjs\")\nAPPS_TXT_PATH = os.path.join(PROJECT_ROOT, \"config\", \"apps.txt\")\nSITES_JSON_PATH = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\nDOCS_JSON_PATH = os.path.join(PROJECT_ROOT, \"sites\", \"doctypes.json\")\nAPPS_PATH = os.path.join(PROJECT_ROOT, \"apps\")\nDJANGO_PATH =  os.path.join(PROJECT_ROOT, \"sites\", \"django\")",
        "detail": "blox.utils.config",
        "documentation": {}
    },
    {
        "label": "DB_PATH",
        "kind": 5,
        "importPath": "blox.utils.config",
        "description": "blox.utils.config",
        "peekOfCode": "DB_PATH = os.path.join(PROJECT_ROOT, \"apps/core/django/db.sqlite3\")\nBASE_PATH = os.path.join(PROJECT_ROOT, \"apps/core/django\")\nJSON_FILE_PATH = os.path.join(PROJECT_ROOT, \"apps/core/django/data.json\")\nNEXTJS_PATH = os.path.join(PROJECT_ROOT, \"apps/core/nextjs\")\nAPPS_TXT_PATH = os.path.join(PROJECT_ROOT, \"config\", \"apps.txt\")\nSITES_JSON_PATH = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\nDOCS_JSON_PATH = os.path.join(PROJECT_ROOT, \"sites\", \"doctypes.json\")\nAPPS_PATH = os.path.join(PROJECT_ROOT, \"apps\")\nDJANGO_PATH =  os.path.join(PROJECT_ROOT, \"sites\", \"django\")\nDEFAULT_SITE = get_default_site_info(PROJECT_ROOT)",
        "detail": "blox.utils.config",
        "documentation": {}
    },
    {
        "label": "BASE_PATH",
        "kind": 5,
        "importPath": "blox.utils.config",
        "description": "blox.utils.config",
        "peekOfCode": "BASE_PATH = os.path.join(PROJECT_ROOT, \"apps/core/django\")\nJSON_FILE_PATH = os.path.join(PROJECT_ROOT, \"apps/core/django/data.json\")\nNEXTJS_PATH = os.path.join(PROJECT_ROOT, \"apps/core/nextjs\")\nAPPS_TXT_PATH = os.path.join(PROJECT_ROOT, \"config\", \"apps.txt\")\nSITES_JSON_PATH = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\nDOCS_JSON_PATH = os.path.join(PROJECT_ROOT, \"sites\", \"doctypes.json\")\nAPPS_PATH = os.path.join(PROJECT_ROOT, \"apps\")\nDJANGO_PATH =  os.path.join(PROJECT_ROOT, \"sites\", \"django\")\nDEFAULT_SITE = get_default_site_info(PROJECT_ROOT)\nSITES_PATH = os.path.join(PROJECT_ROOT, \"sites\")",
        "detail": "blox.utils.config",
        "documentation": {}
    },
    {
        "label": "JSON_FILE_PATH",
        "kind": 5,
        "importPath": "blox.utils.config",
        "description": "blox.utils.config",
        "peekOfCode": "JSON_FILE_PATH = os.path.join(PROJECT_ROOT, \"apps/core/django/data.json\")\nNEXTJS_PATH = os.path.join(PROJECT_ROOT, \"apps/core/nextjs\")\nAPPS_TXT_PATH = os.path.join(PROJECT_ROOT, \"config\", \"apps.txt\")\nSITES_JSON_PATH = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\nDOCS_JSON_PATH = os.path.join(PROJECT_ROOT, \"sites\", \"doctypes.json\")\nAPPS_PATH = os.path.join(PROJECT_ROOT, \"apps\")\nDJANGO_PATH =  os.path.join(PROJECT_ROOT, \"sites\", \"django\")\nDEFAULT_SITE = get_default_site_info(PROJECT_ROOT)\nSITES_PATH = os.path.join(PROJECT_ROOT, \"sites\")",
        "detail": "blox.utils.config",
        "documentation": {}
    },
    {
        "label": "NEXTJS_PATH",
        "kind": 5,
        "importPath": "blox.utils.config",
        "description": "blox.utils.config",
        "peekOfCode": "NEXTJS_PATH = os.path.join(PROJECT_ROOT, \"apps/core/nextjs\")\nAPPS_TXT_PATH = os.path.join(PROJECT_ROOT, \"config\", \"apps.txt\")\nSITES_JSON_PATH = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\nDOCS_JSON_PATH = os.path.join(PROJECT_ROOT, \"sites\", \"doctypes.json\")\nAPPS_PATH = os.path.join(PROJECT_ROOT, \"apps\")\nDJANGO_PATH =  os.path.join(PROJECT_ROOT, \"sites\", \"django\")\nDEFAULT_SITE = get_default_site_info(PROJECT_ROOT)\nSITES_PATH = os.path.join(PROJECT_ROOT, \"sites\")",
        "detail": "blox.utils.config",
        "documentation": {}
    },
    {
        "label": "APPS_TXT_PATH",
        "kind": 5,
        "importPath": "blox.utils.config",
        "description": "blox.utils.config",
        "peekOfCode": "APPS_TXT_PATH = os.path.join(PROJECT_ROOT, \"config\", \"apps.txt\")\nSITES_JSON_PATH = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\nDOCS_JSON_PATH = os.path.join(PROJECT_ROOT, \"sites\", \"doctypes.json\")\nAPPS_PATH = os.path.join(PROJECT_ROOT, \"apps\")\nDJANGO_PATH =  os.path.join(PROJECT_ROOT, \"sites\", \"django\")\nDEFAULT_SITE = get_default_site_info(PROJECT_ROOT)\nSITES_PATH = os.path.join(PROJECT_ROOT, \"sites\")",
        "detail": "blox.utils.config",
        "documentation": {}
    },
    {
        "label": "SITES_JSON_PATH",
        "kind": 5,
        "importPath": "blox.utils.config",
        "description": "blox.utils.config",
        "peekOfCode": "SITES_JSON_PATH = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\nDOCS_JSON_PATH = os.path.join(PROJECT_ROOT, \"sites\", \"doctypes.json\")\nAPPS_PATH = os.path.join(PROJECT_ROOT, \"apps\")\nDJANGO_PATH =  os.path.join(PROJECT_ROOT, \"sites\", \"django\")\nDEFAULT_SITE = get_default_site_info(PROJECT_ROOT)\nSITES_PATH = os.path.join(PROJECT_ROOT, \"sites\")",
        "detail": "blox.utils.config",
        "documentation": {}
    },
    {
        "label": "DOCS_JSON_PATH",
        "kind": 5,
        "importPath": "blox.utils.config",
        "description": "blox.utils.config",
        "peekOfCode": "DOCS_JSON_PATH = os.path.join(PROJECT_ROOT, \"sites\", \"doctypes.json\")\nAPPS_PATH = os.path.join(PROJECT_ROOT, \"apps\")\nDJANGO_PATH =  os.path.join(PROJECT_ROOT, \"sites\", \"django\")\nDEFAULT_SITE = get_default_site_info(PROJECT_ROOT)\nSITES_PATH = os.path.join(PROJECT_ROOT, \"sites\")",
        "detail": "blox.utils.config",
        "documentation": {}
    },
    {
        "label": "APPS_PATH",
        "kind": 5,
        "importPath": "blox.utils.config",
        "description": "blox.utils.config",
        "peekOfCode": "APPS_PATH = os.path.join(PROJECT_ROOT, \"apps\")\nDJANGO_PATH =  os.path.join(PROJECT_ROOT, \"sites\", \"django\")\nDEFAULT_SITE = get_default_site_info(PROJECT_ROOT)\nSITES_PATH = os.path.join(PROJECT_ROOT, \"sites\")",
        "detail": "blox.utils.config",
        "documentation": {}
    },
    {
        "label": "DJANGO_PATH",
        "kind": 5,
        "importPath": "blox.utils.config",
        "description": "blox.utils.config",
        "peekOfCode": "DJANGO_PATH =  os.path.join(PROJECT_ROOT, \"sites\", \"django\")\nDEFAULT_SITE = get_default_site_info(PROJECT_ROOT)\nSITES_PATH = os.path.join(PROJECT_ROOT, \"sites\")",
        "detail": "blox.utils.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SITE",
        "kind": 5,
        "importPath": "blox.utils.config",
        "description": "blox.utils.config",
        "peekOfCode": "DEFAULT_SITE = get_default_site_info(PROJECT_ROOT)\nSITES_PATH = os.path.join(PROJECT_ROOT, \"sites\")",
        "detail": "blox.utils.config",
        "documentation": {}
    },
    {
        "label": "SITES_PATH",
        "kind": 5,
        "importPath": "blox.utils.config",
        "description": "blox.utils.config",
        "peekOfCode": "SITES_PATH = os.path.join(PROJECT_ROOT, \"sites\")",
        "detail": "blox.utils.config",
        "documentation": {}
    },
    {
        "label": "get_default_site_info",
        "kind": 2,
        "importPath": "blox.utils.default_site",
        "description": "blox.utils.default_site",
        "peekOfCode": "def get_default_site_info(PROJECT_ROOT):\n    \"\"\"\n    Utility function to get the Django path and site name of the default site.\n    :param PROJECT_ROOT: The root directory of the project\n    :return: A tuple (django_path, site_name) if a default site is found, otherwise None\n    \"\"\"\n    sites_json_path = os.path.join(PROJECT_ROOT, \"sites\", \"sites.json\")\n    if not os.path.exists(sites_json_path):\n        click.echo(\"No sites found in sites.json.\")\n        return None",
        "detail": "blox.utils.default_site",
        "documentation": {}
    },
    {
        "label": "ensure_file_exists",
        "kind": 2,
        "importPath": "blox.utils.file_operations",
        "description": "blox.utils.file_operations",
        "peekOfCode": "def ensure_file_exists(file_path, initial_data=None):\n    \"\"\"\n    Ensure the given file exists, creating the necessary directory and initializing the file with `initial_data` if not.\n    :param file_path: The path of the file to ensure exists.\n    :param initial_data: The data to initialize the file with (default is an empty list).\n    \"\"\"\n    # Ensure the directory exists\n    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    # If the file doesn't exist, create it and initialize with `initial_data`\n    if not os.path.exists(file_path):",
        "detail": "blox.utils.file_operations",
        "documentation": {}
    },
    {
        "label": "initialize_django_env",
        "kind": 2,
        "importPath": "blox.utils.initialize_django",
        "description": "blox.utils.initialize_django",
        "peekOfCode": "def initialize_django_env():\n    \"\"\"\n    Initialize the Django environment from outside the project directory.\n    :param PROJECT_ROOT: The root directory of your Django project.\n    :param DJANGO_PATH: Path where Django's `manage.py` or settings module is located.\n    \"\"\"\n    # Validate project root and Django path\n    if not os.path.isdir(PROJECT_ROOT):\n        raise ValueError(f\"Invalid PROJECT_ROOT: {PROJECT_ROOT} does not exist.\")\n    if not os.path.isdir(DJANGO_PATH):",
        "detail": "blox.utils.initialize_django",
        "documentation": {}
    },
    {
        "label": "register_to_model_json",
        "kind": 2,
        "importPath": "blox.utils.register_models",
        "description": "blox.utils.register_models",
        "peekOfCode": "def register_to_model_json(\n    app_id, app_name, module_id, module_name, doc_id, doc_name, django_path\n):\n    \"\"\"\n    Registers a model in config/models.json grouped by app and module with unique entries.\n    Args:\n        app_id (str): The app's identifier.\n        app_name (str): The app's display name.\n        module_id (str): The module's identifier.\n        module_name (str): The module's display name.",
        "detail": "blox.utils.register_models",
        "documentation": {}
    },
    {
        "label": "get_app_module_for_model",
        "kind": 2,
        "importPath": "blox.utils.register_models",
        "description": "blox.utils.register_models",
        "peekOfCode": "def get_app_module_for_model(doc_id, django_path):\n    \"\"\"\n    Retrieves the app and module names for a given model (doc_id).\n    Args:\n        doc_id (str): The model's document identifier.\n        django_path (str): Path to the Django project, used to locate config/models.json.\n    Returns:\n        tuple: A tuple containing (app_id, module_id) or (None, None) if not found.\n    \"\"\"\n    # Load models.json data",
        "detail": "blox.utils.register_models",
        "documentation": {}
    },
    {
        "label": "get_python_executable",
        "kind": 2,
        "importPath": "blox.utils.run_process",
        "description": "blox.utils.run_process",
        "peekOfCode": "def get_python_executable():\n    venv_path = os.path.join(PROJECT_ROOT, \"env\")\n    if not os.path.exists(venv_path):\n        click.echo(\"Virtual environment not found. Please run 'blox setup' first.\")\n        return\n    python_executable = os.path.join(venv_path, \"bin\", \"python3\")\n    if sys.platform.startswith(\"win\"):\n        python_executable = os.path.join(venv_path, \"Scripts\", \"python.exe\")\n    return python_executable\ndef run_subprocess(command, cwd=None):",
        "detail": "blox.utils.run_process",
        "documentation": {}
    },
    {
        "label": "run_subprocess",
        "kind": 2,
        "importPath": "blox.utils.run_process",
        "description": "blox.utils.run_process",
        "peekOfCode": "def run_subprocess(command, cwd=None):\n    \"\"\"Run a subprocess command, using cmd.exe on Windows.\"\"\"\n    if sys.platform.startswith(\"win\"):\n        return subprocess.Popen(\n            [\"cmd.exe\", \"/c\"] + command,\n            cwd=cwd,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True,\n        )",
        "detail": "blox.utils.run_process",
        "documentation": {}
    },
    {
        "label": "run_subprocess",
        "kind": 2,
        "importPath": "blox.utils.subprocess",
        "description": "blox.utils.subprocess",
        "peekOfCode": "def run_subprocess(command, cwd=None):\n    \"\"\"Run a subprocess command within the virtual environment.\"\"\"\n    project_root = cwd or os.getcwd()\n    venv_activate = activate_virtualenv(project_root)\n    if sys.platform.startswith(\"win\"):\n        full_command = f\"{venv_activate} && \" + \" \".join(command)\n        subprocess.check_call([\"cmd.exe\", \"/c\"] + full_command.split(), cwd=cwd)\n    else:\n        full_command = f\"source {venv_activate} && \" + \" \".join(command)\n        subprocess.check_call(full_command, cwd=cwd, shell=True)",
        "detail": "blox.utils.subprocess",
        "documentation": {}
    },
    {
        "label": "get_python_executable",
        "kind": 2,
        "importPath": "blox.utils.subprocess",
        "description": "blox.utils.subprocess",
        "peekOfCode": "def get_python_executable(project_root):\n    \"\"\"Return the path to the Python executable in the virtual environment.\"\"\"\n    venv_path = os.path.join(project_root, \"env\")\n    if sys.platform.startswith(\"win\"):\n        return os.path.join(venv_path, \"Scripts\", \"python.exe\")\n    return os.path.join(venv_path, \"bin\", \"python\")\ndef activate_virtualenv(project_root):\n    \"\"\"Return the path to the activate script of the virtual environment.\"\"\"\n    if sys.platform.startswith(\"win\"):\n        return os.path.join(project_root, \"env\", \"Scripts\", \"activate\")",
        "detail": "blox.utils.subprocess",
        "documentation": {}
    },
    {
        "label": "activate_virtualenv",
        "kind": 2,
        "importPath": "blox.utils.subprocess",
        "description": "blox.utils.subprocess",
        "peekOfCode": "def activate_virtualenv(project_root):\n    \"\"\"Return the path to the activate script of the virtual environment.\"\"\"\n    if sys.platform.startswith(\"win\"):\n        return os.path.join(project_root, \"env\", \"Scripts\", \"activate\")\n    return os.path.join(project_root, \"env\", \"bin\", \"activate\")",
        "detail": "blox.utils.subprocess",
        "documentation": {}
    },
    {
        "label": "to_snake_case",
        "kind": 2,
        "importPath": "blox.utils.text",
        "description": "blox.utils.text",
        "peekOfCode": "def to_snake_case(name):\n    \"\"\"Convert a string to snake_case by replacing spaces with underscores and lowering the case.\n    Args:\n        name (str): The name to convert.\n    Returns:\n        str: The converted name in snake_case.\n    \"\"\"\n    # Replace spaces with underscores and convert to lowercase\n    return name.replace(\" \", \"_\").lower()\ndef underscore_to_titlecase(underscore_str):",
        "detail": "blox.utils.text",
        "documentation": {}
    },
    {
        "label": "underscore_to_titlecase",
        "kind": 2,
        "importPath": "blox.utils.text",
        "description": "blox.utils.text",
        "peekOfCode": "def underscore_to_titlecase(underscore_str):\n    \"\"\"Convert underscore string to title case.\"\"\"\n    return re.sub(r\"_(.)\", lambda m: m.group(1).upper(), underscore_str.title())\ndef underscore_to_titlecase_main(underscore_str):\n    \"\"\"Convert an underscore-separated string to title case with spaces.\"\"\"\n    # Replace underscores with spaces, then convert to title case\n    return re.sub(r\"_+\", \" \", underscore_str).title()\ndef to_titlecase_no_space(input_str):\n    \"\"\"Convert a string with underscores or whitespace to TitleCase with no spaces.\n    Args:",
        "detail": "blox.utils.text",
        "documentation": {}
    },
    {
        "label": "underscore_to_titlecase_main",
        "kind": 2,
        "importPath": "blox.utils.text",
        "description": "blox.utils.text",
        "peekOfCode": "def underscore_to_titlecase_main(underscore_str):\n    \"\"\"Convert an underscore-separated string to title case with spaces.\"\"\"\n    # Replace underscores with spaces, then convert to title case\n    return re.sub(r\"_+\", \" \", underscore_str).title()\ndef to_titlecase_no_space(input_str):\n    \"\"\"Convert a string with underscores or whitespace to TitleCase with no spaces.\n    Args:\n        input_str (str): The string to convert (e.g., \"my example_string\").\n    Returns:\n        str: The converted string in TitleCase with no spaces (e.g., \"MyExampleString\").",
        "detail": "blox.utils.text",
        "documentation": {}
    },
    {
        "label": "to_titlecase_no_space",
        "kind": 2,
        "importPath": "blox.utils.text",
        "description": "blox.utils.text",
        "peekOfCode": "def to_titlecase_no_space(input_str):\n    \"\"\"Convert a string with underscores or whitespace to TitleCase with no spaces.\n    Args:\n        input_str (str): The string to convert (e.g., \"my example_string\").\n    Returns:\n        str: The converted string in TitleCase with no spaces (e.g., \"MyExampleString\").\n    \"\"\"\n    # Replace spaces with underscores, then apply TitleCase conversion\n    return re.sub(r\"(?:^|_| )(.)\", lambda m: m.group(1).upper(), input_str.strip())",
        "detail": "blox.utils.text",
        "documentation": {}
    },
    {
        "label": "cli",
        "kind": 2,
        "importPath": "blox.cli",
        "description": "blox.cli",
        "peekOfCode": "def cli() -> None:\n    pass\ncli.add_command(newapp, name='new-app')\ncli.add_command(dropapp, name='drop-app')\ncli.add_command(getapp, name='get-app')\ncli.add_command(newmodule, name='new-module')\ncli.add_command(dropmodule, name='drop-module')\ncli.add_command(newdoc, name='new-doc')\ncli.add_command(dropdoc, name='drop-doc')\ncli.add_command(movedoc, name='move-doc')",
        "detail": "blox.cli",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "sites.django.backend.asgi",
        "description": "sites.django.backend.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "sites.django.backend.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nPROJECT_PATH = BASE_DIR.parent.parent\nCONFIG_PATH = os.path.join(PROJECT_PATH, \"config\")\nSITE_PATH = os.path.join(PROJECT_PATH, \"sites\")\nsys.path.append(str(PROJECT_PATH)) \n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = config(\n    \"SECRET_KEY\",",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "PROJECT_PATH",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "PROJECT_PATH = BASE_DIR.parent.parent\nCONFIG_PATH = os.path.join(PROJECT_PATH, \"config\")\nSITE_PATH = os.path.join(PROJECT_PATH, \"sites\")\nsys.path.append(str(PROJECT_PATH)) \n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = config(\n    \"SECRET_KEY\",\n    default=\"django-insecure-j7#rvr!*&u(2f*x28y2+m7qlgg6_dwryv%m1*a@yhp3u58qatp\",",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "CONFIG_PATH",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "CONFIG_PATH = os.path.join(PROJECT_PATH, \"config\")\nSITE_PATH = os.path.join(PROJECT_PATH, \"sites\")\nsys.path.append(str(PROJECT_PATH)) \n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = config(\n    \"SECRET_KEY\",\n    default=\"django-insecure-j7#rvr!*&u(2f*x28y2+m7qlgg6_dwryv%m1*a@yhp3u58qatp\",\n)",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "SITE_PATH",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "SITE_PATH = os.path.join(PROJECT_PATH, \"sites\")\nsys.path.append(str(PROJECT_PATH)) \n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = config(\n    \"SECRET_KEY\",\n    default=\"django-insecure-j7#rvr!*&u(2f*x28y2+m7qlgg6_dwryv%m1*a@yhp3u58qatp\",\n)\n# SECURITY WARNING: don't run with debug turned on in production!",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "SECRET_KEY = config(\n    \"SECRET_KEY\",\n    default=\"django-insecure-j7#rvr!*&u(2f*x28y2+m7qlgg6_dwryv%m1*a@yhp3u58qatp\",\n)\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"rest_framework\",",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"rest_framework\",\n    \"rest_framework.authtoken\",\n    \"corsheaders\",",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'core.middleware.TenantMiddleware',\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"allauth.account.middleware.AccountMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "ROOT_URLCONF = \"backend.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "WSGI_APPLICATION = \"backend.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"/static/\"\nMEDIA_URL = \"/media/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static/\")\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"/static/\"\nMEDIA_URL = \"/media/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static/\")\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\n# Default primary key field type",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"/static/\"\nMEDIA_URL = \"/media/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static/\")\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = \"/static/\"\nMEDIA_URL = \"/media/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static/\")\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "STATIC_URL = \"/static/\"\nMEDIA_URL = \"/media/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static/\")\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# AUTH_USER_MODEL = 'api.User'\nREST_FRAMEWORK = {\n    \"DEFAULT_RENDERER_CLASSES\": [",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "MEDIA_URL = \"/media/\"\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static/\")\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# AUTH_USER_MODEL = 'api.User'\nREST_FRAMEWORK = {\n    \"DEFAULT_RENDERER_CLASSES\": [\n        \"rest_framework.renderers.JSONRenderer\",",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, \"static/\")\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# AUTH_USER_MODEL = 'api.User'\nREST_FRAMEWORK = {\n    \"DEFAULT_RENDERER_CLASSES\": [\n        \"rest_framework.renderers.JSONRenderer\",\n    ],",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, \"media\")\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# AUTH_USER_MODEL = 'api.User'\nREST_FRAMEWORK = {\n    \"DEFAULT_RENDERER_CLASSES\": [\n        \"rest_framework.renderers.JSONRenderer\",\n    ],\n    \"DEFAULT_PARSER_CLASSES\": [",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# AUTH_USER_MODEL = 'api.User'\nREST_FRAMEWORK = {\n    \"DEFAULT_RENDERER_CLASSES\": [\n        \"rest_framework.renderers.JSONRenderer\",\n    ],\n    \"DEFAULT_PARSER_CLASSES\": [\n        \"rest_framework.parsers.JSONParser\",\n        \"rest_framework.parsers.FormParser\",\n        \"rest_framework.parsers.MultiPartParser\",",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    \"DEFAULT_RENDERER_CLASSES\": [\n        \"rest_framework.renderers.JSONRenderer\",\n    ],\n    \"DEFAULT_PARSER_CLASSES\": [\n        \"rest_framework.parsers.JSONParser\",\n        \"rest_framework.parsers.FormParser\",\n        \"rest_framework.parsers.MultiPartParser\",\n    ],\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOW_METHODS = [\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"OPTIONS\"]\nCORS_ALLOW_HEADERS = [\"Content-Type\", \"Authorization\", \"X-Tenant\"]\n# CORS_ORIGIN_WHITELIST = [\n#     'http://localhost:3000',\n# ]\n# URL configuration\nLOGIN_REDIRECT_URL = \"/\"\nLOGOUT_REDIRECT_URL = \"/\"\n# ----------------------------------------------------------------------",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_METHODS",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "CORS_ALLOW_METHODS = [\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"OPTIONS\"]\nCORS_ALLOW_HEADERS = [\"Content-Type\", \"Authorization\", \"X-Tenant\"]\n# CORS_ORIGIN_WHITELIST = [\n#     'http://localhost:3000',\n# ]\n# URL configuration\nLOGIN_REDIRECT_URL = \"/\"\nLOGOUT_REDIRECT_URL = \"/\"\n# ----------------------------------------------------------------------\n# Auth and user",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_HEADERS",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "CORS_ALLOW_HEADERS = [\"Content-Type\", \"Authorization\", \"X-Tenant\"]\n# CORS_ORIGIN_WHITELIST = [\n#     'http://localhost:3000',\n# ]\n# URL configuration\nLOGIN_REDIRECT_URL = \"/\"\nLOGOUT_REDIRECT_URL = \"/\"\n# ----------------------------------------------------------------------\n# Auth and user\n# ----------------------------------------------------------------------",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = \"/\"\nLOGOUT_REDIRECT_URL = \"/\"\n# ----------------------------------------------------------------------\n# Auth and user\n# ----------------------------------------------------------------------\nAUTH_USER_MODEL = \"core.User\"\nREST_USE_JWT = True\n# ----------------------------------------------------------------------\n# Email settings (replace with your email configuration)\n# ----------------------------------------------------------------------",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "LOGOUT_REDIRECT_URL = \"/\"\n# ----------------------------------------------------------------------\n# Auth and user\n# ----------------------------------------------------------------------\nAUTH_USER_MODEL = \"core.User\"\nREST_USE_JWT = True\n# ----------------------------------------------------------------------\n# Email settings (replace with your email configuration)\n# ----------------------------------------------------------------------\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "AUTH_USER_MODEL = \"core.User\"\nREST_USE_JWT = True\n# ----------------------------------------------------------------------\n# Email settings (replace with your email configuration)\n# ----------------------------------------------------------------------\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = config(\"EMAIL_HOST\", default=\"smtp.example.com\")\nEMAIL_PORT = config(\"EMAIL_PORT\", default=587, cast=int)\nEMAIL_HOST_USER = config(\"EMAIL_HOST_USER\", default=\"user@example.com\")\nEMAIL_HOST_PASSWORD = config(\"EMAIL_HOST_PASSWORD\", default=\"password\")",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "REST_USE_JWT",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "REST_USE_JWT = True\n# ----------------------------------------------------------------------\n# Email settings (replace with your email configuration)\n# ----------------------------------------------------------------------\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = config(\"EMAIL_HOST\", default=\"smtp.example.com\")\nEMAIL_PORT = config(\"EMAIL_PORT\", default=587, cast=int)\nEMAIL_HOST_USER = config(\"EMAIL_HOST_USER\", default=\"user@example.com\")\nEMAIL_HOST_PASSWORD = config(\"EMAIL_HOST_PASSWORD\", default=\"password\")\nEMAIL_USE_TLS = config(\"EMAIL_USE_TLS\", default=True, cast=bool)",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "EMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = config(\"EMAIL_HOST\", default=\"smtp.example.com\")\nEMAIL_PORT = config(\"EMAIL_PORT\", default=587, cast=int)\nEMAIL_HOST_USER = config(\"EMAIL_HOST_USER\", default=\"user@example.com\")\nEMAIL_HOST_PASSWORD = config(\"EMAIL_HOST_PASSWORD\", default=\"password\")\nEMAIL_USE_TLS = config(\"EMAIL_USE_TLS\", default=True, cast=bool)\nEMAIL_USE_SSL = config(\"EMAIL_USE_SSL\", default=False, cast=bool)\nEMAIL_SSL_CERTFILE = config(\"EMAIL_SSL_CERTFILE\", default=None)\nEMAIL_SSL_KEYFILE = config(\"EMAIL_SSL_KEYFILE\", default=None)\nEMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "EMAIL_HOST = config(\"EMAIL_HOST\", default=\"smtp.example.com\")\nEMAIL_PORT = config(\"EMAIL_PORT\", default=587, cast=int)\nEMAIL_HOST_USER = config(\"EMAIL_HOST_USER\", default=\"user@example.com\")\nEMAIL_HOST_PASSWORD = config(\"EMAIL_HOST_PASSWORD\", default=\"password\")\nEMAIL_USE_TLS = config(\"EMAIL_USE_TLS\", default=True, cast=bool)\nEMAIL_USE_SSL = config(\"EMAIL_USE_SSL\", default=False, cast=bool)\nEMAIL_SSL_CERTFILE = config(\"EMAIL_SSL_CERTFILE\", default=None)\nEMAIL_SSL_KEYFILE = config(\"EMAIL_SSL_KEYFILE\", default=None)\nEMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)\nEMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\", default=None)",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "EMAIL_PORT = config(\"EMAIL_PORT\", default=587, cast=int)\nEMAIL_HOST_USER = config(\"EMAIL_HOST_USER\", default=\"user@example.com\")\nEMAIL_HOST_PASSWORD = config(\"EMAIL_HOST_PASSWORD\", default=\"password\")\nEMAIL_USE_TLS = config(\"EMAIL_USE_TLS\", default=True, cast=bool)\nEMAIL_USE_SSL = config(\"EMAIL_USE_SSL\", default=False, cast=bool)\nEMAIL_SSL_CERTFILE = config(\"EMAIL_SSL_CERTFILE\", default=None)\nEMAIL_SSL_KEYFILE = config(\"EMAIL_SSL_KEYFILE\", default=None)\nEMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)\nEMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\", default=None)\nSERVER_EMAIL = config(\"SERVER_EMAIL\", default=\"server@example.com\")",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "EMAIL_HOST_USER = config(\"EMAIL_HOST_USER\", default=\"user@example.com\")\nEMAIL_HOST_PASSWORD = config(\"EMAIL_HOST_PASSWORD\", default=\"password\")\nEMAIL_USE_TLS = config(\"EMAIL_USE_TLS\", default=True, cast=bool)\nEMAIL_USE_SSL = config(\"EMAIL_USE_SSL\", default=False, cast=bool)\nEMAIL_SSL_CERTFILE = config(\"EMAIL_SSL_CERTFILE\", default=None)\nEMAIL_SSL_KEYFILE = config(\"EMAIL_SSL_KEYFILE\", default=None)\nEMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)\nEMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\", default=None)\nSERVER_EMAIL = config(\"SERVER_EMAIL\", default=\"server@example.com\")\nDEFAULT_FROM_EMAIL = config(\"DEFAULT_FROM_EMAIL\", default=\"webmaster@example.com\")",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = config(\"EMAIL_HOST_PASSWORD\", default=\"password\")\nEMAIL_USE_TLS = config(\"EMAIL_USE_TLS\", default=True, cast=bool)\nEMAIL_USE_SSL = config(\"EMAIL_USE_SSL\", default=False, cast=bool)\nEMAIL_SSL_CERTFILE = config(\"EMAIL_SSL_CERTFILE\", default=None)\nEMAIL_SSL_KEYFILE = config(\"EMAIL_SSL_KEYFILE\", default=None)\nEMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)\nEMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\", default=None)\nSERVER_EMAIL = config(\"SERVER_EMAIL\", default=\"server@example.com\")\nDEFAULT_FROM_EMAIL = config(\"DEFAULT_FROM_EMAIL\", default=\"webmaster@example.com\")\n# ----------------------------------------------------------------------",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "EMAIL_USE_TLS = config(\"EMAIL_USE_TLS\", default=True, cast=bool)\nEMAIL_USE_SSL = config(\"EMAIL_USE_SSL\", default=False, cast=bool)\nEMAIL_SSL_CERTFILE = config(\"EMAIL_SSL_CERTFILE\", default=None)\nEMAIL_SSL_KEYFILE = config(\"EMAIL_SSL_KEYFILE\", default=None)\nEMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)\nEMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\", default=None)\nSERVER_EMAIL = config(\"SERVER_EMAIL\", default=\"server@example.com\")\nDEFAULT_FROM_EMAIL = config(\"DEFAULT_FROM_EMAIL\", default=\"webmaster@example.com\")\n# ----------------------------------------------------------------------\n# Configure allauth settings",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_SSL",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "EMAIL_USE_SSL = config(\"EMAIL_USE_SSL\", default=False, cast=bool)\nEMAIL_SSL_CERTFILE = config(\"EMAIL_SSL_CERTFILE\", default=None)\nEMAIL_SSL_KEYFILE = config(\"EMAIL_SSL_KEYFILE\", default=None)\nEMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)\nEMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\", default=None)\nSERVER_EMAIL = config(\"SERVER_EMAIL\", default=\"server@example.com\")\nDEFAULT_FROM_EMAIL = config(\"DEFAULT_FROM_EMAIL\", default=\"webmaster@example.com\")\n# ----------------------------------------------------------------------\n# Configure allauth settings\n# ----------------------------------------------------------------------",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_SSL_CERTFILE",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "EMAIL_SSL_CERTFILE = config(\"EMAIL_SSL_CERTFILE\", default=None)\nEMAIL_SSL_KEYFILE = config(\"EMAIL_SSL_KEYFILE\", default=None)\nEMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)\nEMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\", default=None)\nSERVER_EMAIL = config(\"SERVER_EMAIL\", default=\"server@example.com\")\nDEFAULT_FROM_EMAIL = config(\"DEFAULT_FROM_EMAIL\", default=\"webmaster@example.com\")\n# ----------------------------------------------------------------------\n# Configure allauth settings\n# ----------------------------------------------------------------------\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_SSL_KEYFILE",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "EMAIL_SSL_KEYFILE = config(\"EMAIL_SSL_KEYFILE\", default=None)\nEMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)\nEMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\", default=None)\nSERVER_EMAIL = config(\"SERVER_EMAIL\", default=\"server@example.com\")\nDEFAULT_FROM_EMAIL = config(\"DEFAULT_FROM_EMAIL\", default=\"webmaster@example.com\")\n# ----------------------------------------------------------------------\n# Configure allauth settings\n# ----------------------------------------------------------------------\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_TIMEOUT",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "EMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)\nEMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\", default=None)\nSERVER_EMAIL = config(\"SERVER_EMAIL\", default=\"server@example.com\")\nDEFAULT_FROM_EMAIL = config(\"DEFAULT_FROM_EMAIL\", default=\"webmaster@example.com\")\n# ----------------------------------------------------------------------\n# Configure allauth settings\n# ----------------------------------------------------------------------\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7\nACCOUNT_AUTHENTICATION_METHOD = \"email\"",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_SSL_CAFILE",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "EMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\", default=None)\nSERVER_EMAIL = config(\"SERVER_EMAIL\", default=\"server@example.com\")\nDEFAULT_FROM_EMAIL = config(\"DEFAULT_FROM_EMAIL\", default=\"webmaster@example.com\")\n# ----------------------------------------------------------------------\n# Configure allauth settings\n# ----------------------------------------------------------------------\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7\nACCOUNT_AUTHENTICATION_METHOD = \"email\"\nACCOUNT_EMAIL_REQUIRED = True",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "SERVER_EMAIL",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "SERVER_EMAIL = config(\"SERVER_EMAIL\", default=\"server@example.com\")\nDEFAULT_FROM_EMAIL = config(\"DEFAULT_FROM_EMAIL\", default=\"webmaster@example.com\")\n# ----------------------------------------------------------------------\n# Configure allauth settings\n# ----------------------------------------------------------------------\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7\nACCOUNT_AUTHENTICATION_METHOD = \"email\"\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_UNIQUE_EMAIL = True",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FROM_EMAIL",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "DEFAULT_FROM_EMAIL = config(\"DEFAULT_FROM_EMAIL\", default=\"webmaster@example.com\")\n# ----------------------------------------------------------------------\n# Configure allauth settings\n# ----------------------------------------------------------------------\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7\nACCOUNT_AUTHENTICATION_METHOD = \"email\"\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_UNIQUE_EMAIL = True\nSOCIALACCOUNT_QUERY_EMAIL = True",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_VERIFICATION",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "ACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7\nACCOUNT_AUTHENTICATION_METHOD = \"email\"\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_UNIQUE_EMAIL = True\nSOCIALACCOUNT_QUERY_EMAIL = True\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\nACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = (\n    \"/\"  # Redirect URL after email verification\n)",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7\nACCOUNT_AUTHENTICATION_METHOD = \"email\"\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_UNIQUE_EMAIL = True\nSOCIALACCOUNT_QUERY_EMAIL = True\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\nACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = (\n    \"/\"  # Redirect URL after email verification\n)\nACCOUNT_EMAIL_CONFIRMATION_SIGNUP_MESSAGE = \"account/confirmation_signup_message.txt\"",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_AUTHENTICATION_METHOD",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "ACCOUNT_AUTHENTICATION_METHOD = \"email\"\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_UNIQUE_EMAIL = True\nSOCIALACCOUNT_QUERY_EMAIL = True\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\nACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = (\n    \"/\"  # Redirect URL after email verification\n)\nACCOUNT_EMAIL_CONFIRMATION_SIGNUP_MESSAGE = \"account/confirmation_signup_message.txt\"\n# APPEND_SLASH = False",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_REQUIRED",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "ACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_UNIQUE_EMAIL = True\nSOCIALACCOUNT_QUERY_EMAIL = True\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\nACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = (\n    \"/\"  # Redirect URL after email verification\n)\nACCOUNT_EMAIL_CONFIRMATION_SIGNUP_MESSAGE = \"account/confirmation_signup_message.txt\"\n# APPEND_SLASH = False\n# Define the logs directory within the api folder",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_UNIQUE_EMAIL",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "ACCOUNT_UNIQUE_EMAIL = True\nSOCIALACCOUNT_QUERY_EMAIL = True\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\nACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = (\n    \"/\"  # Redirect URL after email verification\n)\nACCOUNT_EMAIL_CONFIRMATION_SIGNUP_MESSAGE = \"account/confirmation_signup_message.txt\"\n# APPEND_SLASH = False\n# Define the logs directory within the api folder\n# LOGS_DIR = os.path.join(BASE_DIR, \"api\", \"logs\")",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_QUERY_EMAIL",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "SOCIALACCOUNT_QUERY_EMAIL = True\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\nACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = (\n    \"/\"  # Redirect URL after email verification\n)\nACCOUNT_EMAIL_CONFIRMATION_SIGNUP_MESSAGE = \"account/confirmation_signup_message.txt\"\n# APPEND_SLASH = False\n# Define the logs directory within the api folder\n# LOGS_DIR = os.path.join(BASE_DIR, \"api\", \"logs\")\n# Ensure the logs directory exists",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_VERIFICATION",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "ACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\nACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = (\n    \"/\"  # Redirect URL after email verification\n)\nACCOUNT_EMAIL_CONFIRMATION_SIGNUP_MESSAGE = \"account/confirmation_signup_message.txt\"\n# APPEND_SLASH = False\n# Define the logs directory within the api folder\n# LOGS_DIR = os.path.join(BASE_DIR, \"api\", \"logs\")\n# Ensure the logs directory exists\n# os.makedirs(LOGS_DIR, exist_ok=True)",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = (\n    \"/\"  # Redirect URL after email verification\n)\nACCOUNT_EMAIL_CONFIRMATION_SIGNUP_MESSAGE = \"account/confirmation_signup_message.txt\"\n# APPEND_SLASH = False\n# Define the logs directory within the api folder\n# LOGS_DIR = os.path.join(BASE_DIR, \"api\", \"logs\")\n# Ensure the logs directory exists\n# os.makedirs(LOGS_DIR, exist_ok=True)\nCRONJOBS = [",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_CONFIRMATION_SIGNUP_MESSAGE",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "ACCOUNT_EMAIL_CONFIRMATION_SIGNUP_MESSAGE = \"account/confirmation_signup_message.txt\"\n# APPEND_SLASH = False\n# Define the logs directory within the api folder\n# LOGS_DIR = os.path.join(BASE_DIR, \"api\", \"logs\")\n# Ensure the logs directory exists\n# os.makedirs(LOGS_DIR, exist_ok=True)\nCRONJOBS = [\n    (\n        \"*/1 * * * *\",\n        \"core.crons.send_reminder_notifications\",",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "CRONJOBS",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "CRONJOBS = [\n    (\n        \"*/1 * * * *\",\n        \"core.crons.send_reminder_notifications\",\n        f\">> {os.path.join(BASE_DIR, 'core', 'logs','send_upcoming_event_notifications.log')} 2>&1\",\n    ),\n]\n# Load database configurations from sites.json\nwith open(os.path.join(PROJECT_PATH, 'sites', 'sites.json')) as f:\n    sites = json.load(f)",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": BASE_DIR / \"db.sqlite3\",\n    }\n}\n# Add databases from sites.json\nfor site in sites:\n    DATABASES[site['site_name']] = site['database']\nDATABASE_ROUTERS = ['core.db_router.MultiTenantRouter']",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "DATABASE_ROUTERS",
        "kind": 5,
        "importPath": "sites.django.backend.settings",
        "description": "sites.django.backend.settings",
        "peekOfCode": "DATABASE_ROUTERS = ['core.db_router.MultiTenantRouter']\nsys.path.append(str(os.path.join(PROJECT_PATH, \"apps\", \"masafa1\")))\nsys.path.append(str(os.path.join(PROJECT_PATH, \"apps\", \"masafa\")))",
        "detail": "sites.django.backend.settings",
        "documentation": {}
    },
    {
        "label": "static_urlpatterns",
        "kind": 5,
        "importPath": "sites.django.backend.urls",
        "description": "sites.django.backend.urls",
        "peekOfCode": "static_urlpatterns = [\n    re_path(r\"^media/(?P<path>.*)$\", serve, {\"document_root\": settings.MEDIA_ROOT}),\n    re_path(r\"^static/(?P<path>.*)$\", serve, {\"document_root\": settings.STATIC_ROOT}),\n]\nurlpatterns = [\n    # path(\"admin/\", admin.site.urls),\n    path(\"apis/\", include(\"core.urls\")),\n    path(\"\", include(static_urlpatterns)),\n]\nurlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)",
        "detail": "sites.django.backend.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "sites.django.backend.urls",
        "description": "sites.django.backend.urls",
        "peekOfCode": "urlpatterns = [\n    # path(\"admin/\", admin.site.urls),\n    path(\"apis/\", include(\"core.urls\")),\n    path(\"\", include(static_urlpatterns)),\n]\nurlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\nurlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "sites.django.backend.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "sites.django.backend.wsgi",
        "description": "sites.django.backend.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "sites.django.backend.wsgi",
        "documentation": {}
    },
    {
        "label": "AppFilter",
        "kind": 6,
        "importPath": "sites.django.core.filters.core",
        "description": "sites.django.core.filters.core",
        "peekOfCode": "class AppFilter(DynamicFilterSet):\n    class Meta:\n        model = App\n        fields = \"__all__\"\n        exclude = [\"app_icon\"]\nclass ModuleFilter(DynamicFilterSet):\n    class Meta:\n        model = Module\n        fields = \"__all__\"\n        exclude = [\"edit_history\"]",
        "detail": "sites.django.core.filters.core",
        "documentation": {}
    },
    {
        "label": "ModuleFilter",
        "kind": 6,
        "importPath": "sites.django.core.filters.core",
        "description": "sites.django.core.filters.core",
        "peekOfCode": "class ModuleFilter(DynamicFilterSet):\n    class Meta:\n        model = Module\n        fields = \"__all__\"\n        exclude = [\"edit_history\"]\nclass DocumentFilter(DynamicFilterSet):\n    class Meta:\n        model = Document\n        fields = \"__all__\"\n        exclude = [\"edit_history\"]",
        "detail": "sites.django.core.filters.core",
        "documentation": {}
    },
    {
        "label": "DocumentFilter",
        "kind": 6,
        "importPath": "sites.django.core.filters.core",
        "description": "sites.django.core.filters.core",
        "peekOfCode": "class DocumentFilter(DynamicFilterSet):\n    class Meta:\n        model = Document\n        fields = \"__all__\"\n        exclude = [\"edit_history\"]\nclass ChangeLogFilter(filters.FilterSet):\n    id = filters.NumberFilter(label='ID')\n    model_name = filters.CharFilter(lookup_expr='icontains', label='Model Name')\n    object_id = filters.CharFilter(lookup_expr='icontains', label='Obejct ID')\n    class Meta:",
        "detail": "sites.django.core.filters.core",
        "documentation": {}
    },
    {
        "label": "ChangeLogFilter",
        "kind": 6,
        "importPath": "sites.django.core.filters.core",
        "description": "sites.django.core.filters.core",
        "peekOfCode": "class ChangeLogFilter(filters.FilterSet):\n    id = filters.NumberFilter(label='ID')\n    model_name = filters.CharFilter(lookup_expr='icontains', label='Model Name')\n    object_id = filters.CharFilter(lookup_expr='icontains', label='Obejct ID')\n    class Meta:\n        model = ChangeLog\n        fields = [\"id\", \"model_name\", \"object_id\"]\nclass UserFilter(DynamicFilterSet):\n    class Meta:\n        model = User",
        "detail": "sites.django.core.filters.core",
        "documentation": {}
    },
    {
        "label": "UserFilter",
        "kind": 6,
        "importPath": "sites.django.core.filters.core",
        "description": "sites.django.core.filters.core",
        "peekOfCode": "class UserFilter(DynamicFilterSet):\n    class Meta:\n        model = User\n        fields = \"__all__\"\n        exclude = [\"profile_picture\"]\n# class ReminderFilter(filters.FilterSet):\n#     class Meta:\n#         model = Reminder\n#         fields = ['id']\nclass GroupFilter(filters.FilterSet):",
        "detail": "sites.django.core.filters.core",
        "documentation": {}
    },
    {
        "label": "GroupFilter",
        "kind": 6,
        "importPath": "sites.django.core.filters.core",
        "description": "sites.django.core.filters.core",
        "peekOfCode": "class GroupFilter(filters.FilterSet):\n    class Meta:\n        model = Group\n        fields = \"__all__\"\nclass PermissionFilter(filters.FilterSet):\n    class Meta:\n        model = Group\n        fields = \"__all__\"",
        "detail": "sites.django.core.filters.core",
        "documentation": {}
    },
    {
        "label": "PermissionFilter",
        "kind": 6,
        "importPath": "sites.django.core.filters.core",
        "description": "sites.django.core.filters.core",
        "peekOfCode": "class PermissionFilter(filters.FilterSet):\n    class Meta:\n        model = Group\n        fields = \"__all__\"",
        "detail": "sites.django.core.filters.core",
        "documentation": {}
    },
    {
        "label": "DynamicFilterSet",
        "kind": 6,
        "importPath": "sites.django.core.filters.template",
        "description": "sites.django.core.filters.template",
        "peekOfCode": "class DynamicFilterSet(django_filters.FilterSet):\n    class Meta:\n        model = None\n        fields = ()\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # Create a list to store dynamically added keys\n        dynamic_keys = []\n        # Iterate over the existing keys\n        for field_name in list(self.filters.keys()):",
        "detail": "sites.django.core.filters.template",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "sites.django.core.management.commands.createsuperuser_tenant",
        "description": "sites.django.core.management.commands.createsuperuser_tenant",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Create a superuser for a specific tenant database\"\n    def add_arguments(self, parser):\n        parser.add_argument(\"tenant\", type=str, help=\"The tenant database name\")\n        parser.add_argument(\"--username\", type=str, help=\"Superuser username\")\n        parser.add_argument(\"--email\", type=str, help=\"Superuser email\")\n        parser.add_argument(\"--password\", type=str, help=\"Superuser password\")\n    def handle(self, *args, **options):\n        tenant_db = options[\"tenant\"]\n        if tenant_db not in settings.DATABASES:",
        "detail": "sites.django.core.management.commands.createsuperuser_tenant",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "sites.django.core.migrations.0001_initial",
        "description": "sites.django.core.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "sites.django.core.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "sites.django.core.migrations.0002_tenant",
        "description": "sites.django.core.migrations.0002_tenant",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Tenant',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255, unique=True)),",
        "detail": "sites.django.core.migrations.0002_tenant",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "sites.django.core.migrations.0003_remove_changelog_created_remove_changelog_field_name_and_more",
        "description": "sites.django.core.migrations.0003_remove_changelog_created_remove_changelog_field_name_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0002_tenant'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='changelog',\n            name='created',\n        ),\n        migrations.RemoveField(",
        "detail": "sites.django.core.migrations.0003_remove_changelog_created_remove_changelog_field_name_and_more",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "sites.django.core.models.auth",
        "description": "sites.django.core.models.auth",
        "peekOfCode": "class User(AbstractUser):\n    ROLE_CHOICES = (\n        (\"Customer\", \"Customer\"),\n        (\"Staff\", \"Staff\"),\n        (\"Admin\", \"Admin\"),\n    )\n    role = models.CharField(max_length=200, choices=ROLE_CHOICES, default=\"Admin\")\n    groups = models.ManyToManyField(\n        Group, related_name=\"api_user_groups\", blank=True  # Add a unique related name\n    )",
        "detail": "sites.django.core.models.auth",
        "documentation": {}
    },
    {
        "label": "OTP",
        "kind": 6,
        "importPath": "sites.django.core.models.auth",
        "description": "sites.django.core.models.auth",
        "peekOfCode": "class OTP(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    otp_code = models.CharField(max_length=6)\n    is_active = models.BooleanField(default=False)\n    created_at = models.DateTimeField(default=timezone.now)\nclass UserIPAddress(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='ip_addresses')\n    ip_address = models.GenericIPAddressField()\n    timestamp = models.DateTimeField(auto_now_add=True)\n    class Meta:",
        "detail": "sites.django.core.models.auth",
        "documentation": {}
    },
    {
        "label": "UserIPAddress",
        "kind": 6,
        "importPath": "sites.django.core.models.auth",
        "description": "sites.django.core.models.auth",
        "peekOfCode": "class UserIPAddress(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='ip_addresses')\n    ip_address = models.GenericIPAddressField()\n    timestamp = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        unique_together = ('user', 'ip_address')\n    def __str__(self):\n        return f\"{self.user.username} - {self.ip_address} ({self.timestamp})\"",
        "detail": "sites.django.core.models.auth",
        "documentation": {}
    },
    {
        "label": "write_barcode",
        "kind": 2,
        "importPath": "sites.django.core.models.barcode",
        "description": "sites.django.core.models.barcode",
        "peekOfCode": "def write_barcode(self, field, ref):\n    # Create the file name\n    file_name = f\"{self.id}.png\" \n    # Check if the file already exists in the designated location\n    file_path = os.path.join(settings.MEDIA_ROOT, field.field.upload_to, file_name)\n    if os.path.exists(file_path):\n        print(f\"File {file_name} already exists, skipping barcode generation.\")\n        return self  # Skip saving if the file already exists\n    # Parse help_text to determine whether to generate QR code and/or barcode\n    help_text = self._meta.get_field('barcode').help_text if self._meta.get_field('barcode').help_text else 'False, False'",
        "detail": "sites.django.core.models.barcode",
        "documentation": {}
    },
    {
        "label": "Reminder",
        "kind": 6,
        "importPath": "sites.django.core.models.communication",
        "description": "sites.django.core.models.communication",
        "peekOfCode": "class Reminder(BaseModel):\n    name = models.CharField(verbose_name='Name', null=True, blank=True, max_length=255)\n    # Frequency Choices\n    CHOICES_FREQUENCY = [\n        ('Once', 'Once'),\n        ('Daily', 'Daily'),\n        ('Weekly', 'Weekly'),\n        ('Monthly', 'Monthly'),\n        ('Yearly', 'Yearly'),\n    ]",
        "detail": "sites.django.core.models.communication",
        "documentation": {}
    },
    {
        "label": "ChangeLog",
        "kind": 6,
        "importPath": "sites.django.core.models.core",
        "description": "sites.django.core.models.core",
        "peekOfCode": "class ChangeLog(models.Model):\n    model_name = models.CharField(max_length=255)\n    object_id = models.CharField(max_length=255)\n    changes = models.JSONField(null=True, blank=True)  # Stores all changes as JSON\n    timestamp = models.DateTimeField(auto_now_add=True)\n    user = models.TextField(null=True, blank=True)\n    def __str__(self):\n        return f\"ChangeLog for {self.model_name} {self.object_id} at {self.timestamp}\"\nclass AbstractApp(BaseModel):\n    status = models.CharField(max_length=255, default=\"Active\")",
        "detail": "sites.django.core.models.core",
        "documentation": {}
    },
    {
        "label": "AbstractApp",
        "kind": 6,
        "importPath": "sites.django.core.models.core",
        "description": "sites.django.core.models.core",
        "peekOfCode": "class AbstractApp(BaseModel):\n    status = models.CharField(max_length=255, default=\"Active\")\n    name = models.CharField(max_length=255)\n    description = models.TextField(null=True, blank=True)\n    id = models.CharField(\n        max_length=255,\n        primary_key=True,  # Set as the primary key\n        editable=False,  # Prevent manual editing\n    )\n    class Meta:",
        "detail": "sites.django.core.models.core",
        "documentation": {}
    },
    {
        "label": "App",
        "kind": 6,
        "importPath": "sites.django.core.models.core",
        "description": "sites.django.core.models.core",
        "peekOfCode": "class App(AbstractApp):\n    email = models.EmailField(null=True, blank=True)\n    # License field with choices and option to add custom\n    license = models.CharField(\n        max_length=50,\n        choices=DEFAULT_LICENSE_CHOICES,\n        default=\"MIT\"\n    )\n    publisher = models.CharField(max_length=255, null=True, blank=True)\n    app_url = models.URLField(null=True, blank=True)  # URL associated with the app",
        "detail": "sites.django.core.models.core",
        "documentation": {}
    },
    {
        "label": "Module",
        "kind": 6,
        "importPath": "sites.django.core.models.core",
        "description": "sites.django.core.models.core",
        "peekOfCode": "class Module(AbstractApp):\n    app = models.ForeignKey(App, on_delete=models.CASCADE, related_name=\"modules\")\n    def __str__(self):\n        return f\"{self.name} {self.app}\"\nclass Document(AbstractApp):\n    TYPE_CHOICES = [\n        (\"single\", \"Single\"),\n        (\"list\", \"List\"),\n        (\"dynamic\", \"Dynamic\"),\n    ]",
        "detail": "sites.django.core.models.core",
        "documentation": {}
    },
    {
        "label": "Document",
        "kind": 6,
        "importPath": "sites.django.core.models.core",
        "description": "sites.django.core.models.core",
        "peekOfCode": "class Document(AbstractApp):\n    TYPE_CHOICES = [\n        (\"single\", \"Single\"),\n        (\"list\", \"List\"),\n        (\"dynamic\", \"Dynamic\"),\n    ]\n    app = models.ForeignKey(App, on_delete=models.CASCADE, related_name=\"app\")\n    module = models.ForeignKey(Module, on_delete=models.CASCADE, related_name=\"modules\")\n    type = models.CharField(max_length=255, choices=TYPE_CHOICES, default=\"list\")\n    def __str__(self):",
        "detail": "sites.django.core.models.core",
        "documentation": {}
    },
    {
        "label": "Tenant",
        "kind": 6,
        "importPath": "sites.django.core.models.core",
        "description": "sites.django.core.models.core",
        "peekOfCode": "class Tenant(models.Model):\n    name = models.CharField(max_length=255, unique=True)\n    database_name = models.CharField(max_length=255, unique=True)\n    allowed_apps = models.JSONField(default=list)  # Stores allowed apps as a list\n    def __str__(self):\n        return self.name",
        "detail": "sites.django.core.models.core",
        "documentation": {}
    },
    {
        "label": "generate_random_slug",
        "kind": 2,
        "importPath": "sites.django.core.models.core",
        "description": "sites.django.core.models.core",
        "peekOfCode": "def generate_random_slug(length=10):\n    characters = string.ascii_lowercase + string.digits\n    return \"\".join(random.choices(characters, k=length))\n# Default choices for the license field and supported platforms\nDEFAULT_LICENSE_CHOICES = [\n    (\"MIT\", \"MIT\"),\n    (\"GPL-3.0\", \"GPL-3.0\"),\n    (\"Apache-2.0\", \"Apache-2.0\"),\n    (\"BSD\", \"BSD\"),\n    (\"Custom\", \"Custom (Add New)\"),  # Option to add a custom license",
        "detail": "sites.django.core.models.core",
        "documentation": {}
    },
    {
        "label": "RESERVED_KEYNAMES",
        "kind": 5,
        "importPath": "sites.django.core.models.core",
        "description": "sites.django.core.models.core",
        "peekOfCode": "RESERVED_KEYNAMES = [\"admin\", \"system\"]\ndef generate_random_slug(length=10):\n    characters = string.ascii_lowercase + string.digits\n    return \"\".join(random.choices(characters, k=length))\n# Default choices for the license field and supported platforms\nDEFAULT_LICENSE_CHOICES = [\n    (\"MIT\", \"MIT\"),\n    (\"GPL-3.0\", \"GPL-3.0\"),\n    (\"Apache-2.0\", \"Apache-2.0\"),\n    (\"BSD\", \"BSD\"),",
        "detail": "sites.django.core.models.core",
        "documentation": {}
    },
    {
        "label": "DEFAULT_LICENSE_CHOICES",
        "kind": 5,
        "importPath": "sites.django.core.models.core",
        "description": "sites.django.core.models.core",
        "peekOfCode": "DEFAULT_LICENSE_CHOICES = [\n    (\"MIT\", \"MIT\"),\n    (\"GPL-3.0\", \"GPL-3.0\"),\n    (\"Apache-2.0\", \"Apache-2.0\"),\n    (\"BSD\", \"BSD\"),\n    (\"Custom\", \"Custom (Add New)\"),  # Option to add a custom license\n]\nSUPPORTED_PLATFORMS_CHOICES = [\n    (\"Web\", \"Web\"),\n    (\"Android\", \"Android\"),",
        "detail": "sites.django.core.models.core",
        "documentation": {}
    },
    {
        "label": "SUPPORTED_PLATFORMS_CHOICES",
        "kind": 5,
        "importPath": "sites.django.core.models.core",
        "description": "sites.django.core.models.core",
        "peekOfCode": "SUPPORTED_PLATFORMS_CHOICES = [\n    (\"Web\", \"Web\"),\n    (\"Android\", \"Android\"),\n    (\"iOS\", \"iOS\"),\n    (\"Windows\", \"Windows\"),\n    (\"Linux\", \"Linux\"),\n    (\"MacOS\", \"MacOS\"),\n    (\"Custom\", \"Custom (Add New)\")  # Option to add a custom platform\n]\nclass ChangeLog(models.Model):",
        "detail": "sites.django.core.models.core",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "kind": 6,
        "importPath": "sites.django.core.models.template",
        "description": "sites.django.core.models.template",
        "peekOfCode": "class BaseModel(models.Model):\n    id = models.CharField(primary_key=True, editable=True, max_length=250)\n    created = models.DateTimeField(auto_now_add=True)\n    owner = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        related_name=\"%(app_label)s_%(class)s_created\",\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,\n        help_text=\"The user who created this record.\"",
        "detail": "sites.django.core.models.template",
        "documentation": {}
    },
    {
        "label": "Series",
        "kind": 6,
        "importPath": "sites.django.core.models.template",
        "description": "sites.django.core.models.template",
        "peekOfCode": "class Series(models.Model):\n    id = models.CharField(primary_key=True, editable=True, max_length=250)\n    name = models.CharField(max_length=255)\n    current = models.IntegerField(default=0)",
        "detail": "sites.django.core.models.template",
        "documentation": {}
    },
    {
        "label": "generate_random_slug",
        "kind": 2,
        "importPath": "sites.django.core.models.template",
        "description": "sites.django.core.models.template",
        "peekOfCode": "def generate_random_slug(length=10):\n    characters = string.ascii_letters + string.digits\n    return \"\".join(random.choices(characters, k=length))\ndef generate_by_hash():\n    \"\"\"Generate a random hash-based name.\"\"\"\n    return str(uuid.uuid4())\nclass BaseModel(models.Model):\n    id = models.CharField(primary_key=True, editable=True, max_length=250)\n    created = models.DateTimeField(auto_now_add=True)\n    owner = models.ForeignKey(",
        "detail": "sites.django.core.models.template",
        "documentation": {}
    },
    {
        "label": "generate_by_hash",
        "kind": 2,
        "importPath": "sites.django.core.models.template",
        "description": "sites.django.core.models.template",
        "peekOfCode": "def generate_by_hash():\n    \"\"\"Generate a random hash-based name.\"\"\"\n    return str(uuid.uuid4())\nclass BaseModel(models.Model):\n    id = models.CharField(primary_key=True, editable=True, max_length=250)\n    created = models.DateTimeField(auto_now_add=True)\n    owner = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        related_name=\"%(app_label)s_%(class)s_created\",\n        on_delete=models.SET_NULL,",
        "detail": "sites.django.core.models.template",
        "documentation": {}
    },
    {
        "label": "Role",
        "kind": 6,
        "importPath": "sites.django.core.models.user_role",
        "description": "sites.django.core.models.user_role",
        "peekOfCode": "class Role(models.Model):\n    name = models.CharField(max_length=250, unique=True)\n    description = models.TextField(blank=True)\n    def __str__(self):\n        return self.name\nclass UserRole(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    role = models.ForeignKey(Role, on_delete=models.CASCADE)\n    assigned_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):",
        "detail": "sites.django.core.models.user_role",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "kind": 6,
        "importPath": "sites.django.core.models.user_role",
        "description": "sites.django.core.models.user_role",
        "peekOfCode": "class UserRole(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    role = models.ForeignKey(Role, on_delete=models.CASCADE)\n    assigned_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return f\"{self.user.username} - {self.role.name}\"\nclass Permission(models.Model):\n    role = models.ForeignKey(Role, on_delete=models.CASCADE)\n    can_view_documents = models.BooleanField(default=False)\n    can_edit_documents = models.BooleanField(default=False)",
        "detail": "sites.django.core.models.user_role",
        "documentation": {}
    },
    {
        "label": "Permission",
        "kind": 6,
        "importPath": "sites.django.core.models.user_role",
        "description": "sites.django.core.models.user_role",
        "peekOfCode": "class Permission(models.Model):\n    role = models.ForeignKey(Role, on_delete=models.CASCADE)\n    can_view_documents = models.BooleanField(default=False)\n    can_edit_documents = models.BooleanField(default=False)\n    can_delete_documents = models.BooleanField(default=False)\n    def __str__(self):\n        return f\"Permissions for {self.role.name}\"",
        "detail": "sites.django.core.models.user_role",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "sites.django.core.models.user_role",
        "description": "sites.django.core.models.user_role",
        "peekOfCode": "User = get_user_model()  # Get the user model\nclass Role(models.Model):\n    name = models.CharField(max_length=250, unique=True)\n    description = models.TextField(blank=True)\n    def __str__(self):\n        return self.name\nclass UserRole(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    role = models.ForeignKey(Role, on_delete=models.CASCADE)\n    assigned_at = models.DateTimeField(auto_now_add=True)",
        "detail": "sites.django.core.models.user_role",
        "documentation": {}
    },
    {
        "label": "UserIPAddressSerializer",
        "kind": 6,
        "importPath": "sites.django.core.serializers.auth",
        "description": "sites.django.core.serializers.auth",
        "peekOfCode": "class UserIPAddressSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UserIPAddress\n        fields = ['ip_address', 'timestamp']\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = \"__all__\"\nclass OTPSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "sites.django.core.serializers.auth",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "sites.django.core.serializers.auth",
        "description": "sites.django.core.serializers.auth",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = \"__all__\"\nclass OTPSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = OTP\n        fields = \"__all__\"\nclass GroupSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "sites.django.core.serializers.auth",
        "documentation": {}
    },
    {
        "label": "OTPSerializer",
        "kind": 6,
        "importPath": "sites.django.core.serializers.auth",
        "description": "sites.django.core.serializers.auth",
        "peekOfCode": "class OTPSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = OTP\n        fields = \"__all__\"\nclass GroupSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Group\n        fields = \"__all__\"\nclass PermissionSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "sites.django.core.serializers.auth",
        "documentation": {}
    },
    {
        "label": "GroupSerializer",
        "kind": 6,
        "importPath": "sites.django.core.serializers.auth",
        "description": "sites.django.core.serializers.auth",
        "peekOfCode": "class GroupSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Group\n        fields = \"__all__\"\nclass PermissionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Permission\n        fields = \"__all__\"",
        "detail": "sites.django.core.serializers.auth",
        "documentation": {}
    },
    {
        "label": "PermissionSerializer",
        "kind": 6,
        "importPath": "sites.django.core.serializers.auth",
        "description": "sites.django.core.serializers.auth",
        "peekOfCode": "class PermissionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Permission\n        fields = \"__all__\"",
        "detail": "sites.django.core.serializers.auth",
        "documentation": {}
    },
    {
        "label": "AppSerializer",
        "kind": 6,
        "importPath": "sites.django.core.serializers.core",
        "description": "sites.django.core.serializers.core",
        "peekOfCode": "class AppSerializer(serializers.ModelSerializer):\n    # Handle the MultiSelectField correctly\n    supported_platforms = serializers.ListField(\n        child=serializers.ChoiceField(choices=SUPPORTED_PLATFORMS_CHOICES),\n        required=False,  # It's not required, since it can be null or blank\n    )\n    # Foreign key fields - serialized as primary key or with a nested serializer (if you want detailed info)\n    publisher = serializers.CharField(required=False)\n    app_url = serializers.URLField(required=False)\n    version = serializers.CharField(max_length=50, required=False)",
        "detail": "sites.django.core.serializers.core",
        "documentation": {}
    },
    {
        "label": "ModuleSerializer",
        "kind": 6,
        "importPath": "sites.django.core.serializers.core",
        "description": "sites.django.core.serializers.core",
        "peekOfCode": "class ModuleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Module\n        fields = \"__all__\"\nclass DocumentSerializer(RelationshipHandlerMixin, serializers.ModelSerializer):\n    class Meta:\n        model = Document\n        fields = \"__all__\"\nclass ChangeLogSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "sites.django.core.serializers.core",
        "documentation": {}
    },
    {
        "label": "DocumentSerializer",
        "kind": 6,
        "importPath": "sites.django.core.serializers.core",
        "description": "sites.django.core.serializers.core",
        "peekOfCode": "class DocumentSerializer(RelationshipHandlerMixin, serializers.ModelSerializer):\n    class Meta:\n        model = Document\n        fields = \"__all__\"\nclass ChangeLogSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ChangeLog\n        fields = \"__all__\"\n# class ReminderSerializer(serializers.ModelSerializer):\n#     days = serializers.MultipleChoiceField(choices=Reminder.CHOICES_DAYS, required=False)",
        "detail": "sites.django.core.serializers.core",
        "documentation": {}
    },
    {
        "label": "ChangeLogSerializer",
        "kind": 6,
        "importPath": "sites.django.core.serializers.core",
        "description": "sites.django.core.serializers.core",
        "peekOfCode": "class ChangeLogSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ChangeLog\n        fields = \"__all__\"\n# class ReminderSerializer(serializers.ModelSerializer):\n#     days = serializers.MultipleChoiceField(choices=Reminder.CHOICES_DAYS, required=False)\n#     class Meta:\n#         model = Reminder\n#         fields = '__all__'",
        "detail": "sites.django.core.serializers.core",
        "documentation": {}
    },
    {
        "label": "RelationshipHandlerMixin",
        "kind": 6,
        "importPath": "sites.django.core.serializers.template",
        "description": "sites.django.core.serializers.template",
        "peekOfCode": "class RelationshipHandlerMixin(serializers.ModelSerializer):\n    \"\"\"\n    Mixin to handle dynamic related fields serialization and deserialization.\n    - Handles list and detail views differently for related fields.\n    - Allows creation and update of related objects dynamically.\n    \"\"\"\n    def validate(self, data):\n        \"\"\"\n        Validate and modify field names that end with '_id' or are 'id' to append '_custom'.\n        \"\"\"",
        "detail": "sites.django.core.serializers.template",
        "documentation": {}
    },
    {
        "label": "run_subprocess",
        "kind": 2,
        "importPath": "sites.django.core.utils.core",
        "description": "sites.django.core.utils.core",
        "peekOfCode": "def run_subprocess(command):\n    \"\"\"\n    Run a subprocess command and return the output.\n    :param command: The command to run as a string.\n    :return: Output of the command.\n    \"\"\"\n    try:\n        result = subprocess.run(command, shell=True, capture_output=True, text=True, check=True)\n        return result.stdout\n    except subprocess.CalledProcessError as e:",
        "detail": "sites.django.core.utils.core",
        "documentation": {}
    },
    {
        "label": "log_user_action",
        "kind": 2,
        "importPath": "sites.django.core.utils.core",
        "description": "sites.django.core.utils.core",
        "peekOfCode": "def log_user_action(user_id, action):\n    \"\"\"\n    Log a user action to the logging system.\n    :param user_id: ID of the user performing the action.\n    :param action: Description of the action.\n    \"\"\"\n    logger.info(f\"User {user_id} performed action: {action}\")",
        "detail": "sites.django.core.utils.core",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "sites.django.core.utils.core",
        "description": "sites.django.core.utils.core",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef run_subprocess(command):\n    \"\"\"\n    Run a subprocess command and return the output.\n    :param command: The command to run as a string.\n    :return: Output of the command.\n    \"\"\"\n    try:\n        result = subprocess.run(command, shell=True, capture_output=True, text=True, check=True)\n        return result.stdout",
        "detail": "sites.django.core.utils.core",
        "documentation": {}
    },
    {
        "label": "validate_and_convert_datetime",
        "kind": 2,
        "importPath": "sites.django.core.utils.data_validation",
        "description": "sites.django.core.utils.data_validation",
        "peekOfCode": "def validate_and_convert_datetime(date_str):\n    try:\n        # Try parsing the date string with the expected format\n        return datetime.strptime(date_str, \"%Y-%m-%d %H:%M:%S\")\n    except ValueError:\n        try:\n            # Try parsing the date string with the ISO 8601 format\n            return datetime.fromisoformat(date_str.replace(\"Z\", \"+00:00\"))\n        except ValueError:\n            raise ValidationError(f\"Invalid datetime format: {date_str}. Expected format: YYYY-MM-DD HH:MM:SS or ISO 8601 format.\")",
        "detail": "sites.django.core.utils.data_validation",
        "documentation": {}
    },
    {
        "label": "validate_and_convert_date",
        "kind": 2,
        "importPath": "sites.django.core.utils.data_validation",
        "description": "sites.django.core.utils.data_validation",
        "peekOfCode": "def validate_and_convert_date(date_str):\n    formats = [\n        \"%Y-%m-%d\",          # Standard format: 2025-01-23\n        \"%d-%m-%Y\",          # European format: 23-01-2025\n        \"%m/%d/%Y\",          # US format: 01/23/2025\n        \"%d %b %Y\",          # Short month name: 23 Jan 2025\n        \"%d %B %Y\",          # Full month name: 23 January 2025\n        \"%Y/%m/%d\",          # Alternative ISO-like: 2025/01/23\n        \"%Y.%m.%d\",          # Dotted format: 2025.01.23\n        \"%Y-%m-%dT%H:%M:%S.%fZ\",  # ISO 8601 with microseconds and 'Z'",
        "detail": "sites.django.core.utils.data_validation",
        "documentation": {}
    },
    {
        "label": "validate_and_convert_time",
        "kind": 2,
        "importPath": "sites.django.core.utils.data_validation",
        "description": "sites.django.core.utils.data_validation",
        "peekOfCode": "def validate_and_convert_time(time_str):\n    try:\n        # Parse the time string\n        return datetime.strptime(time_str, \"%H:%M:%S\").time()\n    except ValueError:\n        raise ValidationError(f\"Invalid time format: {time_str}. Expected format: HH:MM:SS.\")\n# Function to validate and convert an integer value\ndef validate_and_convert_integer(value):\n    try:\n        return int(value)",
        "detail": "sites.django.core.utils.data_validation",
        "documentation": {}
    },
    {
        "label": "validate_and_convert_integer",
        "kind": 2,
        "importPath": "sites.django.core.utils.data_validation",
        "description": "sites.django.core.utils.data_validation",
        "peekOfCode": "def validate_and_convert_integer(value):\n    try:\n        return int(value)\n    except (ValueError, TypeError):\n        raise ValidationError(f\"Invalid integer: {value}. Please enter a valid integer.\")\n# Function to validate and convert a float value\ndef validate_and_convert_float(value):\n    try:\n        return float(value)\n    except (ValueError, TypeError):",
        "detail": "sites.django.core.utils.data_validation",
        "documentation": {}
    },
    {
        "label": "validate_and_convert_float",
        "kind": 2,
        "importPath": "sites.django.core.utils.data_validation",
        "description": "sites.django.core.utils.data_validation",
        "peekOfCode": "def validate_and_convert_float(value):\n    try:\n        return float(value)\n    except (ValueError, TypeError):\n        raise ValidationError(f\"Invalid float: {value}. Please enter a valid float.\")\n# Function to validate and convert a boolean value\ndef validate_and_convert_boolean(value):\n    if isinstance(value, bool):\n        return value\n    if value in ['true', 'True', '1']:",
        "detail": "sites.django.core.utils.data_validation",
        "documentation": {}
    },
    {
        "label": "validate_and_convert_boolean",
        "kind": 2,
        "importPath": "sites.django.core.utils.data_validation",
        "description": "sites.django.core.utils.data_validation",
        "peekOfCode": "def validate_and_convert_boolean(value):\n    if isinstance(value, bool):\n        return value\n    if value in ['true', 'True', '1']:\n        return True\n    if value in ['false', 'False', '0']:\n        return False\n    raise ValidationError(f\"Invalid boolean value: {value}. Please enter a valid boolean (true/false).\")\n# Function to validate and convert a string value (simply returns the string)\ndef validate_and_convert_string(value):",
        "detail": "sites.django.core.utils.data_validation",
        "documentation": {}
    },
    {
        "label": "validate_and_convert_string",
        "kind": 2,
        "importPath": "sites.django.core.utils.data_validation",
        "description": "sites.django.core.utils.data_validation",
        "peekOfCode": "def validate_and_convert_string(value):\n    if not isinstance(value, str):\n        raise ValidationError(f\"Invalid string: {value}. Please enter a valid string.\")\n    return value\n# Function to validate model data\ndef validate_model_data(instance):\n    \"\"\"\n    Validate the data of the model instance before saving.\n    \"\"\"\n    for field in instance._meta.get_fields():",
        "detail": "sites.django.core.utils.data_validation",
        "documentation": {}
    },
    {
        "label": "validate_model_data",
        "kind": 2,
        "importPath": "sites.django.core.utils.data_validation",
        "description": "sites.django.core.utils.data_validation",
        "peekOfCode": "def validate_model_data(instance):\n    \"\"\"\n    Validate the data of the model instance before saving.\n    \"\"\"\n    for field in instance._meta.get_fields():\n        value = getattr(instance, field.name, None)\n        if value:\n            if isinstance(field, DateTimeField):\n                validate_and_convert_datetime(value)\n            elif isinstance(field, DateField):",
        "detail": "sites.django.core.utils.data_validation",
        "documentation": {}
    },
    {
        "label": "validate_serializer_data",
        "kind": 2,
        "importPath": "sites.django.core.utils.data_validation",
        "description": "sites.django.core.utils.data_validation",
        "peekOfCode": "def validate_serializer_data(serializer):\n    \"\"\"\n    Validate the data in the serializer and update it in place.\n    Args:\n        serializer (Serializer): The serializer instance containing data and field definitions.\n    Returns:\n        Serializer: The updated serializer with validated data.\n    \"\"\"\n    if not serializer.is_valid():\n        raise ValueError(\"Serializer contains invalid data.\")",
        "detail": "sites.django.core.utils.data_validation",
        "documentation": {}
    },
    {
        "label": "send_custom_email",
        "kind": 2,
        "importPath": "sites.django.core.utils.email",
        "description": "sites.django.core.utils.email",
        "peekOfCode": "def send_custom_email(subject, template_name, context, recipient_list, from_email=settings.DEFAULT_FROM_EMAIL):\n    html_content = render_to_string(template_name, context)\n    text_content = strip_tags(html_content)\n    email = EmailMultiAlternatives(\n        subject,\n        text_content,\n        from_email,\n        recipient_list\n    )\n    email.attach_alternative(html_content, \"text/html\")",
        "detail": "sites.django.core.utils.email",
        "documentation": {}
    },
    {
        "label": "InvalidNamingSeriesError",
        "kind": 6,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "class InvalidNamingSeriesError(frappe.ValidationError):\n\tpass\nclass InvalidUUIDValue(frappe.ValidationError):\n\tpass\nclass NamingSeries:\n\t__slots__ = (\"series\",)\n\tdef __init__(self, series: str):\n\t\tself.series = series\n\t\t# Add default number part if missing\n\t\tif \"#\" not in self.series:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "InvalidUUIDValue",
        "kind": 6,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "class InvalidUUIDValue(frappe.ValidationError):\n\tpass\nclass NamingSeries:\n\t__slots__ = (\"series\",)\n\tdef __init__(self, series: str):\n\t\tself.series = series\n\t\t# Add default number part if missing\n\t\tif \"#\" not in self.series:\n\t\t\tself.series += \".#####\"\n\tdef validate(self):",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "NamingSeries",
        "kind": 6,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "class NamingSeries:\n\t__slots__ = (\"series\",)\n\tdef __init__(self, series: str):\n\t\tself.series = series\n\t\t# Add default number part if missing\n\t\tif \"#\" not in self.series:\n\t\t\tself.series += \".#####\"\n\tdef validate(self):\n\t\tif \".\" not in self.series:\n\t\t\tfrappe.throw(",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "set_new_name",
        "kind": 2,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "def set_new_name(doc):\n\t\"\"\"\n\tSets the `name` property for the document based on various rules.\n\t1. If amended doc, set suffix.\n\t2. If `autoname` method is declared, then call it.\n\t3. If `autoname` property is set in the DocType (`meta`), then build it using the `autoname` property.\n\t4. If no rule defined, use hash.\n\t:param doc: Document to be named.\n\t\"\"\"\n\tdoc.run_method(\"before_naming\")",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "is_autoincremented",
        "kind": 2,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "def is_autoincremented(doctype: str, meta: Optional[\"Meta\"] = None) -> bool:\n\t\"\"\"Checks if the doctype has autoincrement autoname set\"\"\"\n\tif not meta:\n\t\tmeta = frappe.get_meta(doctype)\n\treturn not getattr(meta, \"issingle\", False) and meta.autoname == \"autoincrement\"\ndef set_name_from_naming_options(autoname, doc):\n\t\"\"\"\n\tGet a name based on the autoname field option\n\t\"\"\"\n\t_autoname = autoname.lower()",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "set_name_from_naming_options",
        "kind": 2,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "def set_name_from_naming_options(autoname, doc):\n\t\"\"\"\n\tGet a name based on the autoname field option\n\t\"\"\"\n\t_autoname = autoname.lower()\n\tif _autoname.startswith(\"field:\"):\n\t\tdoc.name = _field_autoname(autoname, doc)\n\t\t# if the autoname option is 'field:' and no name was derived, we need to\n\t\t# notify\n\t\tif not doc.name:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "set_naming_from_document_naming_rule",
        "kind": 2,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "def set_naming_from_document_naming_rule(doc):\n\t\"\"\"\n\tEvaluate rules based on \"Document Naming Series\" doctype\n\t\"\"\"\n\tfrom frappe.model.base_document import DOCTYPES_FOR_DOCTYPE\n\tIGNORED_DOCTYPES = {*log_types, *DOCTYPES_FOR_DOCTYPE, \"DefaultValue\", \"Patch Log\"}\n\tif doc.doctype in IGNORED_DOCTYPES:\n\t\treturn\n\tdocument_naming_rules = frappe.cache_manager.get_doctype_map(\n\t\t\"Document Naming Rule\",",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "set_name_by_naming_series",
        "kind": 2,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "def set_name_by_naming_series(doc):\n\t\"\"\"Sets name by the `naming_series` property\"\"\"\n\tif not doc.naming_series:\n\t\tdoc.naming_series = get_default_naming_series(doc.doctype)\n\tif not doc.naming_series:\n\t\tfrappe.throw(frappe._(\"Naming Series mandatory\"))\n\tdoc.name = make_autoname(doc.naming_series + \".#####\", \"\", doc)\ndef make_autoname(key=\"\", doctype=\"\", doc=\"\", *, ignore_validate=False):\n\t\"\"\"\n\t     Creates an autoname from the given key:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "make_autoname",
        "kind": 2,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "def make_autoname(key=\"\", doctype=\"\", doc=\"\", *, ignore_validate=False):\n\t\"\"\"\n\t     Creates an autoname from the given key:\n\t     **Autoname rules:**\n\t              * The key is separated by '.'\n\t              * '####' represents a series. The string before this part becomes the prefix:\n\t                     Example: ABC.#### creates a series ABC0001, ABC0002 etc\n\t              * 'MM' represents the current month\n\t              * 'YY' and 'YYYY' represent the current year\n\t*Example:*",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "parse_naming_series",
        "kind": 2,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "def parse_naming_series(\n\tparts: list[str] | str,\n\tdoctype=None,\n\tdoc: Optional[\"Document\"] = None,\n\tnumber_generator: Callable[[str, int], str] | None = None,\n) -> str:\n\t\"\"\"Parse the naming series and get next name.\n\targs:\n\t        parts: naming series parts (split by `.`)\n\t        doc: document to use for series that have parts using fieldnames",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "has_custom_parser",
        "kind": 2,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "def has_custom_parser(e):\n\t\"\"\"Return True if the naming series part has a custom parser.\"\"\"\n\treturn frappe.get_hooks(\"naming_series_variables\", {}).get(e)\ndef determine_consecutive_week_number(datetime):\n\t\"\"\"Determines the consecutive calendar week\"\"\"\n\tm = datetime.month\n\t# ISO 8601 calandar week\n\tw = datetime.strftime(\"%V\")\n\t# Ensure consecutiveness for the first and last days of a year\n\tif m == 1 and int(w) >= 52:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "determine_consecutive_week_number",
        "kind": 2,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "def determine_consecutive_week_number(datetime):\n\t\"\"\"Determines the consecutive calendar week\"\"\"\n\tm = datetime.month\n\t# ISO 8601 calandar week\n\tw = datetime.strftime(\"%V\")\n\t# Ensure consecutiveness for the first and last days of a year\n\tif m == 1 and int(w) >= 52:\n\t\tw = \"00\"\n\telif m == 12 and int(w) <= 1:\n\t\tw = \"53\"",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "getseries",
        "kind": 2,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "def getseries(key, digits):\n\t# series created ?\n\t# Using frappe.qb as frappe.get_values does not allow order_by=None\n\tseries = DocType(\"Series\")\n\tcurrent = (frappe.qb.from_(series).where(series.name == key).for_update().select(\"current\")).run()\n\tif current and current[0][0] is not None:\n\t\tcurrent = current[0][0]\n\t\t# yes, update it\n\t\tfrappe.db.sql(\"UPDATE `tabSeries` SET `current` = `current` + 1 WHERE `name`=%s\", (key,))\n\t\tcurrent = cint(current) + 1",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "revert_series_if_last",
        "kind": 2,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "def revert_series_if_last(key, name, doc=None):\n\t\"\"\"\n\tReverts the series for particular naming series:\n\t* key is naming series\t\t- SINV-.YYYY-.####\n\t* name is actual name\t\t- SINV-2021-0001\n\t1. This function split the key into two parts prefix (SINV-YYYY) & hashes (####).\n\t2. Use prefix to get the current index of that naming series from Series table\n\t3. Then revert the current index.\n\t*For custom naming series:*\n\t1. hash can exist anywhere, if it exist in hashes then it take normal flow.",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "get_default_naming_series",
        "kind": 2,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "def get_default_naming_series(doctype: str) -> str | None:\n\t\"\"\"get default value for `naming_series` property\"\"\"\n\tnaming_series_options = frappe.get_meta(doctype).get_naming_series_options()\n\t# Return first truthy options\n\t# Empty strings are used to avoid populating forms by default\n\tfor option in naming_series_options:\n\t\tif option:\n\t\t\treturn option\ndef validate_name(doctype: str, name: int | str):\n\tif not name:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "validate_name",
        "kind": 2,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "def validate_name(doctype: str, name: int | str):\n\tif not name:\n\t\tfrappe.throw(_(\"No Name Specified for {0}\").format(doctype))\n\tif isinstance(name, int):\n\t\tif is_autoincremented(doctype):\n\t\t\t# this will set the sequence value to be the provided name/value and set it to be used\n\t\t\t# so that the sequence will start from the next value\n\t\t\tfrappe.db.set_next_sequence_val(doctype, name, is_val_used=True)\n\t\t\treturn name\n\t\tfrappe.throw(_(\"Invalid name type (integer) for varchar name column\"), frappe.NameError)",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "append_number_if_name_exists",
        "kind": 2,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "def append_number_if_name_exists(doctype, value, fieldname=\"name\", separator=\"-\", filters=None):\n\tif not filters:\n\t\tfilters = dict()\n\tfilters.update({fieldname: value})\n\texists = frappe.db.exists(doctype, filters)\n\tregex = f\"^{re.escape(value)}{separator}\\\\d+$\"\n\tif exists:\n\t\tlast = frappe.db.sql(\n\t\t\tf\"\"\"SELECT `{fieldname}` FROM `tab{doctype}`\n\t\t\tWHERE `{fieldname}` {frappe.db.REGEX_CHARACTER} %s",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "NAMING_SERIES_PATTERN",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "NAMING_SERIES_PATTERN = re.compile(r\"^[\\w\\- \\/.#{}]+$\", re.UNICODE)\nBRACED_PARAMS_PATTERN = re.compile(r\"(\\{[\\w | #]+\\})\")\n# Types that can be using in naming series fields\nNAMING_SERIES_PART_TYPES = (\n\tint,\n\tstr,\n\tdatetime.datetime,\n\tdatetime.date,\n\tdatetime.time,\n\tdatetime.timedelta,",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "BRACED_PARAMS_PATTERN",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "BRACED_PARAMS_PATTERN = re.compile(r\"(\\{[\\w | #]+\\})\")\n# Types that can be using in naming series fields\nNAMING_SERIES_PART_TYPES = (\n\tint,\n\tstr,\n\tdatetime.datetime,\n\tdatetime.date,\n\tdatetime.time,\n\tdatetime.timedelta,\n)",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "NAMING_SERIES_PART_TYPES",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "NAMING_SERIES_PART_TYPES = (\n\tint,\n\tstr,\n\tdatetime.datetime,\n\tdatetime.date,\n\tdatetime.time,\n\tdatetime.timedelta,\n)\nclass InvalidNamingSeriesError(frappe.ValidationError):\n\tpass",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t__slots__",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t__slots__ = (\"series\",)\n\tdef __init__(self, series: str):\n\t\tself.series = series\n\t\t# Add default number part if missing\n\t\tif \"#\" not in self.series:\n\t\t\tself.series += \".#####\"\n\tdef validate(self):\n\t\tif \".\" not in self.series:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\"Invalid naming series {}: dot (.) missing\").format(frappe.bold(self.series)),",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tself.series",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tself.series = series\n\t\t# Add default number part if missing\n\t\tif \"#\" not in self.series:\n\t\t\tself.series += \".#####\"\n\tdef validate(self):\n\t\tif \".\" not in self.series:\n\t\t\tfrappe.throw(\n\t\t\t\t_(\"Invalid naming series {}: dot (.) missing\").format(frappe.bold(self.series)),\n\t\t\t\texc=InvalidNamingSeriesError,\n\t\t\t)",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tparts",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tparts = self.series.split(\".\")\n\t\treturn parse_naming_series(parts, doc=doc)\n\tdef get_prefix(self) -> str:\n\t\t\"\"\"Naming series stores prefix to maintain a counter in DB. This prefix can be used to update counter or validations.\n\t\te.g. `SINV-.YY.-.####` has prefix of `SINV-22-` in database for year 2022.\n\t\t\"\"\"\n\t\tprefix = None\n\t\tdef fake_counter_backend(partial_series, digits):\n\t\t\tnonlocal prefix\n\t\t\tprefix = partial_series",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tprefix",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tprefix = None\n\t\tdef fake_counter_backend(partial_series, digits):\n\t\t\tnonlocal prefix\n\t\t\tprefix = partial_series\n\t\t\treturn \"#\" * digits\n\t\t# This function evaluates all parts till we hit numerical parts and then\n\t\t# sends prefix + digits to DB to find next number.\n\t\t# Instead of reimplementing the whole parsing logic in multiple places we\n\t\t# can just ask this function to give us the prefix.\n\t\tparse_naming_series(self.series, number_generator=fake_counter_backend)",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\tprefix",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\tprefix = partial_series\n\t\t\treturn \"#\" * digits\n\t\t# This function evaluates all parts till we hit numerical parts and then\n\t\t# sends prefix + digits to DB to find next number.\n\t\t# Instead of reimplementing the whole parsing logic in multiple places we\n\t\t# can just ask this function to give us the prefix.\n\t\tparse_naming_series(self.series, number_generator=fake_counter_backend)\n\t\tif prefix is None:\n\t\t\tfrappe.throw(_(\"Invalid Naming Series: {}\").format(self.series))\n\t\treturn prefix",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tgenerated_names",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tgenerated_names = []\n\t\tfor count in range(1, 4):\n\t\t\tdef fake_counter(_prefix, digits):\n\t\t\t\t# ignore B023: binding `count` is not necessary because\n\t\t\t\t# function is evaluated immediately and it can not be done\n\t\t\t\t# because of function signature requirement\n\t\t\t\treturn str(count).zfill(digits)\n\t\t\tgenerated_names.append(parse_naming_series(self.series, doc=doc, number_generator=fake_counter))\n\t\treturn generated_names\n\tdef update_counter(self, new_count: int) -> None:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tSeries",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tSeries = frappe.qb.DocType(\"Series\")\n\t\tprefix = self.get_prefix()\n\t\t# Initialize if not present in DB\n\t\tif frappe.db.get_value(\"Series\", prefix, \"name\", order_by=\"name\") is None:\n\t\t\tfrappe.qb.into(Series).insert(prefix, 0).columns(\"name\", \"current\").run()\n\t\t(frappe.qb.update(Series).set(Series.current, cint(new_count)).where(Series.name == prefix)).run()\n\tdef get_current_value(self) -> int:\n\t\tprefix = self.get_prefix()\n\t\treturn cint(frappe.db.get_value(\"Series\", prefix, \"current\", order_by=\"name\"))\ndef set_new_name(doc):",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tprefix",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tprefix = self.get_prefix()\n\t\t# Initialize if not present in DB\n\t\tif frappe.db.get_value(\"Series\", prefix, \"name\", order_by=\"name\") is None:\n\t\t\tfrappe.qb.into(Series).insert(prefix, 0).columns(\"name\", \"current\").run()\n\t\t(frappe.qb.update(Series).set(Series.current, cint(new_count)).where(Series.name == prefix)).run()\n\tdef get_current_value(self) -> int:\n\t\tprefix = self.get_prefix()\n\t\treturn cint(frappe.db.get_value(\"Series\", prefix, \"current\", order_by=\"name\"))\ndef set_new_name(doc):\n\t\"\"\"",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tprefix",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tprefix = self.get_prefix()\n\t\treturn cint(frappe.db.get_value(\"Series\", prefix, \"current\", order_by=\"name\"))\ndef set_new_name(doc):\n\t\"\"\"\n\tSets the `name` property for the document based on various rules.\n\t1. If amended doc, set suffix.\n\t2. If `autoname` method is declared, then call it.\n\t3. If `autoname` property is set in the DocType (`meta`), then build it using the `autoname` property.\n\t4. If no rule defined, use hash.\n\t:param doc: Document to be named.",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tmeta",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tmeta = frappe.get_meta(doc.doctype)\n\tautoname = meta.autoname or \"\"\n\tif autoname.lower() not in (\"prompt\", \"uuid\") and not frappe.flags.in_import:\n\t\tdoc.name = None\n\tif is_autoincremented(doc.doctype, meta):\n\t\tdoc.name = frappe.db.get_next_sequence_val(doc.doctype)\n\t\treturn\n\tif meta.autoname == \"UUID\":\n\t\tif not doc.name:\n\t\t\tdoc.name = str(uuid_utils.uuid7())",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tautoname",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tautoname = meta.autoname or \"\"\n\tif autoname.lower() not in (\"prompt\", \"uuid\") and not frappe.flags.in_import:\n\t\tdoc.name = None\n\tif is_autoincremented(doc.doctype, meta):\n\t\tdoc.name = frappe.db.get_next_sequence_val(doc.doctype)\n\t\treturn\n\tif meta.autoname == \"UUID\":\n\t\tif not doc.name:\n\t\t\tdoc.name = str(uuid_utils.uuid7())\n\t\telif isinstance(doc.name, UUID | uuid_utils.UUID):",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tdoc.name",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tdoc.name = None\n\tif is_autoincremented(doc.doctype, meta):\n\t\tdoc.name = frappe.db.get_next_sequence_val(doc.doctype)\n\t\treturn\n\tif meta.autoname == \"UUID\":\n\t\tif not doc.name:\n\t\t\tdoc.name = str(uuid_utils.uuid7())\n\t\telif isinstance(doc.name, UUID | uuid_utils.UUID):\n\t\t\tdoc.name = str(doc.name)\n\t\telif isinstance(doc.name, str):  # validate",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tdoc.name",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tdoc.name = frappe.db.get_next_sequence_val(doc.doctype)\n\t\treturn\n\tif meta.autoname == \"UUID\":\n\t\tif not doc.name:\n\t\t\tdoc.name = str(uuid_utils.uuid7())\n\t\telif isinstance(doc.name, UUID | uuid_utils.UUID):\n\t\t\tdoc.name = str(doc.name)\n\t\telif isinstance(doc.name, str):  # validate\n\t\t\ttry:\n\t\t\t\tUUID(doc.name)",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\tdoc.name",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\tdoc.name = str(uuid_utils.uuid7())\n\t\telif isinstance(doc.name, UUID | uuid_utils.UUID):\n\t\t\tdoc.name = str(doc.name)\n\t\telif isinstance(doc.name, str):  # validate\n\t\t\ttry:\n\t\t\t\tUUID(doc.name)\n\t\t\texcept ValueError:\n\t\t\t\tfrappe.throw(_(\"Invalid value specified for UUID: {}\").format(doc.name), InvalidUUIDValue)\n\t\treturn\n\tif getattr(doc, \"amended_from\", None):",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\tdoc.name",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\tdoc.name = str(doc.name)\n\t\telif isinstance(doc.name, str):  # validate\n\t\t\ttry:\n\t\t\t\tUUID(doc.name)\n\t\t\texcept ValueError:\n\t\t\t\tfrappe.throw(_(\"Invalid value specified for UUID: {}\").format(doc.name), InvalidUUIDValue)\n\t\treturn\n\tif getattr(doc, \"amended_from\", None):\n\t\t_set_amended_name(doc)\n\t\tif doc.name:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tdoc.name",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tdoc.name = doc.doctype\n\tif not doc.name:\n\t\tset_naming_from_document_naming_rule(doc)\n\tif not doc.name:\n\t\tdoc.run_method(\"autoname\")\n\tif not doc.name and autoname:\n\t\tset_name_from_naming_options(autoname, doc)\n\t# at this point, we fall back to name generation with the hash option\n\tif not doc.name:\n\t\tdoc.name = make_autoname(\"hash\", doc.doctype)",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tdoc.name",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tdoc.name = make_autoname(\"hash\", doc.doctype)\n\tdoc.name = validate_name(doc.doctype, doc.name)\ndef is_autoincremented(doctype: str, meta: Optional[\"Meta\"] = None) -> bool:\n\t\"\"\"Checks if the doctype has autoincrement autoname set\"\"\"\n\tif not meta:\n\t\tmeta = frappe.get_meta(doctype)\n\treturn not getattr(meta, \"issingle\", False) and meta.autoname == \"autoincrement\"\ndef set_name_from_naming_options(autoname, doc):\n\t\"\"\"\n\tGet a name based on the autoname field option",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tdoc.name",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tdoc.name = validate_name(doc.doctype, doc.name)\ndef is_autoincremented(doctype: str, meta: Optional[\"Meta\"] = None) -> bool:\n\t\"\"\"Checks if the doctype has autoincrement autoname set\"\"\"\n\tif not meta:\n\t\tmeta = frappe.get_meta(doctype)\n\treturn not getattr(meta, \"issingle\", False) and meta.autoname == \"autoincrement\"\ndef set_name_from_naming_options(autoname, doc):\n\t\"\"\"\n\tGet a name based on the autoname field option\n\t\"\"\"",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tmeta",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tmeta = frappe.get_meta(doctype)\n\treturn not getattr(meta, \"issingle\", False) and meta.autoname == \"autoincrement\"\ndef set_name_from_naming_options(autoname, doc):\n\t\"\"\"\n\tGet a name based on the autoname field option\n\t\"\"\"\n\t_autoname = autoname.lower()\n\tif _autoname.startswith(\"field:\"):\n\t\tdoc.name = _field_autoname(autoname, doc)\n\t\t# if the autoname option is 'field:' and no name was derived, we need to",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t_autoname",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t_autoname = autoname.lower()\n\tif _autoname.startswith(\"field:\"):\n\t\tdoc.name = _field_autoname(autoname, doc)\n\t\t# if the autoname option is 'field:' and no name was derived, we need to\n\t\t# notify\n\t\tif not doc.name:\n\t\t\tfieldname = autoname[6:]\n\t\t\tfrappe.throw(_(\"{0} is required\").format(doc.meta.get_label(fieldname)))\n\telif _autoname.startswith(\"naming_series:\"):\n\t\tset_name_by_naming_series(doc)",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tdoc.name",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tdoc.name = _field_autoname(autoname, doc)\n\t\t# if the autoname option is 'field:' and no name was derived, we need to\n\t\t# notify\n\t\tif not doc.name:\n\t\t\tfieldname = autoname[6:]\n\t\t\tfrappe.throw(_(\"{0} is required\").format(doc.meta.get_label(fieldname)))\n\telif _autoname.startswith(\"naming_series:\"):\n\t\tset_name_by_naming_series(doc)\n\telif _autoname.startswith(\"prompt\"):\n\t\t_prompt_autoname(autoname, doc)",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\tfieldname",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\tfieldname = autoname[6:]\n\t\t\tfrappe.throw(_(\"{0} is required\").format(doc.meta.get_label(fieldname)))\n\telif _autoname.startswith(\"naming_series:\"):\n\t\tset_name_by_naming_series(doc)\n\telif _autoname.startswith(\"prompt\"):\n\t\t_prompt_autoname(autoname, doc)\n\telif _autoname.startswith(\"format:\"):\n\t\tdoc.name = _format_autoname(autoname, doc)\n\telif \"#\" in autoname:\n\t\tdoc.name = make_autoname(autoname, doc=doc)",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tdoc.name",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tdoc.name = _format_autoname(autoname, doc)\n\telif \"#\" in autoname:\n\t\tdoc.name = make_autoname(autoname, doc=doc)\ndef set_naming_from_document_naming_rule(doc):\n\t\"\"\"\n\tEvaluate rules based on \"Document Naming Series\" doctype\n\t\"\"\"\n\tfrom frappe.model.base_document import DOCTYPES_FOR_DOCTYPE\n\tIGNORED_DOCTYPES = {*log_types, *DOCTYPES_FOR_DOCTYPE, \"DefaultValue\", \"Patch Log\"}\n\tif doc.doctype in IGNORED_DOCTYPES:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tdoc.name",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tdoc.name = make_autoname(autoname, doc=doc)\ndef set_naming_from_document_naming_rule(doc):\n\t\"\"\"\n\tEvaluate rules based on \"Document Naming Series\" doctype\n\t\"\"\"\n\tfrom frappe.model.base_document import DOCTYPES_FOR_DOCTYPE\n\tIGNORED_DOCTYPES = {*log_types, *DOCTYPES_FOR_DOCTYPE, \"DefaultValue\", \"Patch Log\"}\n\tif doc.doctype in IGNORED_DOCTYPES:\n\t\treturn\n\tdocument_naming_rules = frappe.cache_manager.get_doctype_map(",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tIGNORED_DOCTYPES",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tIGNORED_DOCTYPES = {*log_types, *DOCTYPES_FOR_DOCTYPE, \"DefaultValue\", \"Patch Log\"}\n\tif doc.doctype in IGNORED_DOCTYPES:\n\t\treturn\n\tdocument_naming_rules = frappe.cache_manager.get_doctype_map(\n\t\t\"Document Naming Rule\",\n\t\tdoc.doctype,\n\t\tfilters={\"document_type\": doc.doctype, \"disabled\": 0},\n\t\torder_by=\"priority desc\",\n\t)\n\tfor d in document_naming_rules:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tdocument_naming_rules",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tdocument_naming_rules = frappe.cache_manager.get_doctype_map(\n\t\t\"Document Naming Rule\",\n\t\tdoc.doctype,\n\t\tfilters={\"document_type\": doc.doctype, \"disabled\": 0},\n\t\torder_by=\"priority desc\",\n\t)\n\tfor d in document_naming_rules:\n\t\tfrappe.get_cached_doc(\"Document Naming Rule\", d.name).apply(doc)\n\t\tif doc.name:\n\t\t\tbreak",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tdoc.naming_series",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tdoc.naming_series = get_default_naming_series(doc.doctype)\n\tif not doc.naming_series:\n\t\tfrappe.throw(frappe._(\"Naming Series mandatory\"))\n\tdoc.name = make_autoname(doc.naming_series + \".#####\", \"\", doc)\ndef make_autoname(key=\"\", doctype=\"\", doc=\"\", *, ignore_validate=False):\n\t\"\"\"\n\t     Creates an autoname from the given key:\n\t     **Autoname rules:**\n\t              * The key is separated by '.'\n\t              * '####' represents a series. The string before this part becomes the prefix:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tdoc.name",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tdoc.name = make_autoname(doc.naming_series + \".#####\", \"\", doc)\ndef make_autoname(key=\"\", doctype=\"\", doc=\"\", *, ignore_validate=False):\n\t\"\"\"\n\t     Creates an autoname from the given key:\n\t     **Autoname rules:**\n\t              * The key is separated by '.'\n\t              * '####' represents a series. The string before this part becomes the prefix:\n\t                     Example: ABC.#### creates a series ABC0001, ABC0002 etc\n\t              * 'MM' represents the current month\n\t              * 'YY' and 'YYYY' represent the current year",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tseries",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tseries = NamingSeries(key)\n\treturn series.generate_next_name(doc, ignore_validate=ignore_validate)\ndef _get_timestamp_prefix():\n\tts = int(time.time() * 10)  # time in deciseconds\n\t# we ~~don't need~~ can't get ordering over entire lifetime, so we wrap the time.\n\tts = ts % (32**4)\n\treturn base64.b32hexencode(ts.to_bytes(length=5, byteorder=\"big\")).decode()[-4:].lower()\ndef _generate_random_string(length=10):\n\t\"\"\"Better version of frappe.generate_hash for naming.\n\tThis uses entire base32 instead of base16 used by generate_hash. So it has twice as many",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tts",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tts = int(time.time() * 10)  # time in deciseconds\n\t# we ~~don't need~~ can't get ordering over entire lifetime, so we wrap the time.\n\tts = ts % (32**4)\n\treturn base64.b32hexencode(ts.to_bytes(length=5, byteorder=\"big\")).decode()[-4:].lower()\ndef _generate_random_string(length=10):\n\t\"\"\"Better version of frappe.generate_hash for naming.\n\tThis uses entire base32 instead of base16 used by generate_hash. So it has twice as many\n\tcharacters and hence more likely to have shorter common prefixes. i.e. slighly faster comparisons and less conflicts.\n\tWhy not base36?\n\tIt's not in standard library else using all characters is probably better approach.",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tts",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tts = ts % (32**4)\n\treturn base64.b32hexencode(ts.to_bytes(length=5, byteorder=\"big\")).decode()[-4:].lower()\ndef _generate_random_string(length=10):\n\t\"\"\"Better version of frappe.generate_hash for naming.\n\tThis uses entire base32 instead of base16 used by generate_hash. So it has twice as many\n\tcharacters and hence more likely to have shorter common prefixes. i.e. slighly faster comparisons and less conflicts.\n\tWhy not base36?\n\tIt's not in standard library else using all characters is probably better approach.\n\tWhy not base64?\n\tMySQL is case-insensitive, we can't use both upper and lower case characters.",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tname = \"\"\n\t_sentinel = object()\n\tif isinstance(parts, str):\n\t\tparts = parts.split(\".\")\n\tif not number_generator:\n\t\tnumber_generator = getseries\n\tseries_set = False\n\ttoday = now_datetime()\n\tfor e in parts:\n\t\tif not e:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t_sentinel",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t_sentinel = object()\n\tif isinstance(parts, str):\n\t\tparts = parts.split(\".\")\n\tif not number_generator:\n\t\tnumber_generator = getseries\n\tseries_set = False\n\ttoday = now_datetime()\n\tfor e in parts:\n\t\tif not e:\n\t\t\tcontinue",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tparts",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tparts = parts.split(\".\")\n\tif not number_generator:\n\t\tnumber_generator = getseries\n\tseries_set = False\n\ttoday = now_datetime()\n\tfor e in parts:\n\t\tif not e:\n\t\t\tcontinue\n\t\tpart = \"\"\n\t\tif e.startswith(\"#\"):",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tnumber_generator",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tnumber_generator = getseries\n\tseries_set = False\n\ttoday = now_datetime()\n\tfor e in parts:\n\t\tif not e:\n\t\t\tcontinue\n\t\tpart = \"\"\n\t\tif e.startswith(\"#\"):\n\t\t\tif not series_set:\n\t\t\t\tdigits = len(e)",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tseries_set",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tseries_set = False\n\ttoday = now_datetime()\n\tfor e in parts:\n\t\tif not e:\n\t\t\tcontinue\n\t\tpart = \"\"\n\t\tif e.startswith(\"#\"):\n\t\t\tif not series_set:\n\t\t\t\tdigits = len(e)\n\t\t\t\tpart = number_generator(name, digits)",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\ttoday",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\ttoday = now_datetime()\n\tfor e in parts:\n\t\tif not e:\n\t\t\tcontinue\n\t\tpart = \"\"\n\t\tif e.startswith(\"#\"):\n\t\t\tif not series_set:\n\t\t\t\tdigits = len(e)\n\t\t\t\tpart = number_generator(name, digits)\n\t\t\t\tseries_set = True",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tpart",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tpart = \"\"\n\t\tif e.startswith(\"#\"):\n\t\t\tif not series_set:\n\t\t\t\tdigits = len(e)\n\t\t\t\tpart = number_generator(name, digits)\n\t\t\t\tseries_set = True\n\t\telif e == \"YY\":\n\t\t\tpart = today.strftime(\"%y\")\n\t\telif e == \"MM\":\n\t\t\tpart = today.strftime(\"%m\")",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdigits",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\t\tdigits = len(e)\n\t\t\t\tpart = number_generator(name, digits)\n\t\t\t\tseries_set = True\n\t\telif e == \"YY\":\n\t\t\tpart = today.strftime(\"%y\")\n\t\telif e == \"MM\":\n\t\t\tpart = today.strftime(\"%m\")\n\t\telif e == \"DD\":\n\t\t\tpart = today.strftime(\"%d\")\n\t\telif e == \"YYYY\":",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tpart",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\t\tpart = number_generator(name, digits)\n\t\t\t\tseries_set = True\n\t\telif e == \"YY\":\n\t\t\tpart = today.strftime(\"%y\")\n\t\telif e == \"MM\":\n\t\t\tpart = today.strftime(\"%m\")\n\t\telif e == \"DD\":\n\t\t\tpart = today.strftime(\"%d\")\n\t\telif e == \"YYYY\":\n\t\t\tpart = today.strftime(\"%Y\")",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tseries_set",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\t\tseries_set = True\n\t\telif e == \"YY\":\n\t\t\tpart = today.strftime(\"%y\")\n\t\telif e == \"MM\":\n\t\t\tpart = today.strftime(\"%m\")\n\t\telif e == \"DD\":\n\t\t\tpart = today.strftime(\"%d\")\n\t\telif e == \"YYYY\":\n\t\t\tpart = today.strftime(\"%Y\")\n\t\telif e == \"WW\":",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\tpart",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\tpart = today.strftime(\"%y\")\n\t\telif e == \"MM\":\n\t\t\tpart = today.strftime(\"%m\")\n\t\telif e == \"DD\":\n\t\t\tpart = today.strftime(\"%d\")\n\t\telif e == \"YYYY\":\n\t\t\tpart = today.strftime(\"%Y\")\n\t\telif e == \"WW\":\n\t\t\tpart = determine_consecutive_week_number(today)\n\t\telif e == \"timestamp\":",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\tpart",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\tpart = today.strftime(\"%m\")\n\t\telif e == \"DD\":\n\t\t\tpart = today.strftime(\"%d\")\n\t\telif e == \"YYYY\":\n\t\t\tpart = today.strftime(\"%Y\")\n\t\telif e == \"WW\":\n\t\t\tpart = determine_consecutive_week_number(today)\n\t\telif e == \"timestamp\":\n\t\t\tpart = str(today)\n\t\telif doc and (e.startswith(\"{\") or doc.get(e, _sentinel) is not _sentinel):",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\tpart",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\tpart = today.strftime(\"%d\")\n\t\telif e == \"YYYY\":\n\t\t\tpart = today.strftime(\"%Y\")\n\t\telif e == \"WW\":\n\t\t\tpart = determine_consecutive_week_number(today)\n\t\telif e == \"timestamp\":\n\t\t\tpart = str(today)\n\t\telif doc and (e.startswith(\"{\") or doc.get(e, _sentinel) is not _sentinel):\n\t\t\te = e.replace(\"{\", \"\").replace(\"}\", \"\")\n\t\t\tpart = doc.get(e)",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\tpart",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\tpart = today.strftime(\"%Y\")\n\t\telif e == \"WW\":\n\t\t\tpart = determine_consecutive_week_number(today)\n\t\telif e == \"timestamp\":\n\t\t\tpart = str(today)\n\t\telif doc and (e.startswith(\"{\") or doc.get(e, _sentinel) is not _sentinel):\n\t\t\te = e.replace(\"{\", \"\").replace(\"}\", \"\")\n\t\t\tpart = doc.get(e)\n\t\telif method := has_custom_parser(e):\n\t\t\tpart = frappe.get_attr(method[0])(doc, e)",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\tpart",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\tpart = determine_consecutive_week_number(today)\n\t\telif e == \"timestamp\":\n\t\t\tpart = str(today)\n\t\telif doc and (e.startswith(\"{\") or doc.get(e, _sentinel) is not _sentinel):\n\t\t\te = e.replace(\"{\", \"\").replace(\"}\", \"\")\n\t\t\tpart = doc.get(e)\n\t\telif method := has_custom_parser(e):\n\t\t\tpart = frappe.get_attr(method[0])(doc, e)\n\t\telse:\n\t\t\tpart = e",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\tpart",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\tpart = str(today)\n\t\telif doc and (e.startswith(\"{\") or doc.get(e, _sentinel) is not _sentinel):\n\t\t\te = e.replace(\"{\", \"\").replace(\"}\", \"\")\n\t\t\tpart = doc.get(e)\n\t\telif method := has_custom_parser(e):\n\t\t\tpart = frappe.get_attr(method[0])(doc, e)\n\t\telse:\n\t\t\tpart = e\n\t\tif isinstance(part, str):\n\t\t\tname += part",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\te",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\te = e.replace(\"{\", \"\").replace(\"}\", \"\")\n\t\t\tpart = doc.get(e)\n\t\telif method := has_custom_parser(e):\n\t\t\tpart = frappe.get_attr(method[0])(doc, e)\n\t\telse:\n\t\t\tpart = e\n\t\tif isinstance(part, str):\n\t\t\tname += part\n\t\telif isinstance(part, NAMING_SERIES_PART_TYPES):\n\t\t\tname += cstr(part).strip()",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\tpart",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\tpart = doc.get(e)\n\t\telif method := has_custom_parser(e):\n\t\t\tpart = frappe.get_attr(method[0])(doc, e)\n\t\telse:\n\t\t\tpart = e\n\t\tif isinstance(part, str):\n\t\t\tname += part\n\t\telif isinstance(part, NAMING_SERIES_PART_TYPES):\n\t\t\tname += cstr(part).strip()\n\treturn name",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\tpart",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\tpart = frappe.get_attr(method[0])(doc, e)\n\t\telse:\n\t\t\tpart = e\n\t\tif isinstance(part, str):\n\t\t\tname += part\n\t\telif isinstance(part, NAMING_SERIES_PART_TYPES):\n\t\t\tname += cstr(part).strip()\n\treturn name\ndef has_custom_parser(e):\n\t\"\"\"Return True if the naming series part has a custom parser.\"\"\"",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\tpart",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\tpart = e\n\t\tif isinstance(part, str):\n\t\t\tname += part\n\t\telif isinstance(part, NAMING_SERIES_PART_TYPES):\n\t\t\tname += cstr(part).strip()\n\treturn name\ndef has_custom_parser(e):\n\t\"\"\"Return True if the naming series part has a custom parser.\"\"\"\n\treturn frappe.get_hooks(\"naming_series_variables\", {}).get(e)\ndef determine_consecutive_week_number(datetime):",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tm",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tm = datetime.month\n\t# ISO 8601 calandar week\n\tw = datetime.strftime(\"%V\")\n\t# Ensure consecutiveness for the first and last days of a year\n\tif m == 1 and int(w) >= 52:\n\t\tw = \"00\"\n\telif m == 12 and int(w) <= 1:\n\t\tw = \"53\"\n\treturn w\ndef getseries(key, digits):",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tw",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tw = datetime.strftime(\"%V\")\n\t# Ensure consecutiveness for the first and last days of a year\n\tif m == 1 and int(w) >= 52:\n\t\tw = \"00\"\n\telif m == 12 and int(w) <= 1:\n\t\tw = \"53\"\n\treturn w\ndef getseries(key, digits):\n\t# series created ?\n\t# Using frappe.qb as frappe.get_values does not allow order_by=None",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tw",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tw = \"00\"\n\telif m == 12 and int(w) <= 1:\n\t\tw = \"53\"\n\treturn w\ndef getseries(key, digits):\n\t# series created ?\n\t# Using frappe.qb as frappe.get_values does not allow order_by=None\n\tseries = DocType(\"Series\")\n\tcurrent = (frappe.qb.from_(series).where(series.name == key).for_update().select(\"current\")).run()\n\tif current and current[0][0] is not None:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tw",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tw = \"53\"\n\treturn w\ndef getseries(key, digits):\n\t# series created ?\n\t# Using frappe.qb as frappe.get_values does not allow order_by=None\n\tseries = DocType(\"Series\")\n\tcurrent = (frappe.qb.from_(series).where(series.name == key).for_update().select(\"current\")).run()\n\tif current and current[0][0] is not None:\n\t\tcurrent = current[0][0]\n\t\t# yes, update it",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tseries",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tseries = DocType(\"Series\")\n\tcurrent = (frappe.qb.from_(series).where(series.name == key).for_update().select(\"current\")).run()\n\tif current and current[0][0] is not None:\n\t\tcurrent = current[0][0]\n\t\t# yes, update it\n\t\tfrappe.db.sql(\"UPDATE `tabSeries` SET `current` = `current` + 1 WHERE `name`=%s\", (key,))\n\t\tcurrent = cint(current) + 1\n\telse:\n\t\t# no, create it\n\t\tfrappe.db.sql(\"INSERT INTO `tabSeries` (`name`, `current`) VALUES (%s, 1)\", (key,))",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tcurrent",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tcurrent = (frappe.qb.from_(series).where(series.name == key).for_update().select(\"current\")).run()\n\tif current and current[0][0] is not None:\n\t\tcurrent = current[0][0]\n\t\t# yes, update it\n\t\tfrappe.db.sql(\"UPDATE `tabSeries` SET `current` = `current` + 1 WHERE `name`=%s\", (key,))\n\t\tcurrent = cint(current) + 1\n\telse:\n\t\t# no, create it\n\t\tfrappe.db.sql(\"INSERT INTO `tabSeries` (`name`, `current`) VALUES (%s, 1)\", (key,))\n\t\tcurrent = 1",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tcurrent",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tcurrent = current[0][0]\n\t\t# yes, update it\n\t\tfrappe.db.sql(\"UPDATE `tabSeries` SET `current` = `current` + 1 WHERE `name`=%s\", (key,))\n\t\tcurrent = cint(current) + 1\n\telse:\n\t\t# no, create it\n\t\tfrappe.db.sql(\"INSERT INTO `tabSeries` (`name`, `current`) VALUES (%s, 1)\", (key,))\n\t\tcurrent = 1\n\treturn (\"%0\" + str(digits) + \"d\") % current\ndef revert_series_if_last(key, name, doc=None):",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tcurrent",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tcurrent = cint(current) + 1\n\telse:\n\t\t# no, create it\n\t\tfrappe.db.sql(\"INSERT INTO `tabSeries` (`name`, `current`) VALUES (%s, 1)\", (key,))\n\t\tcurrent = 1\n\treturn (\"%0\" + str(digits) + \"d\") % current\ndef revert_series_if_last(key, name, doc=None):\n\t\"\"\"\n\tReverts the series for particular naming series:\n\t* key is naming series\t\t- SINV-.YYYY-.####",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tcurrent",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tcurrent = 1\n\treturn (\"%0\" + str(digits) + \"d\") % current\ndef revert_series_if_last(key, name, doc=None):\n\t\"\"\"\n\tReverts the series for particular naming series:\n\t* key is naming series\t\t- SINV-.YYYY-.####\n\t* name is actual name\t\t- SINV-2021-0001\n\t1. This function split the key into two parts prefix (SINV-YYYY) & hashes (####).\n\t2. Use prefix to get the current index of that naming series from Series table\n\t3. Then revert the current index.",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\thash",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\thash = re.search(\"#+\", key)\n\t\t\tif not hash:\n\t\t\t\treturn\n\t\t\tname = name.replace(hashes, \"\")\n\t\t\tprefix = prefix.replace(hash.group(), \"\")\n\telse:\n\t\tprefix = key\n\tif \".\" in prefix:\n\t\tprefix = parse_naming_series(prefix.split(\".\"), doc=doc)\n\tcount = cint(name.replace(prefix, \"\"))",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\tname",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\tname = name.replace(hashes, \"\")\n\t\t\tprefix = prefix.replace(hash.group(), \"\")\n\telse:\n\t\tprefix = key\n\tif \".\" in prefix:\n\t\tprefix = parse_naming_series(prefix.split(\".\"), doc=doc)\n\tcount = cint(name.replace(prefix, \"\"))\n\tseries = DocType(\"Series\")\n\tcurrent = (frappe.qb.from_(series).where(series.name == prefix).for_update().select(\"current\")).run()\n\tif current and current[0][0] == count:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\tprefix",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\tprefix = prefix.replace(hash.group(), \"\")\n\telse:\n\t\tprefix = key\n\tif \".\" in prefix:\n\t\tprefix = parse_naming_series(prefix.split(\".\"), doc=doc)\n\tcount = cint(name.replace(prefix, \"\"))\n\tseries = DocType(\"Series\")\n\tcurrent = (frappe.qb.from_(series).where(series.name == prefix).for_update().select(\"current\")).run()\n\tif current and current[0][0] == count:\n\t\tfrappe.db.sql(\"UPDATE `tabSeries` SET `current` = `current` - 1 WHERE `name`=%s\", prefix)",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tprefix",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tprefix = key\n\tif \".\" in prefix:\n\t\tprefix = parse_naming_series(prefix.split(\".\"), doc=doc)\n\tcount = cint(name.replace(prefix, \"\"))\n\tseries = DocType(\"Series\")\n\tcurrent = (frappe.qb.from_(series).where(series.name == prefix).for_update().select(\"current\")).run()\n\tif current and current[0][0] == count:\n\t\tfrappe.db.sql(\"UPDATE `tabSeries` SET `current` = `current` - 1 WHERE `name`=%s\", prefix)\ndef get_default_naming_series(doctype: str) -> str | None:\n\t\"\"\"get default value for `naming_series` property\"\"\"",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tprefix",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tprefix = parse_naming_series(prefix.split(\".\"), doc=doc)\n\tcount = cint(name.replace(prefix, \"\"))\n\tseries = DocType(\"Series\")\n\tcurrent = (frappe.qb.from_(series).where(series.name == prefix).for_update().select(\"current\")).run()\n\tif current and current[0][0] == count:\n\t\tfrappe.db.sql(\"UPDATE `tabSeries` SET `current` = `current` - 1 WHERE `name`=%s\", prefix)\ndef get_default_naming_series(doctype: str) -> str | None:\n\t\"\"\"get default value for `naming_series` property\"\"\"\n\tnaming_series_options = frappe.get_meta(doctype).get_naming_series_options()\n\t# Return first truthy options",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tcount",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tcount = cint(name.replace(prefix, \"\"))\n\tseries = DocType(\"Series\")\n\tcurrent = (frappe.qb.from_(series).where(series.name == prefix).for_update().select(\"current\")).run()\n\tif current and current[0][0] == count:\n\t\tfrappe.db.sql(\"UPDATE `tabSeries` SET `current` = `current` - 1 WHERE `name`=%s\", prefix)\ndef get_default_naming_series(doctype: str) -> str | None:\n\t\"\"\"get default value for `naming_series` property\"\"\"\n\tnaming_series_options = frappe.get_meta(doctype).get_naming_series_options()\n\t# Return first truthy options\n\t# Empty strings are used to avoid populating forms by default",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tseries",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tseries = DocType(\"Series\")\n\tcurrent = (frappe.qb.from_(series).where(series.name == prefix).for_update().select(\"current\")).run()\n\tif current and current[0][0] == count:\n\t\tfrappe.db.sql(\"UPDATE `tabSeries` SET `current` = `current` - 1 WHERE `name`=%s\", prefix)\ndef get_default_naming_series(doctype: str) -> str | None:\n\t\"\"\"get default value for `naming_series` property\"\"\"\n\tnaming_series_options = frappe.get_meta(doctype).get_naming_series_options()\n\t# Return first truthy options\n\t# Empty strings are used to avoid populating forms by default\n\tfor option in naming_series_options:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tcurrent",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tcurrent = (frappe.qb.from_(series).where(series.name == prefix).for_update().select(\"current\")).run()\n\tif current and current[0][0] == count:\n\t\tfrappe.db.sql(\"UPDATE `tabSeries` SET `current` = `current` - 1 WHERE `name`=%s\", prefix)\ndef get_default_naming_series(doctype: str) -> str | None:\n\t\"\"\"get default value for `naming_series` property\"\"\"\n\tnaming_series_options = frappe.get_meta(doctype).get_naming_series_options()\n\t# Return first truthy options\n\t# Empty strings are used to avoid populating forms by default\n\tfor option in naming_series_options:\n\t\tif option:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tnaming_series_options",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tnaming_series_options = frappe.get_meta(doctype).get_naming_series_options()\n\t# Return first truthy options\n\t# Empty strings are used to avoid populating forms by default\n\tfor option in naming_series_options:\n\t\tif option:\n\t\t\treturn option\ndef validate_name(doctype: str, name: int | str):\n\tif not name:\n\t\tfrappe.throw(_(\"No Name Specified for {0}\").format(doctype))\n\tif isinstance(name, int):",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tname = name.strip()\n\tif not frappe.get_meta(doctype).get(\"issingle\") and (doctype == name) and (name != \"DocType\"):\n\t\tfrappe.throw(_(\"Name of {0} cannot be {1}\").format(doctype, name), frappe.NameError)\n\tspecial_characters = \"<>\"\n\tif re.findall(f\"[{special_characters}]+\", name):\n\t\tmessage = \", \".join(f\"'{c}'\" for c in special_characters)\n\t\tfrappe.throw(_(\"Name cannot contain special characters like {0}\").format(message), frappe.NameError)\n\treturn name\ndef append_number_if_name_exists(doctype, value, fieldname=\"name\", separator=\"-\", filters=None):\n\tif not filters:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tspecial_characters",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tspecial_characters = \"<>\"\n\tif re.findall(f\"[{special_characters}]+\", name):\n\t\tmessage = \", \".join(f\"'{c}'\" for c in special_characters)\n\t\tfrappe.throw(_(\"Name cannot contain special characters like {0}\").format(message), frappe.NameError)\n\treturn name\ndef append_number_if_name_exists(doctype, value, fieldname=\"name\", separator=\"-\", filters=None):\n\tif not filters:\n\t\tfilters = dict()\n\tfilters.update({fieldname: value})\n\texists = frappe.db.exists(doctype, filters)",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tmessage",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tmessage = \", \".join(f\"'{c}'\" for c in special_characters)\n\t\tfrappe.throw(_(\"Name cannot contain special characters like {0}\").format(message), frappe.NameError)\n\treturn name\ndef append_number_if_name_exists(doctype, value, fieldname=\"name\", separator=\"-\", filters=None):\n\tif not filters:\n\t\tfilters = dict()\n\tfilters.update({fieldname: value})\n\texists = frappe.db.exists(doctype, filters)\n\tregex = f\"^{re.escape(value)}{separator}\\\\d+$\"\n\tif exists:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tfilters",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tfilters = dict()\n\tfilters.update({fieldname: value})\n\texists = frappe.db.exists(doctype, filters)\n\tregex = f\"^{re.escape(value)}{separator}\\\\d+$\"\n\tif exists:\n\t\tlast = frappe.db.sql(\n\t\t\tf\"\"\"SELECT `{fieldname}` FROM `tab{doctype}`\n\t\t\tWHERE `{fieldname}` {frappe.db.REGEX_CHARACTER} %s\n\t\t\tORDER BY length({fieldname}) DESC,\n\t\t\t`{fieldname}` DESC LIMIT 1\"\"\",",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\texists",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\texists = frappe.db.exists(doctype, filters)\n\tregex = f\"^{re.escape(value)}{separator}\\\\d+$\"\n\tif exists:\n\t\tlast = frappe.db.sql(\n\t\t\tf\"\"\"SELECT `{fieldname}` FROM `tab{doctype}`\n\t\t\tWHERE `{fieldname}` {frappe.db.REGEX_CHARACTER} %s\n\t\t\tORDER BY length({fieldname}) DESC,\n\t\t\t`{fieldname}` DESC LIMIT 1\"\"\",\n\t\t\tregex,\n\t\t)",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tregex",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tregex = f\"^{re.escape(value)}{separator}\\\\d+$\"\n\tif exists:\n\t\tlast = frappe.db.sql(\n\t\t\tf\"\"\"SELECT `{fieldname}` FROM `tab{doctype}`\n\t\t\tWHERE `{fieldname}` {frappe.db.REGEX_CHARACTER} %s\n\t\t\tORDER BY length({fieldname}) DESC,\n\t\t\t`{fieldname}` DESC LIMIT 1\"\"\",\n\t\t\tregex,\n\t\t)\n\t\tif last:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tlast",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tlast = frappe.db.sql(\n\t\t\tf\"\"\"SELECT `{fieldname}` FROM `tab{doctype}`\n\t\t\tWHERE `{fieldname}` {frappe.db.REGEX_CHARACTER} %s\n\t\t\tORDER BY length({fieldname}) DESC,\n\t\t\t`{fieldname}` DESC LIMIT 1\"\"\",\n\t\t\tregex,\n\t\t)\n\t\tif last:\n\t\t\tcount = str(cint(last[0][0].rsplit(separator, 1)[1]) + 1)\n\t\telse:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\tcount",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\tcount = str(cint(last[0][0].rsplit(separator, 1)[1]) + 1)\n\t\telse:\n\t\t\tcount = \"1\"\n\t\tvalue = f\"{value}{separator}{count}\"\n\treturn value\ndef _set_amended_name(doc):\n\tamend_naming_rule = frappe.db.get_value(\n\t\t\"Amended Document Naming Settings\", {\"document_type\": doc.doctype}, \"action\", cache=True\n\t)\n\tif not amend_naming_rule:",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\t\tcount",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\t\tcount = \"1\"\n\t\tvalue = f\"{value}{separator}{count}\"\n\treturn value\ndef _set_amended_name(doc):\n\tamend_naming_rule = frappe.db.get_value(\n\t\t\"Amended Document Naming Settings\", {\"document_type\": doc.doctype}, \"action\", cache=True\n\t)\n\tif not amend_naming_rule:\n\t\tamend_naming_rule = frappe.db.get_single_value(\n\t\t\t\"Document Naming Settings\", \"default_amend_naming\", cache=True",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tvalue",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tvalue = f\"{value}{separator}{count}\"\n\treturn value\ndef _set_amended_name(doc):\n\tamend_naming_rule = frappe.db.get_value(\n\t\t\"Amended Document Naming Settings\", {\"document_type\": doc.doctype}, \"action\", cache=True\n\t)\n\tif not amend_naming_rule:\n\t\tamend_naming_rule = frappe.db.get_single_value(\n\t\t\t\"Document Naming Settings\", \"default_amend_naming\", cache=True\n\t\t)",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tamend_naming_rule",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tamend_naming_rule = frappe.db.get_value(\n\t\t\"Amended Document Naming Settings\", {\"document_type\": doc.doctype}, \"action\", cache=True\n\t)\n\tif not amend_naming_rule:\n\t\tamend_naming_rule = frappe.db.get_single_value(\n\t\t\t\"Document Naming Settings\", \"default_amend_naming\", cache=True\n\t\t)\n\tif amend_naming_rule == \"Default Naming\":\n\t\treturn\n\tam_id = 1",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tamend_naming_rule",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tamend_naming_rule = frappe.db.get_single_value(\n\t\t\t\"Document Naming Settings\", \"default_amend_naming\", cache=True\n\t\t)\n\tif amend_naming_rule == \"Default Naming\":\n\t\treturn\n\tam_id = 1\n\tam_prefix = doc.amended_from\n\tif frappe.db.get_value(doc.doctype, doc.amended_from, \"amended_from\"):\n\t\tam_id = cint(doc.amended_from.split(\"-\")[-1]) + 1\n\t\tam_prefix = \"-\".join(doc.amended_from.split(\"-\")[:-1])  # except the last hyphen",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tam_id",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tam_id = 1\n\tam_prefix = doc.amended_from\n\tif frappe.db.get_value(doc.doctype, doc.amended_from, \"amended_from\"):\n\t\tam_id = cint(doc.amended_from.split(\"-\")[-1]) + 1\n\t\tam_prefix = \"-\".join(doc.amended_from.split(\"-\")[:-1])  # except the last hyphen\n\tdoc.name = am_prefix + \"-\" + str(am_id)\n\treturn doc.name\ndef _field_autoname(autoname, doc, skip_slicing=None):\n\t\"\"\"\n\tGenerate a name using `DocType` field. This is called when the doctype's",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tam_prefix",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tam_prefix = doc.amended_from\n\tif frappe.db.get_value(doc.doctype, doc.amended_from, \"amended_from\"):\n\t\tam_id = cint(doc.amended_from.split(\"-\")[-1]) + 1\n\t\tam_prefix = \"-\".join(doc.amended_from.split(\"-\")[:-1])  # except the last hyphen\n\tdoc.name = am_prefix + \"-\" + str(am_id)\n\treturn doc.name\ndef _field_autoname(autoname, doc, skip_slicing=None):\n\t\"\"\"\n\tGenerate a name using `DocType` field. This is called when the doctype's\n\t`autoname` field starts with 'field:'",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tam_id",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tam_id = cint(doc.amended_from.split(\"-\")[-1]) + 1\n\t\tam_prefix = \"-\".join(doc.amended_from.split(\"-\")[:-1])  # except the last hyphen\n\tdoc.name = am_prefix + \"-\" + str(am_id)\n\treturn doc.name\ndef _field_autoname(autoname, doc, skip_slicing=None):\n\t\"\"\"\n\tGenerate a name using `DocType` field. This is called when the doctype's\n\t`autoname` field starts with 'field:'\n\t\"\"\"\n\tfieldname = autoname if skip_slicing else autoname[6:]",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tam_prefix",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tam_prefix = \"-\".join(doc.amended_from.split(\"-\")[:-1])  # except the last hyphen\n\tdoc.name = am_prefix + \"-\" + str(am_id)\n\treturn doc.name\ndef _field_autoname(autoname, doc, skip_slicing=None):\n\t\"\"\"\n\tGenerate a name using `DocType` field. This is called when the doctype's\n\t`autoname` field starts with 'field:'\n\t\"\"\"\n\tfieldname = autoname if skip_slicing else autoname[6:]\n\treturn (cstr(doc.get(fieldname)) or \"\").strip()",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tdoc.name",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tdoc.name = am_prefix + \"-\" + str(am_id)\n\treturn doc.name\ndef _field_autoname(autoname, doc, skip_slicing=None):\n\t\"\"\"\n\tGenerate a name using `DocType` field. This is called when the doctype's\n\t`autoname` field starts with 'field:'\n\t\"\"\"\n\tfieldname = autoname if skip_slicing else autoname[6:]\n\treturn (cstr(doc.get(fieldname)) or \"\").strip()\ndef _prompt_autoname(autoname, doc):",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tfieldname",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tfieldname = autoname if skip_slicing else autoname[6:]\n\treturn (cstr(doc.get(fieldname)) or \"\").strip()\ndef _prompt_autoname(autoname, doc):\n\t\"\"\"\n\tGenerate a name using Prompt option. This simply means the user will have to set the name manually.\n\tThis is called when the doctype's `autoname` field starts with 'prompt'.\n\t\"\"\"\n\t# set from __newname in save.py\n\tif not doc.name:\n\t\tfrappe.throw(_(\"Please set the document name\"))",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tfirst_colon_index",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tfirst_colon_index = autoname.find(\":\")\n\tautoname_value = autoname[first_colon_index + 1 :]\n\tdef get_param_value_for_match(match):\n\t\tparam = match.group()\n\t\treturn parse_naming_series([param[1:-1]], doc=doc)\n\t# Replace braced params with their parsed value\n\tname = BRACED_PARAMS_PATTERN.sub(get_param_value_for_match, autoname_value)\n\treturn name",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tautoname_value",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tautoname_value = autoname[first_colon_index + 1 :]\n\tdef get_param_value_for_match(match):\n\t\tparam = match.group()\n\t\treturn parse_naming_series([param[1:-1]], doc=doc)\n\t# Replace braced params with their parsed value\n\tname = BRACED_PARAMS_PATTERN.sub(get_param_value_for_match, autoname_value)\n\treturn name",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\t\tparam",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\t\tparam = match.group()\n\t\treturn parse_naming_series([param[1:-1]], doc=doc)\n\t# Replace braced params with their parsed value\n\tname = BRACED_PARAMS_PATTERN.sub(get_param_value_for_match, autoname_value)\n\treturn name",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "sites.django.core.utils.frappe_naming",
        "description": "sites.django.core.utils.frappe_naming",
        "peekOfCode": "\tname = BRACED_PARAMS_PATTERN.sub(get_param_value_for_match, autoname_value)\n\treturn name",
        "detail": "sites.django.core.utils.frappe_naming",
        "documentation": {}
    },
    {
        "label": "normalize_name",
        "kind": 2,
        "importPath": "sites.django.core.utils.get_model_details",
        "description": "sites.django.core.utils.get_model_details",
        "peekOfCode": "def normalize_name(name):\n    \"\"\"\n    Normalize a name by removing spaces and converting to lowercase.\n    \"\"\"\n    return name.replace(\" \", \"\").lower()\ndef find_matching_doc(module, name):\n    \"\"\"\n    Find a document in the module by matching either the exact 'id' \n    or by removing spaces and ignoring case in both the name and the doc ID.\n    Args:",
        "detail": "sites.django.core.utils.get_model_details",
        "documentation": {}
    },
    {
        "label": "find_matching_doc",
        "kind": 2,
        "importPath": "sites.django.core.utils.get_model_details",
        "description": "sites.django.core.utils.get_model_details",
        "peekOfCode": "def find_matching_doc(module, name):\n    \"\"\"\n    Find a document in the module by matching either the exact 'id' \n    or by removing spaces and ignoring case in both the name and the doc ID.\n    Args:\n        module (dict): The module containing the documents.\n        name (str): The name or ID to search for.\n    Returns:\n        dict or None: The matched document, or None if no match is found.\n    \"\"\"",
        "detail": "sites.django.core.utils.get_model_details",
        "documentation": {}
    },
    {
        "label": "build_file_path",
        "kind": 2,
        "importPath": "sites.django.core.utils.get_model_details",
        "description": "sites.django.core.utils.get_model_details",
        "peekOfCode": "def build_file_path(base_path, app_id, module_id, doc_id, filename=None):\n    \"\"\"\n    Construct the file path for a document.\n    Args:\n        base_path (str): The root path for apps.\n        app_id (str): The application ID.\n        module_id (str): The module ID.\n        doc_id (str): The document ID.\n        filename (str, optional): The file name to use. Defaults to `doc_id.json`.\n    Returns:",
        "detail": "sites.django.core.utils.get_model_details",
        "documentation": {}
    },
    {
        "label": "get_file_content",
        "kind": 2,
        "importPath": "sites.django.core.utils.get_model_details",
        "description": "sites.django.core.utils.get_model_details",
        "peekOfCode": "def get_file_content(name, filename=None):\n    \"\"\"\n    Fetch file content for a specific document based on the provided name and filename.\n    Args:\n        name (str): The name of the document.\n        filename (str, optional): The name of the file to retrieve. Defaults to None.\n    Returns:\n        dict: The content of the file as a dictionary, or an error message if not found.\n    \"\"\"\n    try:",
        "detail": "sites.django.core.utils.get_model_details",
        "documentation": {}
    },
    {
        "label": "get_model_doctype_json",
        "kind": 2,
        "importPath": "sites.django.core.utils.get_model_details",
        "description": "sites.django.core.utils.get_model_details",
        "peekOfCode": "def get_model_doctype_json(model_name):\n    \"\"\"\n    Fetch settings for a given model from a JSON configuration file,\n    including its related doctype information if available.\n    Args:\n        model_name (str): The name of the model.\n    Returns:\n        dict: The settings dictionary for the model including doctype data and settings file path, \n              or an empty dictionary if not found.\n    \"\"\"",
        "detail": "sites.django.core.utils.get_model_details",
        "documentation": {}
    },
    {
        "label": "autoname",
        "kind": 2,
        "importPath": "sites.django.core.utils.naming",
        "description": "sites.django.core.utils.naming",
        "peekOfCode": "def autoname(instance):\n    \"\"\"\n    Get the naming rule for a model instance. Defaults to a random string if none is defined.\n    Args:\n        instance (models.Model): The model instance.\n    Returns:\n        str: The naming rule or default.\n    \"\"\"\n    model_name = instance.__class__.__name__\n    return get_model_doctype_json(model_name)",
        "detail": "sites.django.core.utils.naming",
        "documentation": {}
    },
    {
        "label": "InvalidNamingSeriesError",
        "kind": 6,
        "importPath": "sites.django.core.utils.naming_manager",
        "description": "sites.django.core.utils.naming_manager",
        "peekOfCode": "class InvalidNamingSeriesError(Exception):\n    pass\nclass NamingManager:\n    def __init__(self, instance, doctype_config):\n        \"\"\"\n        Initialize with the model instance and doctype configuration.\n        :param instance: The model instance.\n        :param doctype_config: A dict containing `naming_rule` and `autoname`.\n        \"\"\"\n        self.instance = instance",
        "detail": "sites.django.core.utils.naming_manager",
        "documentation": {}
    },
    {
        "label": "NamingManager",
        "kind": 6,
        "importPath": "sites.django.core.utils.naming_manager",
        "description": "sites.django.core.utils.naming_manager",
        "peekOfCode": "class NamingManager:\n    def __init__(self, instance, doctype_config):\n        \"\"\"\n        Initialize with the model instance and doctype configuration.\n        :param instance: The model instance.\n        :param doctype_config: A dict containing `naming_rule` and `autoname`.\n        \"\"\"\n        self.instance = instance\n        self.config = doctype_config\n    def generate_code(self, fieldname, field_options):",
        "detail": "sites.django.core.utils.naming_manager",
        "documentation": {}
    },
    {
        "label": "NamingSeries",
        "kind": 6,
        "importPath": "sites.django.core.utils.naming_manager",
        "description": "sites.django.core.utils.naming_manager",
        "peekOfCode": "class NamingSeries:\n    def __init__(self):\n        pass\n    def validate(self, series):\n        \"\"\"\n        Validates the provided naming series format.\n        Args:\n            series (str): The naming series to validate.\n        Raises:\n            InvalidNamingSeriesError: If the series is invalid.",
        "detail": "sites.django.core.utils.naming_manager",
        "documentation": {}
    },
    {
        "label": "parse_naming_series",
        "kind": 2,
        "importPath": "sites.django.core.utils.naming_manager",
        "description": "sites.django.core.utils.naming_manager",
        "peekOfCode": "def parse_naming_series(parts, instance, series, number_generator=None):\n    if isinstance(parts, str):\n        parts = parts.split(\".\")\n    if not number_generator:\n        number_generator = get_series\n    name = \"\"\n    today = datetime.now()\n    # Get the model name (doctype) to ensure uniqueness per doctype\n    doctype = instance._meta.model_name  # This gets the model name (lowercase)\n    for part in parts:",
        "detail": "sites.django.core.utils.naming_manager",
        "documentation": {}
    },
    {
        "label": "get_series",
        "kind": 2,
        "importPath": "sites.django.core.utils.naming_manager",
        "description": "sites.django.core.utils.naming_manager",
        "peekOfCode": "def get_series(doctype, digits, series):\n    \"\"\"\n    Get the next series number for a given doctype, ensuring uniqueness,\n    but still keeping the original series name.\n    Args:\n        doctype (str): The name of the doctype (model).\n        digits (int): The number of digits to pad the series number.\n    Returns:\n        str: The next series number with padding, keeping original name.\n    \"\"\"",
        "detail": "sites.django.core.utils.naming_manager",
        "documentation": {}
    },
    {
        "label": "generate_autoincrement",
        "kind": 2,
        "importPath": "sites.django.core.utils.naming_manager",
        "description": "sites.django.core.utils.naming_manager",
        "peekOfCode": "def generate_autoincrement(instance):\n    model = instance._meta.model\n    try:\n        # Get the last entry in the table based on the primary key\n        last_entry = model.objects.latest('id')\n        new_id = int(last_entry.id) + 1\n    except ObjectDoesNotExist:\n        # If there are no entries in the table, start with ID 1\n        new_id = 1\n    return new_id",
        "detail": "sites.django.core.utils.naming_manager",
        "documentation": {}
    },
    {
        "label": "generate_next_id",
        "kind": 2,
        "importPath": "sites.django.core.utils.naming_manager",
        "description": "sites.django.core.utils.naming_manager",
        "peekOfCode": "def generate_next_id(instance, format_pattern):\n    \"\"\"\n    Generate the next ID by matching the last ID to the format pattern,\n    replacing placeholders with current or incremented values.\n    Args:\n        instance: The model instance for which the ID is generated.\n        format_pattern: The format pattern defining the ID structure.\n    Returns:\n        str: The next ID based on the format pattern.\n    \"\"\"",
        "detail": "sites.django.core.utils.naming_manager",
        "documentation": {}
    },
    {
        "label": "NAMING_SERIES_PATTERN",
        "kind": 5,
        "importPath": "sites.django.core.utils.naming_manager",
        "description": "sites.django.core.utils.naming_manager",
        "peekOfCode": "NAMING_SERIES_PATTERN = re.compile(r\"^[\\w\\- \\/.#{}]+$\", re.UNICODE)\nclass InvalidNamingSeriesError(Exception):\n    pass\nclass NamingManager:\n    def __init__(self, instance, doctype_config):\n        \"\"\"\n        Initialize with the model instance and doctype configuration.\n        :param instance: The model instance.\n        :param doctype_config: A dict containing `naming_rule` and `autoname`.\n        \"\"\"",
        "detail": "sites.django.core.utils.naming_manager",
        "documentation": {}
    },
    {
        "label": "InvalidNamingSeriesError",
        "kind": 6,
        "importPath": "sites.django.core.utils.naming_model",
        "description": "sites.django.core.utils.naming_model",
        "peekOfCode": "class InvalidNamingSeriesError(Exception):\n    pass\nclass NamingSeries:\n    def __init__(self, series):\n        self.series = series\n        if \"#\" not in self.series:\n            self.series += \".#####\"\n    def validate(self):\n        if \".\" not in self.series:\n            raise InvalidNamingSeriesError(f\"Invalid naming series {self.series}: dot (.) missing\")",
        "detail": "sites.django.core.utils.naming_model",
        "documentation": {}
    },
    {
        "label": "NamingSeries",
        "kind": 6,
        "importPath": "sites.django.core.utils.naming_model",
        "description": "sites.django.core.utils.naming_model",
        "peekOfCode": "class NamingSeries:\n    def __init__(self, series):\n        self.series = series\n        if \"#\" not in self.series:\n            self.series += \".#####\"\n    def validate(self):\n        if \".\" not in self.series:\n            raise InvalidNamingSeriesError(f\"Invalid naming series {self.series}: dot (.) missing\")\n        if not NAMING_SERIES_PATTERN.match(self.series):\n            raise InvalidNamingSeriesError(",
        "detail": "sites.django.core.utils.naming_model",
        "documentation": {}
    },
    {
        "label": "set_new_name",
        "kind": 2,
        "importPath": "sites.django.core.utils.naming_model",
        "description": "sites.django.core.utils.naming_model",
        "peekOfCode": "def set_new_name(instance, meta):\n    autoname = meta.get(\"autoname\", \"\")\n    if autoname.lower() == \"uuid\":\n        instance.name = instance.name or str(uuid4())\n        return\n    if autoname.startswith(\"field:\"):\n        fieldname = autoname[6:]\n        instance.name = getattr(instance, fieldname, None)\n        if not instance.name:\n            raise ValidationError(f\"{fieldname} is required for naming\")",
        "detail": "sites.django.core.utils.naming_model",
        "documentation": {}
    },
    {
        "label": "set_name_by_naming_series",
        "kind": 2,
        "importPath": "sites.django.core.utils.naming_model",
        "description": "sites.django.core.utils.naming_model",
        "peekOfCode": "def set_name_by_naming_series(instance):\n    if not instance.naming_series:\n        raise ValidationError(\"Naming Series mandatory\")\n    series = NamingSeries(instance.naming_series + \".#####\")\n    instance.name = series.generate_next_name(instance)\ndef make_autoname(key, instance):\n    if key == \"hash\":\n        return generate_random_string()\n    series = NamingSeries(key)\n    return series.generate_next_name(instance)",
        "detail": "sites.django.core.utils.naming_model",
        "documentation": {}
    },
    {
        "label": "make_autoname",
        "kind": 2,
        "importPath": "sites.django.core.utils.naming_model",
        "description": "sites.django.core.utils.naming_model",
        "peekOfCode": "def make_autoname(key, instance):\n    if key == \"hash\":\n        return generate_random_string()\n    series = NamingSeries(key)\n    return series.generate_next_name(instance)\ndef parse_naming_series(parts, instance, number_generator=None):\n    if isinstance(parts, str):\n        parts = parts.split(\".\")\n    if not number_generator:\n        number_generator = get_series",
        "detail": "sites.django.core.utils.naming_model",
        "documentation": {}
    },
    {
        "label": "parse_naming_series",
        "kind": 2,
        "importPath": "sites.django.core.utils.naming_model",
        "description": "sites.django.core.utils.naming_model",
        "peekOfCode": "def parse_naming_series(parts, instance, number_generator=None):\n    if isinstance(parts, str):\n        parts = parts.split(\".\")\n    if not number_generator:\n        number_generator = get_series\n    name = \"\"\n    today = datetime.now()\n    for part in parts:\n        if part.startswith(\"#\"):\n            digits = len(part)",
        "detail": "sites.django.core.utils.naming_model",
        "documentation": {}
    },
    {
        "label": "get_series",
        "kind": 2,
        "importPath": "sites.django.core.utils.naming_model",
        "description": "sites.django.core.utils.naming_model",
        "peekOfCode": "def get_series(prefix, digits):\n    with transaction.atomic():\n        obj, created = Series.objects.get_or_create(name=prefix, defaults={\"current\": 0})\n        obj.current += 1\n        obj.save()\n        return str(obj.current).zfill(digits)\ndef generate_random_string(length=10):\n    import secrets\n    import string\n    return ''.join(secrets.choice(string.ascii_lowercase + string.digits) for _ in range(length))",
        "detail": "sites.django.core.utils.naming_model",
        "documentation": {}
    },
    {
        "label": "generate_random_string",
        "kind": 2,
        "importPath": "sites.django.core.utils.naming_model",
        "description": "sites.django.core.utils.naming_model",
        "peekOfCode": "def generate_random_string(length=10):\n    import secrets\n    import string\n    return ''.join(secrets.choice(string.ascii_lowercase + string.digits) for _ in range(length))\ndef parse_format_autoname(format_str, instance):\n    return format_str.replace(\"{\", \"\").replace(\"}\", \"\")",
        "detail": "sites.django.core.utils.naming_model",
        "documentation": {}
    },
    {
        "label": "parse_format_autoname",
        "kind": 2,
        "importPath": "sites.django.core.utils.naming_model",
        "description": "sites.django.core.utils.naming_model",
        "peekOfCode": "def parse_format_autoname(format_str, instance):\n    return format_str.replace(\"{\", \"\").replace(\"}\", \"\")",
        "detail": "sites.django.core.utils.naming_model",
        "documentation": {}
    },
    {
        "label": "NAMING_SERIES_PATTERN",
        "kind": 5,
        "importPath": "sites.django.core.utils.naming_model",
        "description": "sites.django.core.utils.naming_model",
        "peekOfCode": "NAMING_SERIES_PATTERN = re.compile(r\"^[\\w\\- \\/.#{}]+$\", re.UNICODE)\nclass InvalidNamingSeriesError(Exception):\n    pass\nclass NamingSeries:\n    def __init__(self, series):\n        self.series = series\n        if \"#\" not in self.series:\n            self.series += \".#####\"\n    def validate(self):\n        if \".\" not in self.series:",
        "detail": "sites.django.core.utils.naming_model",
        "documentation": {}
    },
    {
        "label": "generate_name_for_model",
        "kind": 2,
        "importPath": "sites.django.core.utils.pre_save",
        "description": "sites.django.core.utils.pre_save",
        "peekOfCode": "def generate_name_for_model(sender, instance, **kwargs):\n    \"\"\"\n    Pre-save signal to generate a name for models.\n    Assumes the instance has a `doctype_config` attribute.\n    \"\"\"\n    model_name = instance.__class__.__name__\n    doctype_config = get_model_doctype_json(model_name)\n    # Validate the instance data\n    # validate_model_data(instance)\n    if not instance.name:  # Only generate if name is not set",
        "detail": "sites.django.core.utils.pre_save",
        "documentation": {}
    },
    {
        "label": "send_sms",
        "kind": 2,
        "importPath": "sites.django.core.utils.sms",
        "description": "sites.django.core.utils.sms",
        "peekOfCode": "def send_sms(phone_number, message):\n    api_url = \"https://api.softleek.com/sms/send\"\n    payload = {\"phone\": phone_number, \"message\": message, \"sender_id\": \"SOFTLEEK\"}\n    json_payload = json.dumps(payload)\n    headers = {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n    response = requests.post(api_url, data=json_payload, headers=headers)\n    if response.status_code == 200:\n        logger.info(f\"SMS sent successfully to {phone_number}\")\n    else:\n        logger.error(f\"Failed to send SMS to {phone_number}. Response: {response.text}\")",
        "detail": "sites.django.core.utils.sms",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "sites.django.core.utils.sms",
        "description": "sites.django.core.utils.sms",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef send_sms(phone_number, message):\n    api_url = \"https://api.softleek.com/sms/send\"\n    payload = {\"phone\": phone_number, \"message\": message, \"sender_id\": \"SOFTLEEK\"}\n    json_payload = json.dumps(payload)\n    headers = {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n    response = requests.post(api_url, data=json_payload, headers=headers)\n    if response.status_code == 200:\n        logger.info(f\"SMS sent successfully to {phone_number}\")\n    else:",
        "detail": "sites.django.core.utils.sms",
        "documentation": {}
    },
    {
        "label": "UserGroupPermissions",
        "kind": 6,
        "importPath": "sites.django.core.views.auth",
        "description": "sites.django.core.views.auth",
        "peekOfCode": "class UserGroupPermissions(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        user = request.user\n        # If the user is a superuser, return \"all\"\n        if user.is_superuser:\n            return Response(\"all\")\n        # Get all groups the user belongs to\n        groups = user.groups.all()\n        # Initialize a set to store unique permissions",
        "detail": "sites.django.core.views.auth",
        "documentation": {}
    },
    {
        "label": "GroupViewSet",
        "kind": 6,
        "importPath": "sites.django.core.views.auth",
        "description": "sites.django.core.views.auth",
        "peekOfCode": "class GroupViewSet(GenericViewSet):\n    \"\"\"\n    A simple viewset for viewing and editing user groups.\n    Only accessible by admins or users with sufficient permissions.\n    \"\"\"\n    queryset = Group.objects.all()\n    serializer_class = GroupSerializer\n    filterset_class = GroupFilter\n    permission_classes = [IsSuperUser, HasGroupPermission] \nclass PermissionViewSet(GenericViewSet):",
        "detail": "sites.django.core.views.auth",
        "documentation": {}
    },
    {
        "label": "PermissionViewSet",
        "kind": 6,
        "importPath": "sites.django.core.views.auth",
        "description": "sites.django.core.views.auth",
        "peekOfCode": "class PermissionViewSet(GenericViewSet):\n    \"\"\"\n    A viewset for viewing and editing user permissions.\n    Only accessible by superusers.\n    \"\"\"\n    queryset = Permission.objects.all()\n    serializer_class = PermissionSerializer\n    filterset_class = PermissionFilter\n    permission_classes = [IsSuperUser, HasGroupPermission] \nclass ResendOTPView(APIView):",
        "detail": "sites.django.core.views.auth",
        "documentation": {}
    },
    {
        "label": "ResendOTPView",
        "kind": 6,
        "importPath": "sites.django.core.views.auth",
        "description": "sites.django.core.views.auth",
        "peekOfCode": "class ResendOTPView(APIView):\n    def post(self, request):\n        username = request.data.get(\"username\")\n        try:\n            user = User.objects.get(username=username)\n            otp_instance = OTP.objects.get(user=user, is_active=False)\n            # Check if the OTP was sent recently\n            cooldown_period = timedelta(minutes=5)\n            if timezone.now() - otp_instance.created_at < cooldown_period:\n                return Response(",
        "detail": "sites.django.core.views.auth",
        "documentation": {}
    },
    {
        "label": "ProfileView",
        "kind": 6,
        "importPath": "sites.django.core.views.auth",
        "description": "sites.django.core.views.auth",
        "peekOfCode": "class ProfileView(APIView):\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        user = request.user\n        serializer = UserSerializer(user)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    def put(self, request):\n        user = request.user\n        data = request.data\n        try:",
        "detail": "sites.django.core.views.auth",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "sites.django.core.views.auth",
        "description": "sites.django.core.views.auth",
        "peekOfCode": "class LoginView(APIView):\n    def post(self, request):\n        username = request.data[\"username\"]\n        password = request.data[\"password\"]\n        user = authenticate(username=username, password=password)\n        if user is not None:\n           token, created = AuthToken.objects.get_or_create(user=user)\n           login(request, user)\n           return Response({\"token\": token.key}, status=status.HTTP_200_OK)\n        return Response(",
        "detail": "sites.django.core.views.auth",
        "documentation": {}
    },
    {
        "label": "OTPActivationView",
        "kind": 6,
        "importPath": "sites.django.core.views.auth",
        "description": "sites.django.core.views.auth",
        "peekOfCode": "class OTPActivationView(APIView):\n    def post(self, request):\n        otp_code = request.data[\"otp\"]\n        try:\n            otp = OTP.objects.get(otp_code=otp_code, is_active=False)\n            otp.is_active = True\n            otp.save()\n            user = otp.user\n            token, created = AuthToken.objects.get_or_create(user=user)\n            login(request, user)",
        "detail": "sites.django.core.views.auth",
        "documentation": {}
    },
    {
        "label": "LogoutView",
        "kind": 6,
        "importPath": "sites.django.core.views.auth",
        "description": "sites.django.core.views.auth",
        "peekOfCode": "class LogoutView(APIView):\n    def post(self, request):\n        django_logout(request)\n        return Response(\n            {\"detail\": \"Logged out successfully.\"}, status=status.HTTP_200_OK\n        )\ndef send_sms(phone_number, message):\n    api_url = \"https://api.softleek.com/sms/send\"\n    payload = {\"phone\": phone_number, \"message\": message, \"sender_id\": \"SOFTLEEK\"}\n    json_payload = json.dumps(payload)",
        "detail": "sites.django.core.views.auth",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "sites.django.core.views.auth",
        "description": "sites.django.core.views.auth",
        "peekOfCode": "class UserViewSet(GenericViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    filterset_class = UserFilter\n    permission_classes = [HasGroupPermission] \n    def create(self, request, *args, **kwargs):\n        try:\n            data = request.data\n            # Generate a random password if not provided\n            if \"password\" not in data:",
        "detail": "sites.django.core.views.auth",
        "documentation": {}
    },
    {
        "label": "UserIPAddressViewSet",
        "kind": 6,
        "importPath": "sites.django.core.views.auth",
        "description": "sites.django.core.views.auth",
        "peekOfCode": "class UserIPAddressViewSet(viewsets.ReadOnlyModelViewSet):\n    serializer_class = UserIPAddressSerializer\n    def get_queryset(self):\n        user = self.request.user\n        return UserIPAddress.objects.filter(user=user).distinct()\nclass UserGetViewSet(APIView):\n    def get(self, request):\n        # Retrieve the user ID from the query parameters instead of request.data\n        userid = request.query_params.get(\"user\")\n        print(userid)",
        "detail": "sites.django.core.views.auth",
        "documentation": {}
    },
    {
        "label": "UserGetViewSet",
        "kind": 6,
        "importPath": "sites.django.core.views.auth",
        "description": "sites.django.core.views.auth",
        "peekOfCode": "class UserGetViewSet(APIView):\n    def get(self, request):\n        # Retrieve the user ID from the query parameters instead of request.data\n        userid = request.query_params.get(\"user\")\n        print(userid)\n        try:\n            # Fetch the user using the primary key (username in this case)\n            user = User.objects.get(id=userid)\n            # Serialize the user data\n            serializer = UserSerializer(user)",
        "detail": "sites.django.core.views.auth",
        "documentation": {}
    },
    {
        "label": "send_sms",
        "kind": 2,
        "importPath": "sites.django.core.views.auth",
        "description": "sites.django.core.views.auth",
        "peekOfCode": "def send_sms(phone_number, message):\n    api_url = \"https://api.softleek.com/sms/send\"\n    payload = {\"phone\": phone_number, \"message\": message, \"sender_id\": \"SOFTLEEK\"}\n    json_payload = json.dumps(payload)\n    headers = {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n    response = requests.post(api_url, data=json_payload, headers=headers)\n    if response.status_code != 200:\n        try:\n            response_data = response.json()\n        except ValueError:",
        "detail": "sites.django.core.views.auth",
        "documentation": {}
    },
    {
        "label": "generate_simple_password",
        "kind": 2,
        "importPath": "sites.django.core.views.auth",
        "description": "sites.django.core.views.auth",
        "peekOfCode": "def generate_simple_password():\n    uppercase_letter = random.choice(string.ascii_uppercase)\n    lowercase_letter = random.choice(string.ascii_lowercase)\n    special_character = random.choice(\"!@#$%^&*()\")\n    digits = \"\".join(random.choices(string.digits, k=3))\n    # Combine the characters\n    password_list = [uppercase_letter, lowercase_letter, special_character] + list(\n        digits\n    )\n    # Shuffle to ensure random order",
        "detail": "sites.django.core.views.auth",
        "documentation": {}
    },
    {
        "label": "generate_simple_password",
        "kind": 2,
        "importPath": "sites.django.core.views.auth",
        "description": "sites.django.core.views.auth",
        "peekOfCode": "def generate_simple_password():\n    uppercase_letter = random.choice(string.ascii_uppercase)\n    lowercase_letter = random.choice(string.ascii_lowercase)\n    special_character = random.choice(\"!@#$%^&*()\")\n    digits = \"\".join(random.choices(string.digits, k=3))\n    # Combine the characters\n    password_list = [uppercase_letter, lowercase_letter, special_character] + list(\n        digits\n    )\n    # Shuffle to ensure random order",
        "detail": "sites.django.core.views.auth",
        "documentation": {}
    },
    {
        "label": "send_sms",
        "kind": 2,
        "importPath": "sites.django.core.views.barcode",
        "description": "sites.django.core.views.barcode",
        "peekOfCode": "def send_sms(phone_number, message):\n    api_url = \"https://api.softleek.com/sms/send\"\n    max_length = 200  # Maximum length of each message part\n    # Split the message into multiple parts if necessary\n    def split_message(message, max_length):\n        parts = []\n        while len(message) > max_length:\n            # Find the last space within the limit\n            split_index = message.rfind(' ', 0, max_length)\n            if split_index == -1:  # No space found, forcefully split",
        "detail": "sites.django.core.views.barcode",
        "documentation": {}
    },
    {
        "label": "SendEmailView",
        "kind": 6,
        "importPath": "sites.django.core.views.communication",
        "description": "sites.django.core.views.communication",
        "peekOfCode": "class SendEmailView(APIView):\n    def post(self, request):\n        recipients = request.data.get(\"recipients\", [])\n        subject = request.data.get(\"subject\", \"No Subject\")\n        message = request.data.get(\"message\", \"\")\n        if not isinstance(recipients, list) or not all(\n            isinstance(email, str) for email in recipients\n        ):\n            return Response(\n                {\"error\": \"Recipients must be a list of email addresses.\"},",
        "detail": "sites.django.core.views.communication",
        "documentation": {}
    },
    {
        "label": "SendSmsView",
        "kind": 6,
        "importPath": "sites.django.core.views.communication",
        "description": "sites.django.core.views.communication",
        "peekOfCode": "class SendSmsView(APIView):\n    def post(self, request):\n        phone_numbers = request.data.get(\"phone_numbers\", [])\n        message = request.data.get(\"message\", \"\")\n        if not isinstance(phone_numbers, list) or not all(\n            isinstance(number, str) for number in phone_numbers\n        ):\n            return Response(\n                {\"error\": \"Phone numbers must be a list of phone numbers.\"},\n                status=status.HTTP_400_BAD_REQUEST,",
        "detail": "sites.django.core.views.communication",
        "documentation": {}
    },
    {
        "label": "ChangeLogViewSet",
        "kind": 6,
        "importPath": "sites.django.core.views.core",
        "description": "sites.django.core.views.core",
        "peekOfCode": "class ChangeLogViewSet(GenericViewSet):\n    queryset = ChangeLog.objects.all()\n    serializer_class = ChangeLogSerializer\n    filterset_class = ChangeLogFilter\nclass CreateAppAPIView(APIView):\n    @handle_errors\n    def post(self, request, *args, **kwargs):\n        # Validate required parameters\n        appname = request.data.get(\"appname\")\n        if not appname:",
        "detail": "sites.django.core.views.core",
        "documentation": {}
    },
    {
        "label": "CreateAppAPIView",
        "kind": 6,
        "importPath": "sites.django.core.views.core",
        "description": "sites.django.core.views.core",
        "peekOfCode": "class CreateAppAPIView(APIView):\n    @handle_errors\n    def post(self, request, *args, **kwargs):\n        # Validate required parameters\n        appname = request.data.get(\"appname\")\n        if not appname:\n            return Response(\n                {\"error\": \"Missing 'appname' parameter\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )",
        "detail": "sites.django.core.views.core",
        "documentation": {}
    },
    {
        "label": "AppViewSet",
        "kind": 6,
        "importPath": "sites.django.core.views.core",
        "description": "sites.django.core.views.core",
        "peekOfCode": "class AppViewSet(GenericViewSet):\n    queryset = App.objects.all()\n    serializer_class = AppSerializer\n    filterset_class = AppFilter\n    @handle_errors\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        self.perform_create(serializer)\n        app = App.objects.get(pk=serializer.data[\"id\"])",
        "detail": "sites.django.core.views.core",
        "documentation": {}
    },
    {
        "label": "CreateModuleAPIView",
        "kind": 6,
        "importPath": "sites.django.core.views.core",
        "description": "sites.django.core.views.core",
        "peekOfCode": "class CreateModuleAPIView(APIView):\n    @handle_errors\n    def post(self, request, *args, **kwargs):\n        modulename = request.data.get(\"modulename\")\n        if not modulename:\n            return Response(\n                {\"error\": \"Missing 'modulename' parameter\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )\n        module = Module.objects.get(pk=modulename)",
        "detail": "sites.django.core.views.core",
        "documentation": {}
    },
    {
        "label": "ModuleViewSet",
        "kind": 6,
        "importPath": "sites.django.core.views.core",
        "description": "sites.django.core.views.core",
        "peekOfCode": "class ModuleViewSet(GenericViewSet):\n    queryset = Module.objects.all()\n    serializer_class = ModuleSerializer\n    filterset_class = ModuleFilter\n    @handle_errors\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        self.perform_create(serializer)\n        response_data = serializer.data",
        "detail": "sites.django.core.views.core",
        "documentation": {}
    },
    {
        "label": "CreateDocumentAPIView",
        "kind": 6,
        "importPath": "sites.django.core.views.core",
        "description": "sites.django.core.views.core",
        "peekOfCode": "class CreateDocumentAPIView(APIView):\n    @handle_errors\n    def post(self, request, *args, **kwargs):\n        documentname = request.data.get(\"documentname\")\n        app = request.data.get(\"app\")\n        module = request.data.get(\"module\") \n        return run_subprocess(\n            [\"blox\", \"new-doc\", \"--app\", app, \"--module\", module, documentname],\n            \"Document created successfully\",\n            \"Failed to create document\",",
        "detail": "sites.django.core.views.core",
        "documentation": {}
    },
    {
        "label": "DocumentViewSet",
        "kind": 6,
        "importPath": "sites.django.core.views.core",
        "description": "sites.django.core.views.core",
        "peekOfCode": "class DocumentViewSet(GenericViewSet):\n    queryset = Document.objects.all()\n    serializer_class = DocumentSerializer\n    filterset_class = DocumentFilter\n    @handle_errors\n    def create(self, request, *args, **kwargs):\n        data = request.data\n        module_id = data.pop(\"module\") \n        module = Module.objects.get(pk=module_id)\n        data[\"app\"] = App.objects.get(pk=module.app.id)",
        "detail": "sites.django.core.views.core",
        "documentation": {}
    },
    {
        "label": "MigrateAPIView",
        "kind": 6,
        "importPath": "sites.django.core.views.core",
        "description": "sites.django.core.views.core",
        "peekOfCode": "class MigrateAPIView(APIView):\n    @handle_errors\n    def post(self, request, *args, **kwargs):\n        app_name = request.data.get(\"app\")\n        module_name = request.data.get(\"module\")\n        doc_name = request.data.get(\"doc\")\n        command = [\"blox\", \"migrate\"]\n        if doc_name:\n            doc = Document.objects.get(pk=doc_name)\n            command.append(\"--app\")",
        "detail": "sites.django.core.views.core",
        "documentation": {}
    },
    {
        "label": "run_subprocess",
        "kind": 2,
        "importPath": "sites.django.core.views.core",
        "description": "sites.django.core.views.core",
        "peekOfCode": "def run_subprocess(command, success_message, error_message):\n    try:\n        # Check if running on Windows\n        if os.name == 'nt':\n            # For Windows, use PowerShell to pipe the 'y' response\n            full_command = f'echo y | {\" \".join(command)}'\n        else:\n            # For Unix-based systems, use bash-style piping\n            full_command = f'echo y | {\" \".join(command)}'\n        # Run the command with 'shell=True' to enable piping",
        "detail": "sites.django.core.views.core",
        "documentation": {}
    },
    {
        "label": "DataUploadSerializer",
        "kind": 6,
        "importPath": "sites.django.core.views.data",
        "description": "sites.django.core.views.data",
        "peekOfCode": "class DataUploadSerializer(serializers.Serializer):\n    file = serializers.FileField(required=False)\n    data = serializers.ListField(\n        child=serializers.DictField(), required=False\n    )\n    model_name = serializers.CharField()\n    # Ensure at least one of `file` or `data` is provided\n    def validate(self, data):\n        file = data.get('file')\n        json_data = data.get('data')",
        "detail": "sites.django.core.views.data",
        "documentation": {}
    },
    {
        "label": "BulkDeleteSerializer",
        "kind": 6,
        "importPath": "sites.django.core.views.data",
        "description": "sites.django.core.views.data",
        "peekOfCode": "class BulkDeleteSerializer(serializers.Serializer):\n    model_name = serializers.CharField()\n    ids = serializers.ListField(\n        child=serializers.CharField(),  # Changed to CharField to accept any type of ID\n        allow_empty=False\n    )\n# View for importing data from CSV, Excel, TXT, or JSON\nclass DataImportAPIView(APIView):\n    def post(self, request, *args, **kwargs):\n        serializer = DataUploadSerializer(data=request.data)",
        "detail": "sites.django.core.views.data",
        "documentation": {}
    },
    {
        "label": "DataImportAPIView",
        "kind": 6,
        "importPath": "sites.django.core.views.data",
        "description": "sites.django.core.views.data",
        "peekOfCode": "class DataImportAPIView(APIView):\n    def post(self, request, *args, **kwargs):\n        serializer = DataUploadSerializer(data=request.data)\n        if serializer.is_valid():\n            file = serializer.validated_data.get('file')\n            json_data = serializer.validated_data.get('data')\n            model_name = to_titlecase_no_space(serializer.validated_data['model_name'])\n            # Get the model by model name\n            model = get_model_by_name(model_name)\n            if not model:",
        "detail": "sites.django.core.views.data",
        "documentation": {}
    },
    {
        "label": "BulkDeleteAPIView",
        "kind": 6,
        "importPath": "sites.django.core.views.data",
        "description": "sites.django.core.views.data",
        "peekOfCode": "class BulkDeleteAPIView(APIView):\n    def post(self, request, *args, **kwargs):\n        serializer = BulkDeleteSerializer(data=request.data)\n        if serializer.is_valid():\n            model_name = to_titlecase_no_space(serializer.validated_data['model_name']) \n            ids = serializer.validated_data['ids']\n            # Get the model by model name\n            model = get_model_by_name(model_name)\n            if not model:\n                return Response({'error': 'Invalid model name'}, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "sites.django.core.views.data",
        "documentation": {}
    },
    {
        "label": "normalize_header",
        "kind": 2,
        "importPath": "sites.django.core.views.data",
        "description": "sites.django.core.views.data",
        "peekOfCode": "def normalize_header(header):\n    header = re.sub(r'[^\\w\\s]', '', header)  # Remove non-alphanumeric characters\n    return header.strip().lower().replace(' ', '_')\n# Helper function to fetch model by model name only (e.g., Customer)\ndef get_model_by_name(model_name):\n    return all_models.get(model_name)\ndef to_titlecase_no_space(input_str):\n    \"\"\"Convert a string with underscores or whitespace to TitleCase with no spaces.\n    Args:\n        input_str (str): The string to convert (e.g., \"my example_string\").",
        "detail": "sites.django.core.views.data",
        "documentation": {}
    },
    {
        "label": "get_model_by_name",
        "kind": 2,
        "importPath": "sites.django.core.views.data",
        "description": "sites.django.core.views.data",
        "peekOfCode": "def get_model_by_name(model_name):\n    return all_models.get(model_name)\ndef to_titlecase_no_space(input_str):\n    \"\"\"Convert a string with underscores or whitespace to TitleCase with no spaces.\n    Args:\n        input_str (str): The string to convert (e.g., \"my example_string\").\n    Returns:\n        str: The converted string in TitleCase with no spaces (e.g., \"MyExampleString\").\n    \"\"\"\n    # Replace spaces with underscores, then apply TitleCase conversion",
        "detail": "sites.django.core.views.data",
        "documentation": {}
    },
    {
        "label": "to_titlecase_no_space",
        "kind": 2,
        "importPath": "sites.django.core.views.data",
        "description": "sites.django.core.views.data",
        "peekOfCode": "def to_titlecase_no_space(input_str):\n    \"\"\"Convert a string with underscores or whitespace to TitleCase with no spaces.\n    Args:\n        input_str (str): The string to convert (e.g., \"my example_string\").\n    Returns:\n        str: The converted string in TitleCase with no spaces (e.g., \"MyExampleString\").\n    \"\"\"\n    # Replace spaces with underscores, then apply TitleCase conversion\n    return re.sub(r\"(?:^|_| )(.)\", lambda m: m.group(1).upper(), input_str.strip())\n# Serializer for file or data upload (for data import)",
        "detail": "sites.django.core.views.data",
        "documentation": {}
    },
    {
        "label": "all_models",
        "kind": 5,
        "importPath": "sites.django.core.views.data",
        "description": "sites.django.core.views.data",
        "peekOfCode": "all_models = {model.__name__: model for model in apps.get_models()}\n# Helper function to normalize headers\ndef normalize_header(header):\n    header = re.sub(r'[^\\w\\s]', '', header)  # Remove non-alphanumeric characters\n    return header.strip().lower().replace(' ', '_')\n# Helper function to fetch model by model name only (e.g., Customer)\ndef get_model_by_name(model_name):\n    return all_models.get(model_name)\ndef to_titlecase_no_space(input_str):\n    \"\"\"Convert a string with underscores or whitespace to TitleCase with no spaces.",
        "detail": "sites.django.core.views.data",
        "documentation": {}
    },
    {
        "label": "GenericViewSet",
        "kind": 6,
        "importPath": "sites.django.core.views.template",
        "description": "sites.django.core.views.template",
        "peekOfCode": "class GenericViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    A generic viewset with enhanced error handling, flexible filtering, search functionality,\n    and reusable helpers.\n    \"\"\"\n    permission_classes = [AllowAny]\n    filter_backends = [DjangoFilterBackend]\n    def load_model_config(self):\n        \"\"\"\n        Loads the configuration JSON file for the model associated with this ViewSet.",
        "detail": "sites.django.core.views.template",
        "documentation": {}
    },
    {
        "label": "handle_errors",
        "kind": 2,
        "importPath": "sites.django.core.views.template",
        "description": "sites.django.core.views.template",
        "peekOfCode": "def handle_errors(func):\n    \"\"\"\n    Decorator to handle exceptions in viewset methods.\n    \"\"\"\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            print(f\"Error in {func.__name__}: {e}\")\n            return Response(",
        "detail": "sites.django.core.views.template",
        "documentation": {}
    },
    {
        "label": "log_changes",
        "kind": 2,
        "importPath": "sites.django.core.views.utils",
        "description": "sites.django.core.views.utils",
        "peekOfCode": "def log_changes(instance, old_instance, user):\n    \"\"\"\n    Log changes between old and new instance states.\n    Args:\n        instance: The updated instance.\n        old_instance: The old instance before update.\n        user: The user who made the changes.\n    \"\"\"\n    for field in instance._meta.fields:\n        field_name = field.name",
        "detail": "sites.django.core.views.utils",
        "documentation": {}
    },
    {
        "label": "log_create",
        "kind": 2,
        "importPath": "sites.django.core.views.utils",
        "description": "sites.django.core.views.utils",
        "peekOfCode": "def log_create(instance, user):\n    # Log the creation of the instance\n    ChangeLog.objects.create(\n        model_name=instance.__class__.__name__,\n        object_id=instance.id,\n        field_name=\"__all__\",\n        old_value=\"None\",\n        new_value=\"Created\",\n        user=user,\n    )",
        "detail": "sites.django.core.views.utils",
        "documentation": {}
    },
    {
        "label": "CoreConfig",
        "kind": 6,
        "importPath": "sites.django.core.apps",
        "description": "sites.django.core.apps",
        "peekOfCode": "class CoreConfig(AppConfig):\n    name = 'core'  # The name of the app\n    verbose_name = 'Core Application'\n    def ready(self):\n        # Import signals to ensure they are connected to pre_save across all apps\n        import core.signals  # Ensure signals are loaded for the whole project",
        "detail": "sites.django.core.apps",
        "documentation": {}
    },
    {
        "label": "send_reminder_notifications",
        "kind": 2,
        "importPath": "sites.django.core.crons",
        "description": "sites.django.core.crons",
        "peekOfCode": "def send_reminder_notifications():\n    now = timezone.now()\n    ten_minutes = timedelta(minutes=10)\n    # Filter reminders that are enabled and have a next_run in the future\n    reminders = Reminder.objects.filter(enabled=True)\n    logger.info(f\"Running cron job. Found {reminders.count()} reminders to process.\")\n    for reminder in reminders:\n        try:\n            # Calculate prereminder time\n            prereminder_time = reminder.next_run - reminder.prereminder",
        "detail": "sites.django.core.crons",
        "documentation": {}
    },
    {
        "label": "notify_user",
        "kind": 2,
        "importPath": "sites.django.core.crons",
        "description": "sites.django.core.crons",
        "peekOfCode": "def notify_user(reminder, user):\n    context = {\n        'message': reminder.message,\n    }\n    if user.email:\n        logger.info(f\"Sending email to {user.email}\")\n        send_custom_email(\n            subject=f\"Reminder Notification - {reminder.name}\",\n            template_name=\"email/default.html\",\n            context=context,",
        "detail": "sites.django.core.crons",
        "documentation": {}
    },
    {
        "label": "send_sms",
        "kind": 2,
        "importPath": "sites.django.core.crons",
        "description": "sites.django.core.crons",
        "peekOfCode": "def send_sms(phone_number, message):\n    api_url = \"https://api.softleek.com/sms/send\"\n    payload = {\"phone\": phone_number, \"message\": message, \"sender_id\": \"SOFTLEEK\"}\n    json_payload = json.dumps(payload)\n    headers = {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n    response = requests.post(api_url, data=json_payload, headers=headers)\n    if response.status_code == 200:\n        logger.info(f\"SMS sent successfully to {phone_number}\")\n    else:\n        logger.error(f\"Failed to send SMS to {phone_number}. Response: {response.text}\")",
        "detail": "sites.django.core.crons",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "sites.django.core.crons",
        "description": "sites.django.core.crons",
        "peekOfCode": "logger = logging.getLogger(__name__)\nfrom datetime import timedelta\nfrom django.utils import timezone\ndef send_reminder_notifications():\n    now = timezone.now()\n    ten_minutes = timedelta(minutes=10)\n    # Filter reminders that are enabled and have a next_run in the future\n    reminders = Reminder.objects.filter(enabled=True)\n    logger.info(f\"Running cron job. Found {reminders.count()} reminders to process.\")\n    for reminder in reminders:",
        "detail": "sites.django.core.crons",
        "documentation": {}
    },
    {
        "label": "MultiTenantRouter",
        "kind": 6,
        "importPath": "sites.django.core.db_router",
        "description": "sites.django.core.db_router",
        "peekOfCode": "class MultiTenantRouter:\n    def db_for_read(self, model, **hints):\n        \"\"\"Direct read queries to the correct tenant database.\"\"\"\n        tenant_db = cache.get(\"tenant_db\")\n        # Try fetching tenant info from cache if not found in hints\n        if not tenant_db:\n            tenant_name = hints.get('tenant_name', None)\n            if tenant_name:\n                tenant_db = cache.get(f\"tenant_db\")\n        # Debugging output for checking tenant_db in hints and cache",
        "detail": "sites.django.core.db_router",
        "documentation": {}
    },
    {
        "label": "log_user_action",
        "kind": 2,
        "importPath": "sites.django.core.logs",
        "description": "sites.django.core.logs",
        "peekOfCode": "def log_user_action(user, action, document=None):\n    if document:\n        logger.info(f\"User {user.username} performed '{action}' on document '{document.title}'\")\n    else:\n        logger.info(f\"User {user.username} performed '{action}'\")",
        "detail": "sites.django.core.logs",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "sites.django.core.logs",
        "description": "sites.django.core.logs",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef log_user_action(user, action, document=None):\n    if document:\n        logger.info(f\"User {user.username} performed '{action}' on document '{document.title}'\")\n    else:\n        logger.info(f\"User {user.username} performed '{action}'\")",
        "detail": "sites.django.core.logs",
        "documentation": {}
    },
    {
        "label": "UserActivityMiddleware",
        "kind": 6,
        "importPath": "sites.django.core.middleware",
        "description": "sites.django.core.middleware",
        "peekOfCode": "class UserActivityMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def __call__(self, request):\n        # Wrap the Django request with DRF's Request\n        drf_request = Request(request)\n        # Authenticate user for API requests using DRF authentication classes\n        if not request.user.is_authenticated:\n            self.authenticate_user(drf_request)\n        # Get user's IP address",
        "detail": "sites.django.core.middleware",
        "documentation": {}
    },
    {
        "label": "TenantMiddleware",
        "kind": 6,
        "importPath": "sites.django.core.middleware",
        "description": "sites.django.core.middleware",
        "peekOfCode": "class TenantMiddleware(MiddlewareMixin):\n    def process_request(self, request):\n        \"\"\"Determine the tenant's database and set it in the request context.\"\"\"\n        tenant_name = request.headers.get(\"X-Tenant\")\n        # If no tenant name is provided, use the default database\n        if not tenant_name or tenant_name not in settings.DATABASES:\n            request.tenant_db = \"default\"  # Default to main database\n            request.allowed_apps = settings.INSTALLED_APPS  # Default access\n            return\n        # Set the tenant database context in the request",
        "detail": "sites.django.core.middleware",
        "documentation": {}
    },
    {
        "label": "_request_local",
        "kind": 5,
        "importPath": "sites.django.core.middleware",
        "description": "sites.django.core.middleware",
        "peekOfCode": "_request_local = local()\nclass UserActivityMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def __call__(self, request):\n        # Wrap the Django request with DRF's Request\n        drf_request = Request(request)\n        # Authenticate user for API requests using DRF authentication classes\n        if not request.user.is_authenticated:\n            self.authenticate_user(drf_request)",
        "detail": "sites.django.core.middleware",
        "documentation": {}
    },
    {
        "label": "IsSuperUser",
        "kind": 6,
        "importPath": "sites.django.core.permissions",
        "description": "sites.django.core.permissions",
        "peekOfCode": "class IsSuperUser(BasePermission):\n    \"\"\"\n    Custom permission to only allow superusers to access the view.\n    \"\"\"\n    def has_permission(self, request, view):\n        return True\n        # return request.user and request.user.is_superuser\nclass HasGroupPermission(BasePermission):\n    \"\"\"\n    Custom permission to check if the user belongs to a group and has the correct default Django permission ",
        "detail": "sites.django.core.permissions",
        "documentation": {}
    },
    {
        "label": "HasGroupPermission",
        "kind": 6,
        "importPath": "sites.django.core.permissions",
        "description": "sites.django.core.permissions",
        "peekOfCode": "class HasGroupPermission(BasePermission):\n    \"\"\"\n    Custom permission to check if the user belongs to a group and has the correct default Django permission \n    for the current action on the current model. Superusers are granted access to everything.\n    \"\"\"\n    def has_permission(self, request, view):\n        return True\n        # # Allow access to superusers without further checks\n        # if request.user and request.user.is_superuser:\n        #     return True",
        "detail": "sites.django.core.permissions",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "sites.django.core.signals",
        "description": "sites.django.core.signals",
        "peekOfCode": "def get_current_user():\n    return getattr(_request_local, 'user', 'system')\n@receiver(pre_save)\ndef generate_name_for_model(sender, instance, **kwargs):\n    \"\"\"\n    Pre-save signal to generate a name for models.\n    Skips certain models like 'Token' that don't require name generation.\n    \"\"\"\n    SKIP_MODELS = {\"Token\", \"Session\", \"LogEntry\"}  # Add models to skip\n    if sender.__name__ in SKIP_MODELS:  # Skip these models",
        "detail": "sites.django.core.signals",
        "documentation": {}
    },
    {
        "label": "generate_name_for_model",
        "kind": 2,
        "importPath": "sites.django.core.signals",
        "description": "sites.django.core.signals",
        "peekOfCode": "def generate_name_for_model(sender, instance, **kwargs):\n    \"\"\"\n    Pre-save signal to generate a name for models.\n    Skips certain models like 'Token' that don't require name generation.\n    \"\"\"\n    SKIP_MODELS = {\"Token\", \"Session\", \"LogEntry\"}  # Add models to skip\n    if sender.__name__ in SKIP_MODELS:  # Skip these models\n        return  \n    model_name = instance.__class__.__name__\n    doctype_config = get_model_doctype_json(model_name)",
        "detail": "sites.django.core.signals",
        "documentation": {}
    },
    {
        "label": "track_changes_after_save",
        "kind": 2,
        "importPath": "sites.django.core.signals",
        "description": "sites.django.core.signals",
        "peekOfCode": "def track_changes_after_save(sender, instance, **kwargs):\n    model_name = sender.__name__\n    object_id = str(instance.pk)\n    changes = {}\n    if kwargs.get('created', False):\n        # Log new object creation\n        changes = {field.name: getattr(instance, field.name) for field in sender._meta.fields}\n    else:\n        old_instance = sender.objects.get(pk=instance.pk)\n        old_values = {field.name: getattr(old_instance, field.name) for field in sender._meta.fields}",
        "detail": "sites.django.core.signals",
        "documentation": {}
    },
    {
        "label": "_request_local",
        "kind": 5,
        "importPath": "sites.django.core.signals",
        "description": "sites.django.core.signals",
        "peekOfCode": "_request_local = local()\ndef get_current_user():\n    return getattr(_request_local, 'user', 'system')\n@receiver(pre_save)\ndef generate_name_for_model(sender, instance, **kwargs):\n    \"\"\"\n    Pre-save signal to generate a name for models.\n    Skips certain models like 'Token' that don't require name generation.\n    \"\"\"\n    SKIP_MODELS = {\"Token\", \"Session\", \"LogEntry\"}  # Add models to skip",
        "detail": "sites.django.core.signals",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "sites.django.core.urls",
        "description": "sites.django.core.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r\"app\", AppViewSet)\nrouter.register(r\"module\", ModuleViewSet) \nrouter.register(r\"document\", DocumentViewSet)\nrouter.register(r\"apps\", AppViewSet)\nrouter.register(r\"modules\", ModuleViewSet) \nrouter.register(r\"documents\", DocumentViewSet)\nrouter.register(r\"changelogs\", ChangeLogViewSet)\nrouter.register(r\"users\", UserViewSet)\nrouter.register(r\"core/user\", UserViewSet)",
        "detail": "sites.django.core.urls",
        "documentation": {}
    },
    {
        "label": "static_urlpatterns",
        "kind": 5,
        "importPath": "sites.django.core.urls",
        "description": "sites.django.core.urls",
        "peekOfCode": "static_urlpatterns = [\n    re_path(r\"^media/(?P<path>.*)$\", serve, {\"document_root\": settings.MEDIA_ROOT}),\n    re_path(r\"^static/(?P<path>.*)$\", serve, {\"document_root\": settings.STATIC_ROOT}),\n]\nurlpatterns = [\n    path(\"\", include(router.urls)),\n    path(\"newmodule/\", CreateModuleAPIView.as_view(), name=\"create-module\"),\n    path(\"newapp/\", CreateAppAPIView.as_view(), name=\"create-app\"),\n    path(\"newdoc/\", CreateDocumentAPIView.as_view(), name=\"create-document\"),\n    path(\"migrate/\", MigrateAPIView.as_view(), name=\"migrate\"),",
        "detail": "sites.django.core.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "sites.django.core.urls",
        "description": "sites.django.core.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"\", include(router.urls)),\n    path(\"newmodule/\", CreateModuleAPIView.as_view(), name=\"create-module\"),\n    path(\"newapp/\", CreateAppAPIView.as_view(), name=\"create-app\"),\n    path(\"newdoc/\", CreateDocumentAPIView.as_view(), name=\"create-document\"),\n    path(\"migrate/\", MigrateAPIView.as_view(), name=\"migrate\"),\n    path(\"login/\", LoginView.as_view(), name=\"login\"),\n    path(\"getuser/\", UserGetViewSet.as_view(), name=\"getuser\"),\n    path(\"otp/activate/\", OTPActivationView.as_view(), name=\"otp_activate\"),\n    path(\"resend-otp/\", ResendOTPView.as_view(), name=\"resend_otp\"),",
        "detail": "sites.django.core.urls",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "sites.django.manage",
        "description": "sites.django.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "sites.django.manage",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "sites.django.te",
        "description": "sites.django.te",
        "peekOfCode": "url = \"http://127.0.0.1:8000/users/\"\nheaders = {\n    \"Content-Type\": \"application/json\"\n}\nposts = [\n    {\n        \"username\": \"ken_wafula\",\n        \"first_name\": \"Ken\",\n        \"last_name\": \"Wafula\",\n        \"email\": \"ken.wafula@example.com\",",
        "detail": "sites.django.te",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "sites.django.te",
        "description": "sites.django.te",
        "peekOfCode": "headers = {\n    \"Content-Type\": \"application/json\"\n}\nposts = [\n    {\n        \"username\": \"ken_wafula\",\n        \"first_name\": \"Ken\",\n        \"last_name\": \"Wafula\",\n        \"email\": \"ken.wafula@example.com\",\n        \"role\": \"admin\",",
        "detail": "sites.django.te",
        "documentation": {}
    },
    {
        "label": "posts",
        "kind": 5,
        "importPath": "sites.django.te",
        "description": "sites.django.te",
        "peekOfCode": "posts = [\n    {\n        \"username\": \"ken_wafula\",\n        \"first_name\": \"Ken\",\n        \"last_name\": \"Wafula\",\n        \"email\": \"ken.wafula@example.com\",\n        \"role\": \"admin\",\n        \"bio\": \"Experienced entrepreneur and business leader in Nairobi, passionate about technology and innovation.\",\n        \"receive_newsletter\": True,\n        \"password\": 1234",
        "detail": "sites.django.te",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "sites.django.test_email",
        "description": "sites.django.test_email",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = config(\"EMAIL_HOST\")\nEMAIL_PORT = config(\"EMAIL_PORT\", cast=int)\nEMAIL_HOST_USER = config(\"EMAIL_HOST_USER\")\nEMAIL_HOST_PASSWORD = config(\"EMAIL_HOST_PASSWORD\")\nEMAIL_USE_TLS = config(\"EMAIL_USE_TLS\", default=False, cast=bool)\nEMAIL_USE_SSL = config(\"EMAIL_USE_SSL\", default=False, cast=bool)\nEMAIL_SSL_CERTFILE = config(\"EMAIL_SSL_CERTFILE\")\nEMAIL_SSL_KEYFILE = config(\"EMAIL_SSL_KEYFILE\")\nEMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)",
        "detail": "sites.django.test_email",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "sites.django.test_email",
        "description": "sites.django.test_email",
        "peekOfCode": "EMAIL_HOST = config(\"EMAIL_HOST\")\nEMAIL_PORT = config(\"EMAIL_PORT\", cast=int)\nEMAIL_HOST_USER = config(\"EMAIL_HOST_USER\")\nEMAIL_HOST_PASSWORD = config(\"EMAIL_HOST_PASSWORD\")\nEMAIL_USE_TLS = config(\"EMAIL_USE_TLS\", default=False, cast=bool)\nEMAIL_USE_SSL = config(\"EMAIL_USE_SSL\", default=False, cast=bool)\nEMAIL_SSL_CERTFILE = config(\"EMAIL_SSL_CERTFILE\")\nEMAIL_SSL_KEYFILE = config(\"EMAIL_SSL_KEYFILE\")\nEMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)\nEMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\")",
        "detail": "sites.django.test_email",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "sites.django.test_email",
        "description": "sites.django.test_email",
        "peekOfCode": "EMAIL_PORT = config(\"EMAIL_PORT\", cast=int)\nEMAIL_HOST_USER = config(\"EMAIL_HOST_USER\")\nEMAIL_HOST_PASSWORD = config(\"EMAIL_HOST_PASSWORD\")\nEMAIL_USE_TLS = config(\"EMAIL_USE_TLS\", default=False, cast=bool)\nEMAIL_USE_SSL = config(\"EMAIL_USE_SSL\", default=False, cast=bool)\nEMAIL_SSL_CERTFILE = config(\"EMAIL_SSL_CERTFILE\")\nEMAIL_SSL_KEYFILE = config(\"EMAIL_SSL_KEYFILE\")\nEMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)\nEMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\")\n# Configure Django settings",
        "detail": "sites.django.test_email",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "sites.django.test_email",
        "description": "sites.django.test_email",
        "peekOfCode": "EMAIL_HOST_USER = config(\"EMAIL_HOST_USER\")\nEMAIL_HOST_PASSWORD = config(\"EMAIL_HOST_PASSWORD\")\nEMAIL_USE_TLS = config(\"EMAIL_USE_TLS\", default=False, cast=bool)\nEMAIL_USE_SSL = config(\"EMAIL_USE_SSL\", default=False, cast=bool)\nEMAIL_SSL_CERTFILE = config(\"EMAIL_SSL_CERTFILE\")\nEMAIL_SSL_KEYFILE = config(\"EMAIL_SSL_KEYFILE\")\nEMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)\nEMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\")\n# Configure Django settings\nsettings.configure(",
        "detail": "sites.django.test_email",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "sites.django.test_email",
        "description": "sites.django.test_email",
        "peekOfCode": "EMAIL_HOST_PASSWORD = config(\"EMAIL_HOST_PASSWORD\")\nEMAIL_USE_TLS = config(\"EMAIL_USE_TLS\", default=False, cast=bool)\nEMAIL_USE_SSL = config(\"EMAIL_USE_SSL\", default=False, cast=bool)\nEMAIL_SSL_CERTFILE = config(\"EMAIL_SSL_CERTFILE\")\nEMAIL_SSL_KEYFILE = config(\"EMAIL_SSL_KEYFILE\")\nEMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)\nEMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\")\n# Configure Django settings\nsettings.configure(\n    EMAIL_BACKEND=EMAIL_BACKEND,",
        "detail": "sites.django.test_email",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "sites.django.test_email",
        "description": "sites.django.test_email",
        "peekOfCode": "EMAIL_USE_TLS = config(\"EMAIL_USE_TLS\", default=False, cast=bool)\nEMAIL_USE_SSL = config(\"EMAIL_USE_SSL\", default=False, cast=bool)\nEMAIL_SSL_CERTFILE = config(\"EMAIL_SSL_CERTFILE\")\nEMAIL_SSL_KEYFILE = config(\"EMAIL_SSL_KEYFILE\")\nEMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)\nEMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\")\n# Configure Django settings\nsettings.configure(\n    EMAIL_BACKEND=EMAIL_BACKEND,\n    EMAIL_HOST=EMAIL_HOST,",
        "detail": "sites.django.test_email",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_SSL",
        "kind": 5,
        "importPath": "sites.django.test_email",
        "description": "sites.django.test_email",
        "peekOfCode": "EMAIL_USE_SSL = config(\"EMAIL_USE_SSL\", default=False, cast=bool)\nEMAIL_SSL_CERTFILE = config(\"EMAIL_SSL_CERTFILE\")\nEMAIL_SSL_KEYFILE = config(\"EMAIL_SSL_KEYFILE\")\nEMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)\nEMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\")\n# Configure Django settings\nsettings.configure(\n    EMAIL_BACKEND=EMAIL_BACKEND,\n    EMAIL_HOST=EMAIL_HOST,\n    EMAIL_PORT=EMAIL_PORT,",
        "detail": "sites.django.test_email",
        "documentation": {}
    },
    {
        "label": "EMAIL_SSL_CERTFILE",
        "kind": 5,
        "importPath": "sites.django.test_email",
        "description": "sites.django.test_email",
        "peekOfCode": "EMAIL_SSL_CERTFILE = config(\"EMAIL_SSL_CERTFILE\")\nEMAIL_SSL_KEYFILE = config(\"EMAIL_SSL_KEYFILE\")\nEMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)\nEMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\")\n# Configure Django settings\nsettings.configure(\n    EMAIL_BACKEND=EMAIL_BACKEND,\n    EMAIL_HOST=EMAIL_HOST,\n    EMAIL_PORT=EMAIL_PORT,\n    EMAIL_HOST_USER=EMAIL_HOST_USER,",
        "detail": "sites.django.test_email",
        "documentation": {}
    },
    {
        "label": "EMAIL_SSL_KEYFILE",
        "kind": 5,
        "importPath": "sites.django.test_email",
        "description": "sites.django.test_email",
        "peekOfCode": "EMAIL_SSL_KEYFILE = config(\"EMAIL_SSL_KEYFILE\")\nEMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)\nEMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\")\n# Configure Django settings\nsettings.configure(\n    EMAIL_BACKEND=EMAIL_BACKEND,\n    EMAIL_HOST=EMAIL_HOST,\n    EMAIL_PORT=EMAIL_PORT,\n    EMAIL_HOST_USER=EMAIL_HOST_USER,\n    EMAIL_HOST_PASSWORD=EMAIL_HOST_PASSWORD,",
        "detail": "sites.django.test_email",
        "documentation": {}
    },
    {
        "label": "EMAIL_TIMEOUT",
        "kind": 5,
        "importPath": "sites.django.test_email",
        "description": "sites.django.test_email",
        "peekOfCode": "EMAIL_TIMEOUT = config(\"EMAIL_TIMEOUT\", default=10, cast=int)\nEMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\")\n# Configure Django settings\nsettings.configure(\n    EMAIL_BACKEND=EMAIL_BACKEND,\n    EMAIL_HOST=EMAIL_HOST,\n    EMAIL_PORT=EMAIL_PORT,\n    EMAIL_HOST_USER=EMAIL_HOST_USER,\n    EMAIL_HOST_PASSWORD=EMAIL_HOST_PASSWORD,\n    EMAIL_USE_TLS=EMAIL_USE_TLS,",
        "detail": "sites.django.test_email",
        "documentation": {}
    },
    {
        "label": "EMAIL_SSL_CAFILE",
        "kind": 5,
        "importPath": "sites.django.test_email",
        "description": "sites.django.test_email",
        "peekOfCode": "EMAIL_SSL_CAFILE = config(\"EMAIL_SSL_CAFILE\")\n# Configure Django settings\nsettings.configure(\n    EMAIL_BACKEND=EMAIL_BACKEND,\n    EMAIL_HOST=EMAIL_HOST,\n    EMAIL_PORT=EMAIL_PORT,\n    EMAIL_HOST_USER=EMAIL_HOST_USER,\n    EMAIL_HOST_PASSWORD=EMAIL_HOST_PASSWORD,\n    EMAIL_USE_TLS=EMAIL_USE_TLS,\n    EMAIL_USE_SSL=EMAIL_USE_SSL,",
        "detail": "sites.django.test_email",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "sites.nextjs.node_modules.flatted.python.flatted",
        "description": "sites.nextjs.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "sites.nextjs.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "sites.nextjs.node_modules.flatted.python.flatted",
        "description": "sites.nextjs.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "sites.nextjs.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "sites.nextjs.node_modules.flatted.python.flatted",
        "description": "sites.nextjs.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "sites.nextjs.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "sites.nextjs.node_modules.flatted.python.flatted",
        "description": "sites.nextjs.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "sites.nextjs.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "sites.nextjs.node_modules.flatted.python.test",
        "description": "sites.nextjs.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "sites.nextjs.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "sites.nextjs.node_modules.flatted.python.test",
        "description": "sites.nextjs.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "sites.nextjs.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "sites.nextjs.node_modules.flatted.python.test",
        "description": "sites.nextjs.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "sites.nextjs.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "sites.nextjs.node_modules.flatted.python.test",
        "description": "sites.nextjs.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "sites.nextjs.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "sites.nextjs.node_modules.flatted.python.test",
        "description": "sites.nextjs.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "sites.nextjs.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "sites.nextjs.node_modules.flatted.python.test",
        "description": "sites.nextjs.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "sites.nextjs.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "sites.nextjs.node_modules.flatted.python.test",
        "description": "sites.nextjs.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "sites.nextjs.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "sites.nextjs.node_modules.flatted.python.test",
        "description": "sites.nextjs.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "sites.nextjs.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "sites.nextjs.node_modules.flatted.python.test",
        "description": "sites.nextjs.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "sites.nextjs.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "sites.nextjs.node_modules.flatted.python.test",
        "description": "sites.nextjs.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "sites.nextjs.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "sites.nextjs.node_modules.flatted.python.test",
        "description": "sites.nextjs.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "sites.nextjs.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "sites.nextjs.node_modules.flatted.python.test",
        "description": "sites.nextjs.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "sites.nextjs.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "sites.nextjs.node_modules.flatted.python.test",
        "description": "sites.nextjs.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "sites.nextjs.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "sites.nextjs.node_modules.flatted.python.test",
        "description": "sites.nextjs.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "sites.nextjs.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "sites.nextjs.node_modules.flatted.python.test",
        "description": "sites.nextjs.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "sites.nextjs.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "find_readme_files",
        "kind": 2,
        "importPath": "sites.nextjs.src.components.functions.documentation.documentation_script",
        "description": "sites.nextjs.src.components.functions.documentation.documentation_script",
        "peekOfCode": "def find_readme_files(current_path, current_depth=0, max_depth=20):\n    documentation_data = []\n    # Check for maximum depth\n    if current_depth > max_depth:\n        return documentation_data\n    # Search for README files in the current directory\n    for root, dirs, files in os.walk(current_path):\n        for file in files:\n            if file.lower() == \"readme.md\":  # Check for case-insensitive match\n                file_path = os.path.join(root, file)",
        "detail": "sites.nextjs.src.components.functions.documentation.documentation_script",
        "documentation": {}
    },
    {
        "label": "search_upwards",
        "kind": 2,
        "importPath": "sites.nextjs.src.components.functions.documentation.documentation_script",
        "description": "sites.nextjs.src.components.functions.documentation.documentation_script",
        "peekOfCode": "def search_upwards(current_path, max_depth=20):\n    documentation_data = []\n    for depth in range(max_depth):\n        parent_dir = os.path.dirname(current_path)\n        if parent_dir and parent_dir != current_path:\n            # Search in the parent directory\n            documentation_data.extend(find_readme_files(parent_dir))\n            current_path = parent_dir  # Move up to the parent directory\n        else:\n            break  # Stop if no more parent directory",
        "detail": "sites.nextjs.src.components.functions.documentation.documentation_script",
        "documentation": {}
    },
    {
        "label": "search_downwards",
        "kind": 2,
        "importPath": "sites.nextjs.src.components.functions.documentation.documentation_script",
        "description": "sites.nextjs.src.components.functions.documentation.documentation_script",
        "peekOfCode": "def search_downwards(root_path):\n    documentation_data = []\n    for root, dirs, files in os.walk(root_path):\n        for file in files:\n            if file.lower() == \"readme.md\":  # Check for case-insensitive match\n                file_path = os.path.join(root, file)\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.readlines()\n                    title = content[0].strip() if content else \"Untitled\"\n                    steps = [{\"step\": i + 1, \"title\": line.strip(), \"description\": \"\", \"caution\": \"\"}",
        "detail": "sites.nextjs.src.components.functions.documentation.documentation_script",
        "documentation": {}
    },
    {
        "label": "save_to_json",
        "kind": 2,
        "importPath": "sites.nextjs.src.components.functions.documentation.documentation_script",
        "description": "sites.nextjs.src.components.functions.documentation.documentation_script",
        "peekOfCode": "def save_to_json(data, output_file):\n    with open(output_file, 'w', encoding='utf-8') as f:\n        json.dump(data, f, indent=4)\nif __name__ == \"__main__\":\n    current_script_path = os.path.dirname(os.path.abspath(__file__))  # Get the directory of the script\n    output_file = os.path.join(current_script_path, 'documentation_data.json')\n    # First, search upwards to collect data from parent directories\n    documentation_data = search_upwards(current_script_path)\n    # After reaching the top, search downwards from the top directory\n    documentation_data.extend(search_downwards(current_script_path))",
        "detail": "sites.nextjs.src.components.functions.documentation.documentation_script",
        "documentation": {}
    }
]